import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,a}from"./app-ClhoyXrL.js";const n={},t=a(`<h2 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么"><span>是什么</span></a></h2><p>回溯算法（BackTracing）是一种搜索方法，简单理解是一种简单粗暴的试错搜索。</p><p>回溯问题可以抽象为「树形」问题，递归向下处理和获取结果，递归向上撤销结果。</p><p>回溯函数也就是递归函数，指的都是一个函数。</p><h2 id="解决什么问题" tabindex="-1"><a class="header-anchor" href="#解决什么问题"><span>解决什么问题</span></a></h2><p><strong>回溯的本质是穷举</strong>，穷举所有可能，然后选出我们想要的答案。在一些问题上通过for循环暴力枚举是不可行的，但回溯却可以解决问题。</p><p>回溯法，一般可以解决如下几种问题：</p><ul><li>组合问题：N个数里面按一定规则找出k个数的集合</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>排列问题：N个数按一定规则全排列，有几种排列方式</li><li>棋盘问题：N皇后，解数独等等</li></ul><h2 id="如何理解以及模板" tabindex="-1"><a class="header-anchor" href="#如何理解以及模板"><span>如何理解以及模板</span></a></h2><ol><li>回溯法解决的问题都可以抽象为「树形结构」</li><li>集合的大小就构成了树的宽度，递归的深度就构成了树的深度。</li></ol><p>回溯三要素</p><ul><li>函数返回值一般为void，参数根据情况而定</li><li>终止条件</li><li>搜索过程</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> backtracking</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(参数) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (终止条件) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        存放结果</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        处理节点</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        backtracking</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(路径，选择列表)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 递归</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        回溯，撤销处理结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),l=[t];function p(r,h){return e(),s("div",null,l)}const o=i(n,[["render",p],["__file","回溯算法理论基础.html.vue"]]),k=JSON.parse('{"path":"/leetcode/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html","title":"回溯算法理论基础","lang":"zh-CN","frontmatter":{"title":"回溯算法理论基础","date":"2024-07-14T00:00:00.000Z","category":"leetcode","tag":["回溯"],"description":"是什么 回溯算法（BackTracing）是一种搜索方法，简单理解是一种简单粗暴的试错搜索。 回溯问题可以抽象为「树形」问题，递归向下处理和获取结果，递归向上撤销结果。 回溯函数也就是递归函数，指的都是一个函数。 解决什么问题 回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案。在一些问题上通过for循环暴力枚举是不可行的，但回溯却可以解决问题。 ...","head":[["meta",{"property":"og:url","content":"https://doublew2w.cn/leetcode/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"DoubleW2w"}],["meta",{"property":"og:title","content":"回溯算法理论基础"}],["meta",{"property":"og:description","content":"是什么 回溯算法（BackTracing）是一种搜索方法，简单理解是一种简单粗暴的试错搜索。 回溯问题可以抽象为「树形」问题，递归向下处理和获取结果，递归向上撤销结果。 回溯函数也就是递归函数，指的都是一个函数。 解决什么问题 回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案。在一些问题上通过for循环暴力枚举是不可行的，但回溯却可以解决问题。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T16:11:02.000Z"}],["meta",{"property":"article:author","content":"Doublew2w"}],["meta",{"property":"article:tag","content":"回溯"}],["meta",{"property":"article:published_time","content":"2024-07-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T16:11:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"回溯算法理论基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-30T16:11:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Doublew2w\\",\\"url\\":\\"https://doublew2w.cn\\"}]}"]]},"headers":[{"level":2,"title":"是什么","slug":"是什么","link":"#是什么","children":[]},{"level":2,"title":"解决什么问题","slug":"解决什么问题","link":"#解决什么问题","children":[]},{"level":2,"title":"如何理解以及模板","slug":"如何理解以及模板","link":"#如何理解以及模板","children":[]}],"git":{"createdTime":1732983062000,"updatedTime":1732983062000,"contributors":[{"name":"DoubleW2w","email":"1049951363@qq.com","commits":1}]},"readingTime":{"minutes":1.41,"words":423},"filePathRelative":"leetcode/回溯算法理论基础.md","localizedDate":"2024年7月14日","excerpt":"<h2>是什么</h2>\\n<p>回溯算法（BackTracing）是一种搜索方法，简单理解是一种简单粗暴的试错搜索。</p>\\n<p>回溯问题可以抽象为「树形」问题，递归向下处理和获取结果，递归向上撤销结果。</p>\\n<p>回溯函数也就是递归函数，指的都是一个函数。</p>\\n<h2>解决什么问题</h2>","autoDesc":true}');export{o as comp,k as data};
