import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-ClhoyXrL.js";const t="/assets/image-20240718142904642-Do4Jaz8R.png",n={},l=e('<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>在父类中提供一个「创建对象」的方法，允许子类决定实例化对象的类型。</p><p>简单理解就是将 <code>new</code> 操作放到工厂方法中。</p><p><img src="https://refactoringguru.cn/images/patterns/content/factory-method/factory-method-zh.png" alt="工厂方法模式" loading="lazy"></p><p style="text-align:center;">图片来自：https://refactoringguru.cn/design-patterns/factory-method</p><ul><li>创建者：声明一个工厂方法，并返回对应类型的产品对象</li><li>产品：产品接口</li><li>具体产品：产品接口的不同实现</li><li>具体创建者：创建者的不同实现，重写工厂方法。</li></ul><h2 id="uml" tabindex="-1"><a class="header-anchor" href="#uml"><span>UML</span></a></h2><p><img src="'+t+`" alt="image-20240718142904642" loading="lazy"></p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Product</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ConcreteProduct1</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Product</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> ConcreteProduct2</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Product</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  IFactory {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Product</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> factoryMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ConcreteFactory1</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> implements IFactory {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Product</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> factoryMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ConcreteProduct1</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ConcreteFactory2</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> implements IFactory {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Product</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> factoryMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ConcreteProduct2</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),h=[l];function p(r,d){return a(),s("div",null,h)}const o=i(n,[["render",p],["__file","工厂方法.html.vue"]]),g=JSON.parse('{"path":"/design-pattern/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95.html","title":"工厂方法","lang":"zh-CN","frontmatter":{"title":"工厂方法","date":"2024-07-18T00:00:00.000Z","category":"工厂方法","description":"概念 在父类中提供一个「创建对象」的方法，允许子类决定实例化对象的类型。 简单理解就是将 new 操作放到工厂方法中。 工厂方法模式 图片来自：https://refactoringguru.cn/design-patterns/factory-method 创建者：声明一个工厂方法，并返回对应类型的产品对象 产品：产品接口 具体产品：产品接口的不同实...","head":[["meta",{"property":"og:url","content":"https://doublew2w.cn/design-pattern/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"DoubleW2w"}],["meta",{"property":"og:title","content":"工厂方法"}],["meta",{"property":"og:description","content":"概念 在父类中提供一个「创建对象」的方法，允许子类决定实例化对象的类型。 简单理解就是将 new 操作放到工厂方法中。 工厂方法模式 图片来自：https://refactoringguru.cn/design-patterns/factory-method 创建者：声明一个工厂方法，并返回对应类型的产品对象 产品：产品接口 具体产品：产品接口的不同实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://refactoringguru.cn/images/patterns/content/factory-method/factory-method-zh.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T16:11:02.000Z"}],["meta",{"property":"article:author","content":"Doublew2w"}],["meta",{"property":"article:published_time","content":"2024-07-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T16:11:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工厂方法\\",\\"image\\":[\\"https://refactoringguru.cn/images/patterns/content/factory-method/factory-method-zh.png\\"],\\"datePublished\\":\\"2024-07-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-30T16:11:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Doublew2w\\",\\"url\\":\\"https://doublew2w.cn\\"}]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"UML","slug":"uml","link":"#uml","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1732983062000,"updatedTime":1732983062000,"contributors":[{"name":"DoubleW2w","email":"1049951363@qq.com","commits":1}]},"readingTime":{"minutes":0.66,"words":198},"filePathRelative":"design-pattern/工厂方法.md","localizedDate":"2024年7月18日","excerpt":"<h2>概念</h2>\\n<p>在父类中提供一个「创建对象」的方法，允许子类决定实例化对象的类型。</p>\\n<p>简单理解就是将 <code>new</code> 操作放到工厂方法中。</p>\\n<p><img src=\\"https://refactoringguru.cn/images/patterns/content/factory-method/factory-method-zh.png\\" alt=\\"工厂方法模式\\" loading=\\"lazy\\"></p>","autoDesc":true}');export{o as comp,g as data};
