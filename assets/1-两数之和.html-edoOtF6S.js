import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as e,d as n,a as s,b as i}from"./app-DO2M8Rsq.js";const l={},h=n(`<h2 id="题目地址-1-两数之和-力扣-leetcode" tabindex="-1"><a class="header-anchor" href="#题目地址-1-两数之和-力扣-leetcode"><span>题目地址(1. 两数之和 - 力扣（LeetCode）)</span></a></h2><p><a href="https://leetcode.cn/problems/two-sum/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/problems/two-sum/</a></p><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p> 给定一个整数数组 <code> nums </code>  和一个整数目标值 <code> target </code>，请你在该数组中找出 <strong> 和为目标值 </strong> <em><code> target </code></em>  的那  <strong> 两个 </strong>  整数，并返回它们的数组下标。</p><p> 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p> 你可以按任意顺序返回答案。</p><p>  </p><p><strong class="example"> 示例 1：</strong></p><pre> <strong> 输入：</strong> nums = [2,7,11,15], target = 9
<strong> 输出：</strong> [0,1]
<strong> 解释：</strong> 因为 nums [0] + nums [1] == 9 ，返回 [0, 1] 。
</pre><p><strong class="example"> 示例 2：</strong></p><pre> <strong> 输入：</strong> nums = [3,2,4], target = 6
<strong> 输出：</strong> [1,2]
</pre><p><strong class="example"> 示例 3：</strong></p><pre> <strong> 输入：</strong> nums = [3,3], target = 6
<strong> 输出：</strong> [0,1]
</pre><p>  </p><p><strong> 提示：</strong></p><ul><li><code> 2 &lt;= nums.length &lt;= 10 <sup> 4 </sup></code></li><li><code>-10 <sup> 9 </sup> &lt;= nums [i] &lt;= 10 <sup> 9 </sup></code></li><li><code>-10 <sup> 9 </sup> &lt;= target &lt;= 10 <sup> 9 </sup></code></li><li><strong> 只会存在一个有效答案 </strong></li></ul><p>  </p><p><strong> 进阶：</strong> 你可以想出一个时间复杂度小于 <code> O(n <sup> 2 </sup>)</code> 的算法吗？</p><h2 id="前置知识" tabindex="-1"><a class="header-anchor" href="#前置知识"><span>前置知识</span></a></h2><ul><li>哈希表</li></ul><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h2><p>创建一个哈希表，对于每个 <code>x</code>，通过查询 <code>target - x</code> 是否存在于哈希表中</p><ul><li>不存在，则将 <code>x</code> 插入哈希表</li><li>存在，<code>x</code> 的下标与 <code>target-x</code> 的下标就是答案</li></ul><blockquote><p>如果有 3 个或者以上的重复元素，代表这个重复元素不可能是解</p><p>如果只有两个重复元素，同样的道理，假如这个重复元素是解，那么必定是两个重复元素的和等于 target。</p></blockquote><h2 id="关键点" tabindex="-1"><a class="header-anchor" href="#关键点"><span>关键点</span></a></h2><ul><li>每种输入只会对应一个答案</li><li>哈希表存储的 key 是 <code>x</code> 和 <code>target - x</code></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码</span></a></h2><ul><li>语言支持：Java</li></ul><p>Java Code:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Solution</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#61AFEF;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">twoSum</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">nums</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">map</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> nums</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">i) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> first</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  target </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> nums[i];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">containsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(first)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                int</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> firstIndex</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> nums[i]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[]{firstIndex, i};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(nums[i], i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>复杂度分析</strong></p><p>令 n 为数组长度。</p>`,32),p=s("ul",null,[s("li",null,[i("时间复杂度："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])])]),s("li",null,[i("空间复杂度："),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),i("，哈希表存储元素的开销")])],-1),r=[h,p];function k(d,o){return e(),t("div",null,r)}const m=a(l,[["render",k],["__file","1-两数之和.html.vue"]]),B=JSON.parse('{"path":"/leetcode/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html","title":"1-两数之和","lang":"zh-CN","frontmatter":{"title":"1-两数之和","date":"2024-06-28T00:00:00.000Z","tag":"哈希表","category":"LeetCode","description":"题目地址(1. 两数之和 - 力扣（LeetCode）) https://leetcode.cn/problems/two-sum/ 题目描述 给定一个整数数组 nums 和一个整数目标值 target ，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在...","head":[["meta",{"property":"og:url","content":"https://doublew2w.cn/leetcode/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html"}],["meta",{"property":"og:site_name","content":"DoubleW2w"}],["meta",{"property":"og:title","content":"1-两数之和"}],["meta",{"property":"og:description","content":"题目地址(1. 两数之和 - 力扣（LeetCode）) https://leetcode.cn/problems/two-sum/ 题目描述 给定一个整数数组 nums 和一个整数目标值 target ，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-14T17:06:50.000Z"}],["meta",{"property":"article:author","content":"Doublew2w"}],["meta",{"property":"article:tag","content":"哈希表"}],["meta",{"property":"article:published_time","content":"2024-06-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-14T17:06:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1-两数之和\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-14T17:06:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Doublew2w\\",\\"url\\":\\"https://doublew2w.cn\\"}]}"]]},"headers":[{"level":2,"title":"题目地址(1. 两数之和 - 力扣（LeetCode）)","slug":"题目地址-1-两数之和-力扣-leetcode","link":"#题目地址-1-两数之和-力扣-leetcode","children":[]},{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"前置知识","slug":"前置知识","link":"#前置知识","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"关键点","slug":"关键点","link":"#关键点","children":[]},{"level":2,"title":"代码","slug":"代码","link":"#代码","children":[]}],"git":{"createdTime":1720976810000,"updatedTime":1720976810000,"contributors":[{"name":"DoubleW2w","email":"1049951363@qq.com","commits":1}]},"readingTime":{"minutes":2.03,"words":609},"filePathRelative":"leetcode/1-两数之和.md","localizedDate":"2024年6月28日","excerpt":"<h2>题目地址(1. 两数之和 - 力扣（LeetCode）)</h2>\\n<p><a href=\\"https://leetcode.cn/problems/two-sum/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://leetcode.cn/problems/two-sum/</a></p>","autoDesc":true}');export{m as comp,B as data};
