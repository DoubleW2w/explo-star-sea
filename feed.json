{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "DoubleW2w",
  "home_page_url": "https://doublew2w.cn/",
  "feed_url": "https://doublew2w.cn/feed.json",
  "description": "开源工具、效率方法、心理学探索的自我提升笔记，记录并输出一切能让自己提升的知识。",
  "items": [
    {
      "title": "主要功能与配置演示",
      "url": "https://doublew2w.cn/demo/",
      "id": "https://doublew2w.cn/demo/",
      "content_html": "",
      "date_published": "2024-07-08T16:48:00.000Z",
      "date_modified": "2024-07-08T16:48:00.000Z",
      "authors": [],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "布局与功能禁用",
      "url": "https://doublew2w.cn/demo/disable.html",
      "id": "https://doublew2w.cn/demo/disable.html",
      "summary": "你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。",
      "content_html": "<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>\n<!-- more -->\n<p>本页面就是一个示例，禁用了如下功能:</p>\n<ul>\n<li>导航栏</li>\n<li>侧边栏</li>\n<li>路径导航</li>\n<li>页面信息</li>\n<li>贡献者</li>\n<li>编辑此页链接</li>\n<li>更新时间</li>\n<li>上一篇/下一篇 链接</li>\n<li>评论</li>\n<li>页脚</li>\n<li>返回顶部按钮</li>\n</ul>\n",
      "date_published": "2024-07-08T16:48:00.000Z",
      "date_modified": "2024-07-08T16:48:00.000Z",
      "authors": [],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "布局",
      "url": "https://doublew2w.cn/demo/layout.html",
      "id": "https://doublew2w.cn/demo/layout.html",
      "summary": "布局包括: 导航栏 侧边栏 页脚 同时每个页面包含: 路径导航 标题和页面信息 TOC (文章标题列表) 贡献者、更新时间等页面元信息 评论 主题也带有以下元素: 夜间模式按钮 返回顶部按钮 打印按钮 你可以在主题选项和页面的 frontmatter 中自定义它们。",
      "content_html": "<p>布局包括:</p>\n<ul>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/layout/navbar.html\" target=\"_blank\" rel=\"noopener noreferrer\">导航栏</a></li>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/layout/sidebar.html\" target=\"_blank\" rel=\"noopener noreferrer\">侧边栏</a></li>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/layout/footer.html\" target=\"_blank\" rel=\"noopener noreferrer\">页脚</a></li>\n</ul>\n<p>同时每个页面包含:</p>\n<ul>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/layout/breadcrumb.html\" target=\"_blank\" rel=\"noopener noreferrer\">路径导航</a></li>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/feature/page-info.html\" target=\"_blank\" rel=\"noopener noreferrer\">标题和页面信息</a></li>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/layout/page.html#%E6%A0%87%E9%A2%98%E5%88%97%E8%A1%A8\" target=\"_blank\" rel=\"noopener noreferrer\">TOC (文章标题列表)</a></li>\n<li><a href=\"https://theme-hope.vuejs.press/guide/feature/meta.html\" target=\"_blank\" rel=\"noopener noreferrer\">贡献者、更新时间等页面元信息</a></li>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/feature/comment.html\" target=\"_blank\" rel=\"noopener noreferrer\">评论</a></li>\n</ul>\n<p>主题也带有以下元素:</p>\n<ul>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/interface/darkmode.html\" target=\"_blank\" rel=\"noopener noreferrer\">夜间模式按钮</a></li>\n<li><a href=\"https://theme-hope.vuejs.press/guide/interface/others.html#%E8%BF%94%E5%9B%9E%E9%A1%B6%E9%83%A8%E6%8C%89%E9%92%AE\" target=\"_blank\" rel=\"noopener noreferrer\">返回顶部按钮</a></li>\n<li><a href=\"https://theme-hope.vuejs.press/guide/interface/others.html#%E6%89%93%E5%8D%B0%E6%8C%89%E9%92%AE\" target=\"_blank\" rel=\"noopener noreferrer\">打印按钮</a></li>\n</ul>\n<p>你可以在主题选项和页面的 frontmatter 中自定义它们。</p>\n",
      "date_published": "2024-07-08T16:48:00.000Z",
      "date_modified": "2024-07-08T16:48:00.000Z",
      "authors": [],
      "tags": [
        "指南"
      ]
    },
    {
      "title": "Markdown 展示",
      "url": "https://doublew2w.cn/demo/markdown.html",
      "id": "https://doublew2w.cn/demo/markdown.html",
      "summary": "VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。 你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。",
      "content_html": "<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>\n<p>你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>\n<!-- more -->\n<h2>Markdown 介绍</h2>\n<p>如果你是一个新手，还不会编写 Markdown，请先阅读 <a href=\"https://theme-hope.vuejs.press/zh/cookbook/markdown/\" target=\"_blank\" rel=\"noopener noreferrer\">Markdown 介绍</a> 和 <a href=\"https://theme-hope.vuejs.press/zh/cookbook/markdown/demo.html\" target=\"_blank\" rel=\"noopener noreferrer\">Markdown 演示</a>。</p>\n<h2>Markdown 配置</h2>\n<p>VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。</p>\n<div class=\"hint-container important\">\n<p class=\"hint-container-title\">Frontmatter</p>\n<p>Frontmatter 是 VuePress 中很重要的一个概念，请阅读 <a href=\"https://theme-hope.vuejs.press/zh/cookbook/vuepress/page.html#front-matter\" target=\"_blank\" rel=\"noopener noreferrer\">Frontmatter 介绍</a> 了解详情。</p>\n</div>\n<h2>Markdown 扩展</h2>\n<p>VuePress 会使用 <a href=\"https://github.com/markdown-it/markdown-it\" target=\"_blank\" rel=\"noopener noreferrer\">markdown-it</a> 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 <a href=\"https://github.com/markdown-it/markdown-it#syntax-extensions\" target=\"_blank\" rel=\"noopener noreferrer\">语法扩展</a> 。</p>\n<h3>VuePress 扩展</h3>\n<p>为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。</p>\n<p>关于这些扩展，请阅读 <a href=\"https://theme-hope.vuejs.press/zh/cookbook/vuepress/markdown.html\" target=\"_blank\" rel=\"noopener noreferrer\">VuePress 中的 Markdown 扩展</a>。</p>\n<h3>主题扩展</h3>\n<p>通过 <a href=\"https://plugin-md-enhance.vuejs.press/zh/\" target=\"_blank\" rel=\"noopener noreferrer\"><code>vuepress-plugin-md-enhance</code></a>，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。</p>\n<h4>选项卡</h4>\n\n<ul>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/markdown/content/tabs.html\" target=\"_blank\" rel=\"noopener noreferrer\">查看详情</a></li>\n</ul>\n<h4>脚注</h4>\n<p>此文字有脚注<sup class=\"footnote-ref\"><a href=\"#footnote1\">[1]</a><a class=\"footnote-anchor\" id=\"footnote-ref1\"></a></sup><a class=\"footnote-anchor\" id=\"footnote-ref1\">.</a></p><a class=\"footnote-anchor\" id=\"footnote-ref1\">\n</a><ul><a class=\"footnote-anchor\" id=\"footnote-ref1\">\n</a><li><a class=\"footnote-anchor\" id=\"footnote-ref1\"></a><a href=\"https://theme-hope.vuejs.press/zh/guide/markdown/content/footnote.html\" target=\"_blank\" rel=\"noopener noreferrer\">查看详情</a></li>\n</ul>\n<h4>导入文件</h4>\n<ul>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/markdown/content/include.html\" target=\"_blank\" rel=\"noopener noreferrer\">查看详情</a></li>\n</ul>\n<h4>TeX 语法</h4>\n<p v-pre=\"\" class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><msup><mi mathvariant=\"normal\">∂</mi><mi>r</mi></msup><mrow><mi mathvariant=\"normal\">∂</mi><msup><mi>ω</mi><mi>r</mi></msup></mrow></mfrac><mrow><mo fence=\"true\">(</mo><mfrac><msup><mi>y</mi><mi>ω</mi></msup><mi>ω</mi></mfrac><mo fence=\"true\">)</mo></mrow><mo>=</mo><mrow><mo fence=\"true\">(</mo><mfrac><msup><mi>y</mi><mi>ω</mi></msup><mi>ω</mi></mfrac><mo fence=\"true\">)</mo></mrow><mrow><mo fence=\"true\">{</mo><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>y</mi><msup><mo stretchy=\"false\">)</mo><mi>r</mi></msup><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>r</mi></munderover><mfrac><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>i</mi></msup><mi>r</mi><mo>⋯</mo><mo stretchy=\"false\">(</mo><mi>r</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>y</mi><msup><mo stretchy=\"false\">)</mo><mrow><mi>r</mi><mo>−</mo><mi>i</mi></mrow></msup></mrow><msup><mi>ω</mi><mi>i</mi></msup></mfrac><mo fence=\"true\">}</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\n\\frac {\\partial^r} {\\partial \\omega^r} \\left(\\frac {y^{\\omega}} {\\omega}\\right)\n= \\left(\\frac {y^{\\omega}} {\\omega}\\right) \\left\\{(\\log y)^r + \\sum_{i=1}^r \\frac {(-1)^i r \\cdots (r-i+1) (\\log y)^{r-i}} {\\omega^i} \\right\\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.4em;vertical-align:-0.95em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5904em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3414em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0277em;vertical-align:-1.2777em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3414em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7144em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6514em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5017em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7507em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">}</span></span></span></span></span></span></span></p>\n<ul>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/markdown/grammar/tex.html\" target=\"_blank\" rel=\"noopener noreferrer\">查看详情</a></li>\n</ul>\n<h4>任务列表</h4>\n<ul class=\"task-list-container\">\n<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" id=\"task-item-0\" checked=\"checked\" disabled=\"disabled\"><label class=\"task-list-item-label\" for=\"task-item-0\"> 计划 1</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" id=\"task-item-1\" disabled=\"disabled\"><label class=\"task-list-item-label\" for=\"task-item-1\"> 计划 2</label></li>\n</ul>\n<p><a href=\"https://theme-hope.vuejs.press/zh/guide/markdown/grammar/tasklist.html\" target=\"_blank\" rel=\"noopener noreferrer\">查看详情</a></p>\n<h3>图片增强</h3>\n<p>支持为图片设置颜色模式和大小。</p>\n<ul>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/markdown/grammar/image.html\" target=\"_blank\" rel=\"noopener noreferrer\">查看详情</a></li>\n</ul>\n<h4>上下角标</h4>\n<p>19<sup>th</sup> H<sub>2</sub>O</p>\n<ul>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/markdown/grammar/sup-sub.html\" target=\"_blank\" rel=\"noopener noreferrer\">查看详情</a></li>\n</ul>\n<h4>组件</h4>\n",
      "date_published": "2024-07-08T16:48:00.000Z",
      "date_modified": "2024-07-08T16:48:00.000Z",
      "authors": [],
      "tags": [
        "使用指南"
      ]
    },
    {
      "title": "104-二叉树的最大深度",
      "url": "https://doublew2w.cn/leetcode/104-maximum-depth-of-binary-tree.html",
      "id": "https://doublew2w.cn/leetcode/104-maximum-depth-of-binary-tree.html",
      "summary": "题目地址(104. 二叉树的最大深度 - 力扣（LeetCode）) https://leetcode.cn/problems/maximum-depth-of-binary-tree/submissions/ 题目描述 给定一个二叉树 root ，返回其最大深度。 二叉树的 最大深度 是指从根节点到最远叶子节点的最长路径上的节点数。 示例 1： 示例...",
      "content_html": "<h2>题目地址(104. 二叉树的最大深度 - 力扣（LeetCode）)</h2>\n<p><a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/submissions/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/maximum-depth-of-binary-tree/submissions/</a></p>\n<h2>题目描述</h2>\n<p> 给定一个二叉树 <code> root </code> ，返回其最大深度。</p>\n<p> 二叉树的 <strong> 最大深度 </strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</p>\n<p>&nbsp; </p>\n<p> <strong> 示例 1：</strong> </p>\n<p> <img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg\" style=\"width: 400px; height: 277px;\"> </p>\n<p>&nbsp; </p>\n<pre> <b> 输入：</b> root = [3,9,20, null, null,15,7]\n<b> 输出：</b> 3\n</pre>\n<p> <strong> 示例 2：</strong> </p>\n<pre> <b> 输入：</b> root = [1, null,2]\n<b> 输出：</b> 2\n</pre>\n<p>&nbsp; </p>\n<p> <strong> 提示：</strong> </p>\n<ul>\n\t<li> 树中节点的数量在&nbsp; <code> [0, 10 <sup> 4 </sup>] </code>&nbsp; 区间内。</li>\n\t<li> <code>-100 &lt;= Node.val &lt;= 100 </code> </li>\n</ul>\n<h2>前置知识</h2>\n<ul>\n<li>深度概念</li>\n<li>二叉树</li>\n<li>DFS、BFS</li>\n</ul>\n<h2>思路 1: DFS</h2>\n<p>二叉树的最大深度 = Math.max(左子树的最大深度，右子树的最大深度) + 1</p>\n<p>递归三要素:</p>\n<ol>\n<li><strong>终止条件：</strong> 当 root 为空时，说明不是叶节点，因此深度是 0</li>\n<li><strong>单层递归逻辑</strong>：计算节点 root 的 左子树的深度 ，计算节点 root 的 右子树的深度</li>\n<li><strong>返回值：</strong>：返回树的深度</li>\n</ol>\n<h2>关键点</h2>\n<p>二叉树的最大深度 = Math.max(左子树的最大深度，右子树的最大深度) + 1</p>\n<h2>代码</h2>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes github-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\"> maxDepth</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">TreeNode</span><span style=\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\"> root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (root </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        // 单层递归逻辑：求树的大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        // 树的最大深度 = max(左子树的最大深度 ，右子树的最大深度) + 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> Math</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">max</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">maxDepth</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">),</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">maxDepth</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">))</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>复杂度分析</strong></p>\n<p>令 n 为二叉树节点个数。</p>\n<ul>\n<li>时间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，计算树的深度需要遍历所有节点。</li>\n<li>空间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，最差情况下（当树退化为链表时），递归深度可达到 N 。</li>\n</ul>\n<h2>思路 2：BFS</h2>\n<p>树的层序遍历 / 广度优先搜索往往利用 队列 实现。</p>\n<p><strong>关键点：</strong> 每遍历一层，则计数器 +1 ，直到遍历完成，则可得到树的深度。</p>\n<h3>代码</h3>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes github-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\"> maxDepth</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">TreeNode</span><span style=\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\"> root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (root </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">        List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\">TreeNode</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\">queue</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> LinkedList</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;&gt;() {{ add(root); }}, tmp;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> res</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        while</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">queue</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">isEmpty</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">()) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">            tmp </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> LinkedList</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">            for</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">TreeNode</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> node</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> queue) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> !=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">tmp</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> !=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">tmp</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">            queue </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> tmp;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">            res</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#ABB2BF\">++</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>复杂度分析</strong></p>\n<p>令 n 为二叉树节点个数。</p>\n<ul>\n<li>时间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，计算树的深度需要遍历所有节点。</li>\n<li>空间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，最差情况下, 队列 queue 同时存储 N/2 个节点</li>\n</ul>\n",
      "date_published": "2024-07-08T00:00:00.000Z",
      "date_modified": "2024-07-08T16:48:00.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "111-二叉树的最小深度",
      "url": "https://doublew2w.cn/leetcode/111-minimum-depth-of-binary-tree.html",
      "id": "https://doublew2w.cn/leetcode/111-minimum-depth-of-binary-tree.html",
      "summary": "题目地址(111. 二叉树的最小深度 - 力扣（LeetCode）) https://leetcode.cn/problems/minimum-depth-of-binary-tree/description/ 题目描述 给定一个二叉树，找出其最小深度。 最小深度是从根节点到最近叶子节点的最短路径上的节点数量。 说明：叶子节点是指没有子节点的节点。 示...",
      "content_html": "<h2>题目地址(111. 二叉树的最小深度 - 力扣（LeetCode）)</h2>\n<p><a href=\"https://leetcode.cn/problems/minimum-depth-of-binary-tree/description/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/minimum-depth-of-binary-tree/description/</a></p>\n<h2>题目描述</h2>\n<p>给定一个二叉树，找出其最小深度。</p>\n<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>\n<p><strong>说明：</strong>叶子节点是指没有子节点的节点。</p>\n<p>&nbsp;</p>\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg\" style=\"width: 432px; height: 302px;\">\n<pre><strong>输入：</strong>root = [3,9,20,null,null,15,7]\n<strong>输出：</strong>2\n</pre>\n<p><strong>示例 2：</strong></p>\n<pre><strong>输入：</strong>root = [2,null,3,null,4,null,5,null,6]\n<strong>输出：</strong>5\n</pre>\n<p>&nbsp;</p>\n<p><strong>提示：</strong></p>\n<ul>\n\t<li>树中节点数的范围在 <code>[0, 10<sup>5</sup>]</code> 内</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n<h2>前置知识</h2>\n<ul>\n<li>二叉树</li>\n<li>DFS</li>\n<li>叶子节点</li>\n</ul>\n<h2>思路</h2>\n<p>叶子节点的定义是左孩子和右孩子都为 null 时叫做叶子节点</p>\n<ul>\n<li>\n<p>只有根节点时，深度为1</p>\n</li>\n<li>\n<p>当根节点左右孩子有一个为空时，返回<strong>不为空</strong>的孩子节点的深度</p>\n</li>\n<li>\n<p>当根节点左右孩子都不为空时，返回左右孩子<strong>较小深度</strong>的节点值</p>\n</li>\n</ul>\n<h2>关键点</h2>\n<ul>\n<li></li>\n</ul>\n<h2>代码</h2>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes github-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\"> minDepth</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">TreeNode</span><span style=\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\"> root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        // 如果树是空，那么最小深度就是0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(root </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        // 如果只有根节点,那么最小深度就是1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> ==</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> &amp;&amp;</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> ==</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        // 如果左子树为空，那么求右子树的最小深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        int</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> ans</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> Integer</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">MAX_VALUE</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> !=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">            ans </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> Math</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">min</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">minDepth</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">), ans);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> !=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">            ans </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> Math</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">min</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">minDepth</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">), ans);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> ans </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>复杂度分析</strong></p>\n<p>令 n 为二叉树节点个数。</p>\n<ul>\n<li>时间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>,每个节点都会遍历一次</li>\n<li>空间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>h</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(h)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">)</span></span></span></span>，其中 H 是树的高度。空间复杂度主要取决于递归时栈空间的开销，最坏情况下，树呈现链状，空间复杂度为 O(N)。</li>\n</ul>\n",
      "date_published": "2024-07-08T00:00:00.000Z",
      "date_modified": "2024-07-08T16:48:00.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "116-填充每个节点的下一个右侧节点指针",
      "url": "https://doublew2w.cn/leetcode/116-populating-next-right-pointers-in-each-node.html",
      "id": "https://doublew2w.cn/leetcode/116-populating-next-right-pointers-in-each-node.html",
      "summary": "题目地址(116. 填充每个节点的下一个右侧节点指针 - 力扣（LeetCode）) https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/description/ 题目描述 给定一个 完美二叉树 ，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义...",
      "content_html": "<h2>题目地址(116. 填充每个节点的下一个右侧节点指针 - 力扣（LeetCode）)</h2>\n<p><a href=\"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/description/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/description/</a></p>\n<h2>题目描述</h2>\n<p> 给定一个&nbsp; <strong> 完美二叉树&nbsp; </strong>，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：</p>\n<pre> struct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}</pre>\n<p> 填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 <code> NULL </code>。</p>\n<p> 初始状态下，所有&nbsp; next 指针都被设置为 <code> NULL </code>。</p>\n<p>&nbsp; </p>\n<p> <strong> 示例 1：</strong> </p>\n<p> <img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/14/116_sample.png\" style=\"height: 171px; width: 500px;\"> </p>\n<pre> <b> 输入：</b> root = [1,2,3,4,5,6,7]\n<b> 输出：</b> [1,#,2,3,#,4,5,6,7,#]\n<b> 解释：</b> 给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。序列化的输出按层序遍历排列，同一层节点由 next 指针连接，'#' 标志着每一层的结束。\n</pre>\n<p> <meta charset=\"UTF-8\"> </p>\n<p> <strong> 示例 2: </strong> </p>\n<pre> <b> 输入：</b> root = []\n<b> 输出：</b> []\n</pre>\n<p>&nbsp; </p>\n<p> <strong> 提示：</strong> </p>\n<ul>\n\t<li> 树中节点的数量在 <meta charset=\"UTF-8\">&nbsp; <code> [0, 2 <sup> 12 </sup>&nbsp;- 1] </code>&nbsp; 范围内 </li>\n\t<li> <code>-1000 &lt;= node.val &lt;= 1000 </code> </li>\n</ul>\n<p>&nbsp; </p>\n<p> <strong> 进阶：</strong> </p>\n<ul>\n\t<li> 你只能使用常量级额外空间。</li>\n\t<li> 使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。</li>\n</ul>\n<h2>前置知识</h2>\n<ul>\n<li>二叉树</li>\n<li>BFS</li>\n</ul>\n<h2>思路</h2>\n<p>next 指针只有两种类型：</p>\n<ol>\n<li>同一个父节点的两个子节点</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes github-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><ol start=\"2\">\n<li>不同父节点的子节点。将这一层的上一层串联好，就可以通过父节点的 next 找到邻居，完成处理。即第 N 层节点之间建立 next 指针后，再建立第 N+1 层节点的 next 指针。</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes github-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =&gt;</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><h2>关键点</h2>\n<ul>\n<li>\n<p>把每一层当成一个链表进行遍历。</p>\n</li>\n<li>\n<p><code>root.right.next =&gt; root.next.left</code></p>\n</li>\n</ul>\n<h2>代码</h2>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes github-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">// Definition for a Node.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">class Node {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    public int val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    public Node left;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    public Node right;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    public Node next;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    public Node() {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    public Node(int _val) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        val = _val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    public Node(int _val, Node _left, Node _right, Node _next) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        val = _val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        left = _left;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        right = _right;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        next = _next;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">};</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">*/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> Node</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\"> connect</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">Node</span><span style=\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\"> root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(root </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> root;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        // 从根节点开始</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">        Node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> pre</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> root;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        while</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">pre</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\">null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">            // 遍历这一层节点组织成的链表，为下一层的节点更新 next 指针</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">            Node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> temp</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> pre;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">            while</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(temp </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">                // 同一个父节点下的串联</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">                temp</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> temp</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">                // 如果上一层已经完成串联</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">temp</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\">null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">                    temp</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> temp</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">                //继续右边遍历</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">                temp </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> temp</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">            //从下一层的最左边开始遍历</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">            pre </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> pre</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> root;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>复杂度分析</strong></p>\n<p>令 n 为二叉树节点个数。</p>\n<ul>\n<li>时间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，每个节点只访问一次</li>\n<li>空间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，不需要存储额外的节点</li>\n</ul>\n",
      "date_published": "2024-07-08T00:00:00.000Z",
      "date_modified": "2024-07-08T16:48:00.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "117-填充每个节点的下一个右侧节点指针 II",
      "url": "https://doublew2w.cn/leetcode/117-populating-next-right-pointers-in-each-node-ii.html",
      "id": "https://doublew2w.cn/leetcode/117-populating-next-right-pointers-in-each-node-ii.html",
      "summary": "题目地址(117. 填充每个节点的下一个右侧节点指针 II - 力扣（LeetCode）) https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/ 题目描述 给定一个二叉树： 填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右...",
      "content_html": "<h2>题目地址(117. 填充每个节点的下一个右侧节点指针 II - 力扣（LeetCode）)</h2>\n<p><a href=\"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/</a></p>\n<h2>题目描述</h2>\n<p> 给定一个二叉树：</p>\n<pre> struct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}</pre>\n<p> 填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 <code> NULL </code> 。</p>\n<p> 初始状态下，所有&nbsp; next 指针都被设置为 <code> NULL </code> 。</p>\n<p>&nbsp; </p>\n<p> <strong> 示例 1：</strong> </p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/15/117_sample.png\" style=\"width: 500px; height: 171px;\">\n<pre> <strong> 输入 </strong>：root = [1,2,3,4,5, null,7]\n<strong> 输出：</strong> [1,#,2,3,#,4,5,7,#]\n<strong> 解释：</strong> 给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。序列化输出按层序遍历顺序（由 next 指针连接），'#' 表示每层的末尾。</pre>\n<p> <strong class=\"example\"> 示例 2：</strong> </p>\n<pre> <strong> 输入：</strong> root = []\n<strong> 输出：</strong> []\n</pre>\n<p>&nbsp; </p>\n<p> <strong> 提示：</strong> </p>\n<ul>\n\t<li> 树中的节点数在范围 <code> [0, 6000] </code> 内 </li>\n\t<li> <code>-100 &lt;= Node.val &lt;= 100 </code> </li>\n</ul>\n<p> <strong> 进阶：</strong> </p>\n<ul>\n\t<li> 你只能使用常量级额外空间。</li>\n\t<li> 使用递归解题也符合要求，本题中递归程序的隐式栈空间不计入额外空间复杂度。</li>\n</ul>\n<ul>\n</ul>\n## 前置知识\n<ul>\n<li>二叉树</li>\n<li>层序遍历</li>\n</ul>\n<h2>思路 1：出队串联</h2>\n<p>按照层序遍历的方式，创建一个队列存放每一层的节点，将每一层想象成一条链表。当遍历到一层时，从左到右出队将其串联起来。</p>\n<h3>关键点</h3>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes github-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">//出队</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">Node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> node </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> queue</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">poll</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">//如果 pre 为空就表示 node 节点是这一行的第一个，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">//没有前一个节点指向他，否则就让前一个节点指向他</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> (pre </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">    pre</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>代码</h3>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes github-light one-dark-pro vp-code\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">// Definition for a Node.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">class Node {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    public int val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    public Node left;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    public Node right;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    public Node next;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    public Node() {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    public Node(int _val) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        val = _val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    public Node(int _val, Node _left, Node _right, Node _next) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        val = _val;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        left = _left;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        right = _right;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        next = _next;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">};</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">*/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> Node</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\"> connect</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">Node</span><span style=\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\"> root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (root </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> root;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">        Deque</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\">Node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\">queue</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> ArrayDeque</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">        queue</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">addLast</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        while</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">queue</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">isEmpty</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">()) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">            int</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> levelSize</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> queue</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">size</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">            Node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> pre</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">            for</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">; i </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> levelSize; i</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#ABB2BF\">++</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">                // 出队</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">                Node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> node</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> queue</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">pollFirst</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">                // //如果 pre 为空就表示 node 节点是这一行的第一个，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (pre </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">                    pre</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> node;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">                // 然后再让当前节点成为前一个节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">                pre </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> node;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">                // 左右子节点如果不为空就入队</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> !=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">                    queue</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> !=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">                    queue</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> root;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>复杂度分析</strong></p>\n<p>令 n 为二叉树节点个数。</p>\n<ul>\n<li>时间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，每个节点最多出队和入队一次。</li>\n<li>空间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，队列存放节点所需要的空间不超过 n 个节点</li>\n</ul>\n<h2>思路 2：模拟链表串联</h2>\n<p>将队列去掉，引入一个「虚拟头节点」</p>\n<h3>代码</h3>\n<p>cur 是某一行的节点，dummy 和 pre 是下一行的头</p>\n<p>当对 cur 进行遍历时，使用 pre 去串联</p>\n<p>当 cur 遍历完，cur 更新为 dummy.next，也就是下一行的头，这样就完成向下一行的变化。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes github-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> Node</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\"> connect</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">Node</span><span style=\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\"> root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        // 将每一行看成一个链表进行处理</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(root </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> root;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        //cur 我们可以把它看做是每一层的链表</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">        Node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> cur</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> root;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        while</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(cur </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">            // 虚拟头节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">            Node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> dummy</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\"> Node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">            //pre 表示访下一层节点的前一个节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">            Node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> pre</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> dummy;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">             while</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (cur </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">cur</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> !=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">                    // 如果当前层的左子节点不为空，就下一层的虚拟头节点指向它</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">                    pre</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> cur</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">                    // 然后再更新下一层的指针</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">                    pre </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> pre</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">                //同理参照左子树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">cur</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> !=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">                    pre</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> cur</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">                    pre </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> pre</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">                //继续访问这一行的下一个节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">                cur </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> cur</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">             }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">            //把下一层串联成一个链表之后，让他赋值给 cur，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">            //后续继续循环，直到 cur 为空为止</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">            cur </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> dummy</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">next</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">         return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> root;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>复杂度分析</strong></p>\n<p>令 n 为二叉树节点个数。</p>\n<ul>\n<li>时间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，每个节点最多出队和入队一次。</li>\n<li>空间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，没有额外的空间</li>\n</ul>\n",
      "date_published": "2024-07-08T00:00:00.000Z",
      "date_modified": "2024-07-08T16:48:00.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "199-二叉树的右视图",
      "url": "https://doublew2w.cn/leetcode/199-binary-tree-right-side-view.html",
      "id": "https://doublew2w.cn/leetcode/199-binary-tree-right-side-view.html",
      "summary": "题目地址(199. 二叉树的右视图 - 力扣（LeetCode）) https://leetcode.cn/problems/binary-tree-right-side-view/description/ 题目描述 给定一个二叉树的 根节点 root ，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。 示例 1: 示例 2:...",
      "content_html": "<h2>题目地址(199. 二叉树的右视图 - 力扣（LeetCode）)</h2>\n<p><a href=\"https://leetcode.cn/problems/binary-tree-right-side-view/description/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/binary-tree-right-side-view/description/</a></p>\n<h2>题目描述</h2>\n<p> 给定一个二叉树的 <strong> 根节点 </strong> <code> root </code>，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p>\n<p>&nbsp; </p>\n<p> <strong> 示例 1: </strong> </p>\n<p> <img src=\"https://assets.leetcode.com/uploads/2021/02/14/tree.jpg\" style=\"width: 270px;\"> </p>\n<pre> <strong> 输入: </strong>&nbsp; [1,2,3, null,5, null,4]\n<strong> 输出: </strong>&nbsp; [1,3,4]\n</pre>\n<p> <strong> 示例 2: </strong> </p>\n<pre> <strong> 输入: </strong>&nbsp; [1, null,3]\n<strong> 输出: </strong>&nbsp; [1,3]\n</pre>\n<p> <strong> 示例 3: </strong> </p>\n<pre> <strong> 输入: </strong>&nbsp; []\n<strong> 输出: </strong>&nbsp; []\n</pre>\n<p>&nbsp; </p>\n<p> <strong> 提示: </strong> </p>\n<ul>\n\t<li> 二叉树的节点个数的范围是 <code> [0,100] </code> </li>\n\t<li> <meta charset=\"UTF-8\"> <code>-100&nbsp;&lt;= Node.val &lt;= 100 </code>&nbsp; </li>\n</ul>\n<h2>前置知识</h2>\n<ul>\n<li>二叉树</li>\n<li>层序遍历</li>\n<li>深度遍历</li>\n</ul>\n<h2>思路1：层序遍历</h2>\n<p>使用一个队列存储每一层的节点，在遍历每一层节点时，直到最后一个节点才进行处理。</p>\n<h3>关键点</h3>\n<ul>\n<li>每一层从左到右遍历时，直到最后一个节点才进行处理</li>\n</ul>\n<h3>代码</h3>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes github-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\"> rightSideView</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">TreeNode</span><span style=\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\"> root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">        // 层序遍历，从右到左</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">        List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\">res</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> ArrayList</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (root </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">        Deque</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\">TreeNode</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\">queue</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> ArrayDeque</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">        queue</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">offer</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        while</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">queue</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">isEmpty</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">()) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">            int</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> levelSize</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> queue</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">size</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">            for</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">; i </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> levelSize; i</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#ABB2BF\">++</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">                TreeNode</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> node</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> queue</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">poll</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> !=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">                    queue</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">offer</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> !=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">                    queue</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">offer</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">                // 单层的最后一个元素就是最右元素</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (i </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> levelSize </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">                    res</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">val</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>复杂度分析</strong></p>\n<p>令 n 为二叉树节点个数。</p>\n<ul>\n<li>时间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，每个节点最多进队列一次，出队列一次。</li>\n<li>空间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，每个节点最多进队列一次，所以队列长度最大不不超过 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>，所以这里的空间代价为 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<h2>思路2：层序遍历——递归方式</h2>\n<p>先递归右子树，保证首次遇到的一定是最右边的节点。</p>\n<p>在递归左子树。</p>\n<h3>代码</h3>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes github-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\"> rightSideView</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">TreeNode</span><span style=\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\"> root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">        List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\">ans</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> ArrayList</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">        dfs</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(root, </span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">, ans);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> ans;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\"> dfs</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">TreeNode</span><span style=\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\"> root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\"> depth</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">ans</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (root </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (depth </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> ans</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">size</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">()) { </span><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">// 这个深度首次遇到</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">            ans</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">val</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">        dfs</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">right</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">, depth </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">, ans); </span><span style=\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\">// 先递归右子树，保证首次遇到的一定是最右边的节点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">        dfs</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">left</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">, depth </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">, ans);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>复杂度分析</strong></p>\n<p>令 n 为二叉树节点个数。</p>\n<ul>\n<li>时间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，每个节点最多进队列一次，出队列一次。</li>\n<li>空间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>h</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(h)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">)</span></span></span></span>，其中 h 是二叉树的高度。递归需要 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>h</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(h)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">)</span></span></span></span> 的栈空间。最坏情况下，二叉树退化成一条链，递归需要 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的栈空间。</li>\n</ul>\n",
      "date_published": "2024-07-08T00:00:00.000Z",
      "date_modified": "2024-07-08T16:48:00.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "429-N 叉树的层序遍历",
      "url": "https://doublew2w.cn/leetcode/429-n-ary-tree-level-order-traversal.html",
      "id": "https://doublew2w.cn/leetcode/429-n-ary-tree-level-order-traversal.html",
      "summary": "题目地址(429. N 叉树的层序遍历 - 力扣（LeetCode）) https://leetcode.cn/problems/n-ary-tree-level-order-traversal/description/ 题目描述 给定一个 N 叉树，返回其节点值的 层序遍历 。（即从左到右，逐层遍历）。 树的序列化输入是用层序遍历，每组子节点都由 n...",
      "content_html": "<h2>题目地址(429. N 叉树的层序遍历 - 力扣（LeetCode）)</h2>\n<p><a href=\"https://leetcode.cn/problems/n-ary-tree-level-order-traversal/description/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/n-ary-tree-level-order-traversal/description/</a></p>\n<h2>题目描述</h2>\n<p> 给定一个 N 叉树，返回其节点值的 <em> 层序遍历 </em>。（即从左到右，逐层遍历）。</p>\n<p> 树的序列化输入是用层序遍历，每组子节点都由 null 值分隔（参见示例）。</p>\n<p>&nbsp; </p>\n<p> <strong class=\"example\"> 示例 1：</strong> </p>\n<p> <img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"> </p>\n<pre> <strong> 输入：</strong> root = [1, null,3,2,4, null,5,6]\n<strong> 输出：</strong> [[1], [3,2,4], [5,6]]\n</pre>\n<p> <strong class=\"example\"> 示例 2：</strong> </p>\n<p> <img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\"> </p>\n<pre> <strong> 输入：</strong> root = [1, null,2,3,4,5, null, null,6,7, null,8, null,9,10, null, null,11, null,12, null,13, null, null,14]\n<strong> 输出：</strong> [[1], [2,3,4,5], [6,7,8,9,10], [11,12,13], [14]]\n</pre>\n<p>&nbsp; </p>\n<p> <strong> 提示：</strong> </p>\n<ul>\n\t<li> 树的高度不会超过&nbsp; <code> 1000 </code> </li>\n\t<li> 树的节点总数在 <code> [0,&nbsp; 10 <sup> 4 </sup>] </code> 之间 </li>\n</ul>\n<h2>前置知识</h2>\n<ul>\n<li>树</li>\n<li>BFS: 广度优先搜索</li>\n<li>DFS: 深度优先搜索</li>\n</ul>\n<h2>思路 1：BFS</h2>\n<p>将二叉树的层序遍历扩展到 N 叉树，本质上是不变的。</p>\n<p>在二叉树的时候，我们是单独处理 <code>root.left</code> 和 <code>root.right</code>。而对于 N 叉树，我们应该使用一个循环进行处理。</p>\n<h3>关键点</h3>\n<p>以「层」为单位构建答案，因此在单次 BFS 过程中也按「层」进行。</p>\n<h3>代码 1：</h3>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes github-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&gt;&gt;</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\"> levelOrder</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">Node</span><span style=\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\"> root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">        List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&gt;&gt; </span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\">ans</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> ArrayList</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">        Deque</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\">Node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\">d</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> ArrayDeque</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (root </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">!=</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">d</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">addLast</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        while</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">d</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">isEmpty</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">()) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">            int</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> size</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> d</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">size</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">            List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\">list</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> ArrayList</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">            while</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (size</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#ABB2BF\">--</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> &gt;</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">                Node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> t</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> d</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">pollFirst</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">                for</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">Node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> node</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> t</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">children</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">d</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">addLast</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(node);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">                list</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">t</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">val</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">            ans</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(list);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> ans;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>复杂度分析</strong></p>\n<p>令 n 为树的节点个数。</p>\n<ul>\n<li>时间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，每个节点最多出队一次，入队一次。</li>\n<li>空间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，队列所需要用到的空间是 <span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，最坏情况下，树只有两层，根节点和 n-1 个节点组成的第二层。</li>\n</ul>\n<h2>思路 2：DFS</h2>\n<p>在深度优先搜索过程中，同层的节点不会连续被处理，但在处理的时候依然遵循「从左到右」。</p>\n<p>因此对于某个节点来说，会获取对应该层的答案，然后处理该节点。</p>\n<h3>代码</h3>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes github-light one-dark-pro vp-code\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\"> Solution</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">    List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&gt;&gt;</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> ans </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> ArrayList</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;&gt;</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\">()</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&gt;&gt;</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\"> levelOrder</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">Node</span><span style=\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\"> root</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (root </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> ans;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">        dfs</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(root, </span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> ans;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\"> dfs</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">Node</span><span style=\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\"> u</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\"> depth</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">ans</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">size</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> depth) </span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">ans</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">new</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> ArrayList</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;&gt;());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">        List</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">&gt; </span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\">list</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> ans</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">get</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(depth);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">        list</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">u</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">val</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">Node</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E06C75\"> node</span><span style=\"--shiki-light:#D73A49;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\"> u</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#24292E;--shiki-dark:#E5C07B\">children</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\">dfs</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">(node, depth </span><span style=\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#005CC5;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>复杂度分析</strong></p>\n<p>令 n 为树的节点个数。</p>\n<ul>\n<li>时间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，每个节点最多出队一次，入队一次。</li>\n<li>空间复杂度：<span v-pre=\"\" class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>h</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(h)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">)</span></span></span></span>，h为树的高度，最坏情况，树退化成链表，此时树的高度与节点个数一样。</li>\n</ul>\n",
      "date_published": "2024-07-08T00:00:00.000Z",
      "date_modified": "2024-07-08T16:48:00.000Z",
      "authors": [],
      "tags": []
    }
  ]
}