const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":452,\"nextId\":452,\"documentIds\":{\"0\":\"2\",\"1\":\"2#介绍\",\"2\":\"3\",\"3\":\"3#关于我\",\"4\":\"4\",\"5\":\"5\",\"6\":\"5#你到底有没有认真学\",\"7\":\"5#你的成熟方案呢\",\"8\":\"5#你不够擅长-还是你走偏了\",\"9\":\"5#总结\",\"10\":\"5@0\",\"11\":\"6\",\"12\":\"6#题目地址-1-两数之和-力扣-leetcode\",\"13\":\"6#题目描述\",\"14\":\"6#前置知识\",\"15\":\"6#思路\",\"16\":\"6#关键点\",\"17\":\"6#代码\",\"18\":\"6@0\",\"19\":\"6@1\",\"20\":\"7\",\"21\":\"7#题目地址-101-对称二叉树-力扣-leetcode\",\"22\":\"7#题目描述\",\"23\":\"7#思路-1-递归\",\"24\":\"7#关键点\",\"25\":\"7#代码\",\"26\":\"7#思路-2-迭代\",\"27\":\"7#代码-1\",\"28\":\"7@0\",\"29\":\"7@1\",\"30\":\"8\",\"31\":\"8#题目地址-104-二叉树的最大深度-力扣-leetcode\",\"32\":\"8#题目描述\",\"33\":\"8#前置知识\",\"34\":\"8#思路-1-dfs\",\"35\":\"8#关键点\",\"36\":\"8#代码\",\"37\":\"8#思路-2-bfs\",\"38\":\"8#代码-1\",\"39\":\"8@0\",\"40\":\"8@1\",\"41\":\"9\",\"42\":\"9#题目地址-1047-删除字符串中的所有相邻重复项-力扣-leetcode\",\"43\":\"9#题目描述\",\"44\":\"9#前置知识\",\"45\":\"9#思路-1-双端队列\",\"46\":\"9#关键点\",\"47\":\"9#代码\",\"48\":\"9#思路-2-数组\",\"49\":\"9#关键点-1\",\"50\":\"9#代码-1\",\"51\":\"9@0\",\"52\":\"9@1\",\"53\":\"10\",\"54\":\"10#题目地址-111-二叉树的最小深度-力扣-leetcode\",\"55\":\"10#题目描述\",\"56\":\"10#前置知识\",\"57\":\"10#思路\",\"58\":\"10#关键点\",\"59\":\"10#代码\",\"60\":\"10@0\",\"61\":\"10@1\",\"62\":\"11\",\"63\":\"11#题目地址-116-填充每个节点的下一个右侧节点指针-力扣-leetcode\",\"64\":\"11#题目描述\",\"65\":\"11#前置知识\",\"66\":\"11#思路\",\"67\":\"11#关键点\",\"68\":\"11#代码\",\"69\":\"11@0\",\"70\":\"11@1\",\"71\":\"12\",\"72\":\"12#题目地址-117-填充每个节点的下一个右侧节点指针-ii-力扣-leetcode\",\"73\":\"12#题目描述\",\"74\":\"12#思路-1-出队串联\",\"75\":\"12#关键点\",\"76\":\"12#代码\",\"77\":\"12#思路-2-模拟链表串联\",\"78\":\"12#代码-1\",\"79\":\"12@0\",\"80\":\"12@1\",\"81\":\"13\",\"82\":\"13#题目地址-142-环形链表-ii-力扣-leetcode\",\"83\":\"13#题目描述\",\"84\":\"13#前置知识\",\"85\":\"13#思路\",\"86\":\"13#关键点\",\"87\":\"13#代码\",\"88\":\"13@0\",\"89\":\"13@1\",\"90\":\"14\",\"91\":\"14#题目地址-15-三数之和-力扣-leetcode\",\"92\":\"14#题目描述\",\"93\":\"14#前置知识\",\"94\":\"14#思路-排序-双指针\",\"95\":\"14#关键点\",\"96\":\"14#代码\",\"97\":\"14@0\",\"98\":\"14@1\",\"99\":\"15\",\"100\":\"15#题目地址-151-反转字符串中的单词-力扣-leetcode\",\"101\":\"15#题目描述\",\"102\":\"15#前置知识\",\"103\":\"15#思路-1-字符串-api\",\"104\":\"15#代码\",\"105\":\"15#思路-2-倒序遍历-双指针\",\"106\":\"15#代码-1\",\"107\":\"15#思路3-手写字符串api\",\"108\":\"15#代码-2\",\"109\":\"15@0\",\"110\":\"15@1\",\"111\":\"16\",\"112\":\"16#题目地址-18-四数之和-力扣-leetcode\",\"113\":\"16#题目描述\",\"114\":\"16#前置知识\",\"115\":\"16#思路\",\"116\":\"16#关键点\",\"117\":\"16#代码\",\"118\":\"16@0\",\"119\":\"16@1\",\"120\":\"17\",\"121\":\"17#题目地址-19-删除链表的倒数第-n-个结点-力扣-leetcode\",\"122\":\"17#题目描述\",\"123\":\"17#前置知识\",\"124\":\"17#思路-1-双指针\",\"125\":\"17#关键点\",\"126\":\"17#代码\",\"127\":\"17@0\",\"128\":\"17@1\",\"129\":\"18\",\"130\":\"18#题目地址-199-二叉树的右视图-力扣-leetcode\",\"131\":\"18#题目描述\",\"132\":\"18#前置知识\",\"133\":\"18#思路1-层序遍历\",\"134\":\"18#关键点\",\"135\":\"18#代码\",\"136\":\"18#思路2-层序遍历——递归方式\",\"137\":\"18#代码-1\",\"138\":\"18@0\",\"139\":\"18@1\",\"140\":\"19\",\"141\":\"19#题目地址-20-有效的括号-力扣-leetcode\",\"142\":\"19#题目描述\",\"143\":\"19#前置知识\",\"144\":\"19#思路\",\"145\":\"19#关键点\",\"146\":\"19#代码\",\"147\":\"19@0\",\"148\":\"19@1\",\"149\":\"20\",\"150\":\"20#题目地址-202-快乐数-力扣-leetcode\",\"151\":\"20#题目描述\",\"152\":\"20#前置知识\",\"153\":\"20#思路\",\"154\":\"20#关键点\",\"155\":\"20#代码\",\"156\":\"20@0\",\"157\":\"20@1\",\"158\":\"21\",\"159\":\"21#题目地址-203-移除链表元素-力扣-leetcode\",\"160\":\"21#题目描述\",\"161\":\"21#思路1-直接删除\",\"162\":\"21#关键点\",\"163\":\"21#代码\",\"164\":\"21#思路2-虚拟头节点\",\"165\":\"21#关键点-1\",\"166\":\"21#代码-1\",\"167\":\"21@0\",\"168\":\"21@1\",\"169\":\"22\",\"170\":\"22#题目地址-206-反转链表-力扣-leetcode\",\"171\":\"22#题目描述\",\"172\":\"22#前置知识\",\"173\":\"22#思路1-双指针\",\"174\":\"22#关键点\",\"175\":\"22#代码\",\"176\":\"22#思路2-递归\",\"177\":\"22#关键点-1\",\"178\":\"22#代码-1\",\"179\":\"22@0\",\"180\":\"22@1\",\"181\":\"23\",\"182\":\"23#题目地址-209-长度最小的子数组-力扣-leetcode\",\"183\":\"23#题目描述\",\"184\":\"23#前置知识\",\"185\":\"23#思路1-滑动窗口\",\"186\":\"23#关键点\",\"187\":\"23#代码\",\"188\":\"23@0\",\"189\":\"24\",\"190\":\"24#题目地址-225-用队列实现栈-力扣-leetcode\",\"191\":\"24#题目描述\",\"192\":\"24#前置知识\",\"193\":\"24#思路\",\"194\":\"24#代码\",\"195\":\"24@0\",\"196\":\"24@1\",\"197\":\"25\",\"198\":\"25#题目地址-226-翻转二叉树-力扣-leetcode\",\"199\":\"25#题目描述\",\"200\":\"25#关键点\",\"201\":\"25#代码\",\"202\":\"25#思路-2-层序遍历\",\"203\":\"25#代码-1\",\"204\":\"25@0\",\"205\":\"25@1\",\"206\":\"26\",\"207\":\"26#题目地址-232-用栈实现队列-力扣-leetcode\",\"208\":\"26#题目描述\",\"209\":\"26#前置知识\",\"210\":\"26#思路\",\"211\":\"26#代码\",\"212\":\"26@0\",\"213\":\"26@1\",\"214\":\"27\",\"215\":\"27#题目地址-24-两两交换链表中的节点-力扣-leetcode\",\"216\":\"27#题目描述\",\"217\":\"27#前置知识\",\"218\":\"27#思路1-虚拟头节点\",\"219\":\"27#关键点\",\"220\":\"27#代码\",\"221\":\"27@0\",\"222\":\"28\",\"223\":\"28#题目地址-242-有效的字母异位词-力扣-leetcode\",\"224\":\"28#题目描述\",\"225\":\"28#前置知识\",\"226\":\"28#思路-哈希表记录\",\"227\":\"28#关键点\",\"228\":\"28#代码\",\"229\":\"28@0\",\"230\":\"28@1\",\"231\":\"29\",\"232\":\"29#题目地址-27-移除元素-力扣-leetcode\",\"233\":\"29#题目描述\",\"234\":\"29#前置知识\",\"235\":\"29#思路-1\",\"236\":\"29#关键点\",\"237\":\"29#代码\",\"238\":\"29@0\",\"239\":\"29@1\",\"240\":\"30\",\"241\":\"30#题目地址-344-反转字符串-力扣-leetcode\",\"242\":\"30#题目描述\",\"243\":\"30#前置知识\",\"244\":\"30#思路\",\"245\":\"30#关键点\",\"246\":\"30#代码\",\"247\":\"30@0\",\"248\":\"30@1\",\"249\":\"31\",\"250\":\"31#题目地址-349-两个数组的交集-力扣-leetcode\",\"251\":\"31#题目描述\",\"252\":\"31#前置知识\",\"253\":\"31#公司\",\"254\":\"31#思路\",\"255\":\"31#关键点\",\"256\":\"31#代码\",\"257\":\"31@0\",\"258\":\"31@1\",\"259\":\"32\",\"260\":\"32#题目地址-383-赎金信-力扣-leetcode\",\"261\":\"32#题目描述\",\"262\":\"32#前置知识\",\"263\":\"32#思路\",\"264\":\"32#关键点\",\"265\":\"32#代码\",\"266\":\"32@0\",\"267\":\"32@1\",\"268\":\"33\",\"269\":\"33#题目地址-429-n-叉树的层序遍历-力扣-leetcode\",\"270\":\"33#题目描述\",\"271\":\"33#前置知识\",\"272\":\"33#思路-1-bfs\",\"273\":\"33#关键点\",\"274\":\"33#代码-1\",\"275\":\"33#思路-2-dfs\",\"276\":\"33#代码\",\"277\":\"33@0\",\"278\":\"33@1\",\"279\":\"34\",\"280\":\"34#题目地址-454-四数相加-ii-力扣-leetcode\",\"281\":\"34#题目描述\",\"282\":\"34#前置知识\",\"283\":\"34#思路\",\"284\":\"34#代码\",\"285\":\"34@0\",\"286\":\"34@1\",\"287\":\"35\",\"288\":\"35#题目地址-515-在每个树行中找最大值-力扣-leetcode\",\"289\":\"35#题目描述\",\"290\":\"35#前置知识\",\"291\":\"35#思路-1-dfs\",\"292\":\"35#关键点\",\"293\":\"35#代码\",\"294\":\"35#思路-2-bfs\",\"295\":\"35#代码-1\",\"296\":\"35@0\",\"297\":\"35@1\",\"298\":\"36\",\"299\":\"36#题目地址-541-反转字符串-ii-力扣-leetcode\",\"300\":\"36#题目描述\",\"301\":\"36#前置知识\",\"302\":\"36#思路\",\"303\":\"36#关键点\",\"304\":\"36#代码\",\"305\":\"36@0\",\"306\":\"36@1\",\"307\":\"37\",\"308\":\"37#题目地址-59-螺旋矩阵-ii-力扣-leetcode\",\"309\":\"37#题目描述\",\"310\":\"37#前置知识\",\"311\":\"37#思路\",\"312\":\"37#关键点\",\"313\":\"37#代码\",\"314\":\"37@0\",\"315\":\"38\",\"316\":\"38#题目地址-704-二分查找-力扣-leetcode\",\"317\":\"38#题目描述\",\"318\":\"38#前置知识\",\"319\":\"38#思路\",\"320\":\"38#关键点\",\"321\":\"38#代码\",\"322\":\"38#思路改进\",\"323\":\"38#左闭右必区间\",\"324\":\"38@0\",\"325\":\"38@1\",\"326\":\"39\",\"327\":\"39#题目地址-707-设计链表-力扣-leetcode\",\"328\":\"39#题目描述\",\"329\":\"39#前置知识\",\"330\":\"39#思路-单链表实现\",\"331\":\"39#关键点\",\"332\":\"39#代码\",\"333\":\"39#思路-双链表实现\",\"334\":\"39#关键点-1\",\"335\":\"39#代码-1\",\"336\":\"39@0\",\"337\":\"39@1\",\"338\":\"40\",\"339\":\"40#题目地址-977-有序数组的平方-力扣-leetcode\",\"340\":\"40#题目描述\",\"341\":\"40#前置知识\",\"342\":\"40#思路\",\"343\":\"40#关键点\",\"344\":\"40#代码\",\"345\":\"40@0\",\"346\":\"40@1\",\"347\":\"41\",\"348\":\"41#我们的目标是刷穿leetcode\",\"349\":\"42\",\"350\":\"42#哈希表是什么\",\"351\":\"42#哈希函数\",\"352\":\"42#哈希冲突\",\"353\":\"42#拉链法\",\"354\":\"42#线性探测法\",\"355\":\"42@0\",\"356\":\"42@1\",\"357\":\"43\",\"358\":\"43#是什么\",\"359\":\"43#解决什么问题\",\"360\":\"43#如何理解以及模板\",\"361\":\"43@0\",\"362\":\"43@1\",\"363\":\"44\",\"364\":\"44#什么是数组\",\"365\":\"44#数组的特点\",\"366\":\"44#二分法\",\"367\":\"44#二分查找模板-1\",\"368\":\"44#二分查找模版-2-找满足条件的最左侧的值\",\"369\":\"44#二分查找模版-3-找满足条件的最右侧的值\",\"370\":\"44#双指针法\",\"371\":\"44#滑动窗口\",\"372\":\"44#模拟行为\",\"373\":\"44@0\",\"374\":\"45\",\"375\":\"45#理论\",\"376\":\"45#arraydeque\",\"377\":\"45#问题\",\"378\":\"45@0\",\"379\":\"45@1\",\"380\":\"46\",\"381\":\"46#概念\",\"382\":\"46#类型\",\"383\":\"46#满二叉树\",\"384\":\"46#完全二叉树\",\"385\":\"46#平衡二叉树\",\"386\":\"46#二叉搜索树\",\"387\":\"46#遍历\",\"388\":\"46#层序遍历\",\"389\":\"46#bfs遍历\",\"390\":\"46#bfs遍历的副产物-层序遍历-迭代写法\",\"391\":\"46#bfs遍历的副产物-层序遍历-递归写法\",\"392\":\"46#前、中、后序遍历\",\"393\":\"46#前序遍历\",\"394\":\"46#中序遍历\",\"395\":\"46#后序遍历\",\"396\":\"46#迭代遍历\",\"397\":\"46#前序遍历-1\",\"398\":\"46#中序遍历-1\",\"399\":\"46#后序遍历-1\",\"400\":\"46#迭代遍历统一法\",\"401\":\"46#前序遍历-2\",\"402\":\"46#表示\",\"403\":\"46#完美二叉树\",\"404\":\"46#任意二叉树\",\"405\":\"46#avl树\",\"406\":\"46#递归三要素\",\"407\":\"46#递归可视化\",\"408\":\"46#题目\",\"409\":\"46@0\",\"410\":\"46@1\",\"411\":\"47\",\"412\":\"47#虚拟头节点\",\"413\":\"47#快慢指针\",\"414\":\"47#删除倒数第-n-个节点\",\"415\":\"47#链表的基本操作\",\"416\":\"47#链表相交\",\"417\":\"47#环形链表\",\"418\":\"47@0\",\"419\":\"47@1\",\"420\":\"48\",\"421\":\"48#链表是什么\",\"422\":\"48#链表类型\",\"423\":\"48#单链表\",\"424\":\"48#双链表\",\"425\":\"48#循环链表\",\"426\":\"48#链表存储方式\",\"427\":\"48#链表操作\",\"428\":\"48#头插节点\",\"429\":\"48#尾插节点\",\"430\":\"48#拆链操作\",\"431\":\"48#删除节点\",\"432\":\"48#链表性能分析\",\"433\":\"48#问题\",\"434\":\"48@0\",\"435\":\"48@1\",\"436\":\"49\",\"437\":\"49#理论\",\"438\":\"49#题目\",\"439\":\"49@0\",\"440\":\"49@1\",\"441\":\"50\",\"442\":\"50#题目地址-面试题-02-07-链表相交-力扣-leetcode\",\"443\":\"50#题目描述\",\"444\":\"50#前置知识\",\"445\":\"50#思路\",\"446\":\"50#关键点\",\"447\":\"50#代码\",\"448\":\"50@0\",\"449\":\"50@1\",\"450\":\"51\",\"451\":\"52\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,6],\"2\":[1],\"3\":[1],\"4\":[1,88],\"5\":[2],\"6\":[2,52],\"7\":[2,45],\"8\":[3,37],\"9\":[1,20],\"10\":[null,null,1],\"11\":[2],\"12\":[6,7],\"13\":[1,45],\"14\":[1,1],\"15\":[1,21],\"16\":[1,7],\"17\":[1,37],\"18\":[null,null,1],\"19\":[null,null,1],\"20\":[2],\"21\":[6,8],\"22\":[1,25],\"23\":[3,18],\"24\":[1,13],\"25\":[1,43],\"26\":[3,13],\"27\":[1,46],\"28\":[null,null,1],\"29\":[null,null,1],\"30\":[2],\"31\":[6,11],\"32\":[1,29],\"33\":[1,4],\"34\":[3,23],\"35\":[1,8],\"36\":[1,38],\"37\":[3,11],\"38\":[1,41],\"39\":[null,null,1],\"40\":[null,null,1],\"41\":[2],\"42\":[6,12],\"43\":[1,35],\"44\":[1,3],\"45\":[3,13],\"46\":[1,1],\"47\":[1,47],\"48\":[3,16],\"49\":[1],\"50\":[1,45],\"51\":[null,null,1],\"52\":[null,null,1],\"53\":[2],\"54\":[6,11],\"55\":[1,30],\"56\":[1,3],\"57\":[1,9],\"58\":[1],\"59\":[1,47],\"60\":[null,null,1],\"61\":[null,null,2],\"62\":[2],\"63\":[6,13],\"64\":[1,59],\"65\":[1,2],\"66\":[1,22],\"67\":[1,6],\"68\":[1,42],\"69\":[null,null,1],\"70\":[null,null,1],\"71\":[3],\"72\":[7,13],\"73\":[1,57],\"74\":[3,6],\"75\":[1,16],\"76\":[1,53],\"77\":[3,4],\"78\":[1,55],\"79\":[null,null,1],\"80\":[null,null,2],\"81\":[3],\"82\":[7,10],\"83\":[1,57],\"84\":[1,2],\"85\":[1,49],\"86\":[1,3],\"87\":[1,52],\"88\":[null,null,1],\"89\":[null,null,1],\"90\":[2],\"91\":[6,7],\"92\":[1,38],\"93\":[1,1],\"94\":[2,58],\"95\":[1,7],\"96\":[1,82],\"97\":[null,null,1],\"98\":[null,null,2],\"99\":[2],\"100\":[6,11],\"101\":[1,55],\"102\":[1,2],\"103\":[4,5],\"104\":[1,36],\"105\":[3,10],\"106\":[1,47],\"107\":[2,6],\"108\":[1,64],\"109\":[null,null,1],\"110\":[null,null,1],\"111\":[2],\"112\":[6,7],\"113\":[1,35],\"114\":[1,2],\"115\":[1,13],\"116\":[1,4],\"117\":[1,68],\"118\":[null,null,1],\"119\":[null,null,2],\"120\":[2],\"121\":[8,13],\"122\":[1,27],\"123\":[1,2],\"124\":[3,17],\"125\":[1,5],\"126\":[1,51],\"127\":[null,null,1],\"128\":[null,null,1],\"129\":[2],\"130\":[6,11],\"131\":[1,23],\"132\":[1,3],\"133\":[2,4],\"134\":[1,2],\"135\":[1,51],\"136\":[3,4],\"137\":[1,48],\"138\":[null,null,1],\"139\":[null,null,3],\"140\":[2],\"141\":[6,8],\"142\":[1,23],\"143\":[1,2],\"144\":[1,13],\"145\":[1,2],\"146\":[1,44],\"147\":[null,null,1],\"148\":[null,null,2],\"149\":[2],\"150\":[6,7],\"151\":[1,41],\"152\":[1,1],\"153\":[1,25],\"154\":[1,4],\"155\":[1,75],\"156\":[null,null,1],\"157\":[null,null,1],\"158\":[2],\"159\":[6,10],\"160\":[1,32],\"161\":[2,6],\"162\":[1,4],\"163\":[1,39],\"164\":[2],\"165\":[1,6],\"166\":[1,40],\"167\":[null,null,1],\"168\":[null,null,1],\"169\":[2],\"170\":[6,8],\"171\":[1,24],\"172\":[1,3],\"173\":[2,8],\"174\":[1,8],\"175\":[1,40],\"176\":[2,6],\"177\":[1,3],\"178\":[1,25],\"179\":[null,null,1],\"180\":[null,null,1],\"181\":[2],\"182\":[6,9],\"183\":[1,39],\"184\":[1,3],\"185\":[2,15],\"186\":[1,5],\"187\":[1,50],\"188\":[null,null,1],\"189\":[2],\"190\":[6,10],\"191\":[1,67],\"192\":[1,2],\"193\":[1,6],\"194\":[1,51],\"195\":[null,null,1],\"196\":[null,null,2],\"197\":[2],\"198\":[6,9],\"199\":[1,45],\"200\":[1,7],\"201\":[1,51],\"202\":[3,16],\"203\":[1,51],\"204\":[null,null,1],\"205\":[null,null,1],\"206\":[2],\"207\":[6,10],\"208\":[1,78],\"209\":[1,1],\"210\":[1,14],\"211\":[1,58],\"212\":[null,null,1],\"213\":[null,null,1],\"214\":[2],\"215\":[6,10],\"216\":[1,23],\"217\":[1,1],\"218\":[2,19],\"219\":[1,2],\"220\":[1,46],\"221\":[null,null,1],\"222\":[2],\"223\":[6,8],\"224\":[1,37],\"225\":[1,1],\"226\":[2,16],\"227\":[1,2],\"228\":[1,44],\"229\":[null,null,1],\"230\":[null,null,1],\"231\":[2],\"232\":[6,7],\"233\":[1,76],\"234\":[1,1],\"235\":[2,25],\"236\":[1,1],\"237\":[1,27],\"238\":[null,null,1],\"239\":[null,null,1],\"240\":[2],\"241\":[6,7],\"242\":[1,35],\"243\":[1,2],\"244\":[1,14],\"245\":[1,6],\"246\":[1,34],\"247\":[null,null,1],\"248\":[null,null,1],\"249\":[2],\"250\":[6,9],\"251\":[1,30],\"252\":[1],\"253\":[1,1],\"254\":[1],\"255\":[1],\"256\":[1,48],\"257\":[null,null,1],\"258\":[null,null,2],\"259\":[2],\"260\":[6,8],\"261\":[1,33],\"262\":[1,1],\"263\":[1,21],\"264\":[1,7],\"265\":[1,44],\"266\":[null,null,1],\"267\":[null,null,1],\"268\":[3],\"269\":[7,12],\"270\":[1,38],\"271\":[1,5],\"272\":[3,13],\"273\":[1,8],\"274\":[3,49],\"275\":[3,8],\"276\":[1,47],\"277\":[null,null,1],\"278\":[null,null,3],\"279\":[3],\"280\":[7,8],\"281\":[1,33],\"282\":[1,1],\"283\":[1,21],\"284\":[1,47],\"285\":[null,null,1],\"286\":[null,null,2],\"287\":[2],\"288\":[6,13],\"289\":[1,23],\"290\":[1,3],\"291\":[3,9],\"292\":[1,2],\"293\":[1,50],\"294\":[3,9],\"295\":[1,52],\"296\":[null,null,1],\"297\":[null,null,3],\"298\":[3],\"299\":[7,9],\"300\":[1,34],\"301\":[1,2],\"302\":[1,20],\"303\":[1,10],\"304\":[1,56],\"305\":[null,null,1],\"306\":[null,null,2],\"307\":[3],\"308\":[7,8],\"309\":[1,26],\"310\":[1,2],\"311\":[1,32],\"312\":[1,2],\"313\":[1,67],\"314\":[null,null,1],\"315\":[2],\"316\":[6,7],\"317\":[1,38],\"318\":[1,1],\"319\":[1,45],\"320\":[1,2],\"321\":[1,34],\"322\":[1,35],\"323\":[1,23],\"324\":[null,null,1],\"325\":[null,null,2],\"326\":[2],\"327\":[6,9],\"328\":[1,75],\"329\":[1,2],\"330\":[2,7],\"331\":[1,4],\"332\":[1,73],\"333\":[2,14],\"334\":[1,17],\"335\":[1,55],\"336\":[null,null,1],\"337\":[null,null,1],\"338\":[2],\"339\":[6,11],\"340\":[1,42],\"341\":[1,1],\"342\":[1,7],\"343\":[1,6],\"344\":[1,50],\"345\":[null,null,1],\"346\":[null,null,2],\"347\":[1],\"348\":[1],\"349\":[1],\"350\":[1,17],\"351\":[1,16],\"352\":[1,6],\"353\":[1,2],\"354\":[1,4],\"355\":[null,null,1],\"356\":[null,null,1],\"357\":[1],\"358\":[1,12],\"359\":[1,19],\"360\":[1,26],\"361\":[null,null,1],\"362\":[null,null,1],\"363\":[1],\"364\":[2,6],\"365\":[1,10],\"366\":[1],\"367\":[2,61],\"368\":[3,72],\"369\":[3,42],\"370\":[1,7],\"371\":[1,12],\"372\":[1,6],\"373\":[null,null,1],\"374\":[1],\"375\":[1,25],\"376\":[1,9],\"377\":[1,9],\"378\":[null,null,1],\"379\":[null,null,1],\"380\":[1],\"381\":[1,67],\"382\":[1],\"383\":[1,18],\"384\":[1,11],\"385\":[1,11],\"386\":[1,17],\"387\":[1,19],\"388\":[1,16],\"389\":[1,33],\"390\":[3,78],\"391\":[3,43],\"392\":[3,18],\"393\":[1,29],\"394\":[1,26],\"395\":[1,45],\"396\":[1,14],\"397\":[1,45],\"398\":[1,30],\"399\":[1,37],\"400\":[1,14],\"401\":[1,48],\"402\":[1],\"403\":[1,12],\"404\":[1,17],\"405\":[1,13],\"406\":[1,11],\"407\":[1,55],\"408\":[1,24],\"409\":[null,null,1],\"410\":[null,null,1],\"411\":[1],\"412\":[1,5],\"413\":[1,2],\"414\":[3,12],\"415\":[1,10],\"416\":[1,4],\"417\":[1,9],\"418\":[null,null,1],\"419\":[null,null,1],\"420\":[1],\"421\":[2,7],\"422\":[1],\"423\":[1,2],\"424\":[1,4],\"425\":[1,4],\"426\":[1,20],\"427\":[1],\"428\":[1,38],\"429\":[1,22],\"430\":[1,21],\"431\":[1,24],\"432\":[1,7],\"433\":[1,12],\"434\":[null,null,1],\"435\":[null,null,1],\"436\":[1],\"437\":[1,13],\"438\":[1,162],\"439\":[null,null,1],\"440\":[null,null,1],\"441\":[3],\"442\":[8,12],\"443\":[1,76],\"444\":[1,3],\"445\":[1,38],\"446\":[1,7],\"447\":[1,57],\"448\":[null,null,1],\"449\":[null,null,1],\"450\":[1,3],\"451\":[1]},\"averageFieldLength\":[1.8480037713856714,22.963776557773084,0.6215226957312798],\"storedFields\":{\"0\":{\"h\":\"档案主页\"},\"1\":{\"h\":\"介绍\",\"t\":[\"This is Me!\",\"相关配置文档请见 档案主页。\"]},\"2\":{\"h\":\"关于我\"},\"3\":{\"h\":\"关于我\"},\"4\":{\"h\":\"关于本站\",\"t\":[\"2024-06-17\",\"完善 deploy,yml，部署到SSH 域名解析 doublew2w.cn\",\"2024-06-16\",\"完善 deploy.yml 文件，部署到 github-page\",\"注意\",\"记得建立 gh-pages 分支\",\"name: 部署文档 on: push: branches: - master permissions: contents: write jobs: deploy-gh-pages: runs-on: ubuntu-latest environment: master steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 1 # 如果你文档需要 Git 子模块，取消注释下一行 # submodules: true - name: 设置 pnpm uses: pnpm/action-setup@v4 - name: 设置 Node.js uses: actions/setup-node@v4 with: node-version: 20 cache: \\\"pnpm\\\" - name: 安装依赖 run: | corepack enable pnpm install --frozen-lockfile - name: 构建文档 env: NODE_OPTIONS: --max_old_space_size=8192 run: |- pnpm run docs:build > src/.vuepress/dist/.nojekyll - name: 部署文档 uses: JamesIves/github-pages-deploy-action@v4 with: # 部署文档 branch: gh-pages folder: src/.vuepress/dist\",\"2024-06-15\",\"初始化项目并上传到github\"]},\"5\":{\"h\":\"底层逻辑与蝴蝶效应.md\"},\"6\":{\"h\":\"你到底有没有认真学？\",\"t\":[\"回想了一下自己大学的学习过程，很喜欢“钻研”东西。在这里它表示是贬义的，表现出来的是一种固执。\",\"为什么我说它是固执的。以我现在工作几年的经历，在回头看那时的自己，真心觉得那真是一个傻小子，不知变通。\",\"学习的时候，遇到问题，总是喜欢扎进去深究，但却偏离了最初学习的目的。举个简单的例子就是高数课程上，某个章节学习到了泰勒公式，但是在做题时，却跑到了推导泰勒公式的道上来。觉得自己能搞懂，瞎琢磨。但你说实在的话，琢磨也没问题，会让人学的更加透彻，可那个人他忘了得先完成作业啊，不然不还得扣你分嘛？\",\"思考了一下原因，从小到大，自己的升学历程很顺利，属于当时被家长、父母、老师夸夸神童的程度。学习成绩也都是属一属二的程度，就算自己瞎玩，也能考得比那些埋头苦读的人的成绩好。于是，一颗自以为是”高精尖儿“的种子就这么埋下了。\",\"来到大学以后，不管是学习还是做事，总喜欢往细处扣，自以为自己能把这原理、规律掌握，但这东西可是前人花了好大力气才得出来，怎么能靠单纯的思考就能的出来呢？于是就容易陷于死胡同，那为了让自己不要那么纠结，于是就变成了无脑乐观派。\",\"自以为自己是科研人才，但其实差了十万八千里的思维方式。😗\"]},\"7\":{\"h\":\"你的成熟方案呢？\",\"t\":[\"本人经历过两次考研，都失败了。心理上很受打击，当时归咎的原因无非就是做题做少了、哪天没睡好，身体不舒服之类，但唯独没归咎到自身的问题上。\",\"在今天来看，不管是工作还是学习，以结果导向的方式去做事带来的收益会大一些。\",\"之所以这么说，是因为就目前而来，不管是工作上还是学习上遇到的障碍，其实外面都充满着答案，铺天盖地都是成熟方案。也就是说某种情况对应某个答案，形成一种模板。却未曾去寻找那对应的模板，我这里说的不是粘贴复制，而是采取先“运行”后“优化”的行动策略。\",\"对于某个题型，就是直接用这种方式，别独自在脑子里面深究，你是不是也有过那种“明明看这个人木的很，为什么成绩比我好的那么多”，以往听到的解释是人家在你睡着的时候偷偷卷了。\",\"大多数情况并非如此，而是因为人家解决问题的方式跟钻研的方式是不一样的。前者是为了解决，为了得分，后者则是为了深挖，如果可以还想创新。\",\"工作上也是如此，一个从来没使用过的技术，突然让你使用它来完成甲方需求，你应该是找市面上存在的成熟方案，然后利用demo去修改。而不是从头到尾，把这门技术的祖宗十八代都挖出来。\"]},\"8\":{\"h\":\"你不够擅长？还是你走偏了？\",\"t\":[\"以前脑海中总有一个疑问\",\"我现在做事很痛苦，是因为我不足够擅长才痛苦，还是本身就不合适？\",\"直到现在，依然还有这个疑问。\",\"我能想到的一些解决方式是寻找正确的反馈。它与问题中的“痛苦”并不是一个东西，痛苦它只是一种感觉，它并非是你给予事物一定的作用力之后，所返给你的一些反作用力。\",\"准确来说，它更像一种客观存在，它并不以你的主观感受为主。懂或者不懂，而并非痛苦或者不痛苦，但我们容易把后者误当成前者。说的更简单一点，你可不可以用上一些工具就能把这个事情做好，而不是要钻研这个工具、这个事情的原理。\",\"有这么一个问题，那你打开一个游戏，你是会先玩，还是会先查攻略。 以前我特别希望有一片小天地，能写一写自己的所思所想。于是就可以研究起了博客。还没把博客搭建起来时，我就先跑去查看博客的美化功能了。当花费一番经历，阅读完博客网站美化以后，累了，脑子里面的那篇反思也就消失的无影无踪了。\"]},\"9\":{\"h\":\"总结\",\"t\":[\"认清自己就不是搞钻研这一块，莫要时时刻刻把所有事物的原理搞清楚\",\"任何时候都要去寻找反馈，通过反馈你才能时刻修正自己\",\"这个地球已经存在这么多年，你遇到的问题，很多人都遇到过。别自己瞎捣鼓，市面有很多解决方案，况且你自己瞎捣鼓的方案还不如外面的好用\",\"要时不时接受市场的检验，这样你才不会成为温水里的青蛙。\",\"复盘总结并不是流水账日记，也不是长篇大论。而是从具体的某件事中，你看到了什么，过去又发生了什么，而你又学到了什么，就够了。\"]},\"10\":{\"c\":[\"乱写一通\"]},\"11\":{\"h\":\"1-两数之和\"},\"12\":{\"h\":\"题目地址(1. 两数之和 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/two-sum/\"]},\"13\":{\"h\":\"题目描述\",\"t\":[\" 给定一个整数数组 nums 和一个整数目标值 target ，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。\",\" 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\",\" 你可以按任意顺序返回答案。\",\" 示例 1：\",\" 输入： nums = [2,7,11,15], target = 9 输出： [0,1] 解释： 因为 nums [0] + nums [1] == 9 ，返回 [0, 1] 。 \",\" 示例 2：\",\" 输入： nums = [3,2,4], target = 6 输出： [1,2] \",\" 示例 3：\",\" 输入： nums = [3,3], target = 6 输出： [0,1] \",\" 提示：\",\" 2 <= nums.length <= 10 4 \",\"-10 9 <= nums [i] <= 10 9 \",\"-10 9 <= target <= 10 9 \",\" 只会存在一个有效答案 \",\" 进阶： 你可以想出一个时间复杂度小于 O(n 2 ) 的算法吗？\"]},\"14\":{\"h\":\"前置知识\",\"t\":[\"哈希表\"]},\"15\":{\"h\":\"思路\",\"t\":[\"创建一个哈希表，对于每个 x，通过查询 target - x 是否存在于哈希表中\",\"不存在，则将 x 插入哈希表\",\"存在，x 的下标与 target-x 的下标就是答案\",\"如果有 3 个或者以上的重复元素，代表这个重复元素不可能是解\",\"如果只有两个重复元素，同样的道理，假如这个重复元素是解，那么必定是两个重复元素的和等于 target。\"]},\"16\":{\"h\":\"关键点\",\"t\":[\"每种输入只会对应一个答案\",\"哈希表存储的 key 是 x 和 target - x\"]},\"17\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class Solution { public int[] twoSum(int[] nums, int target) { Map<Integer, Integer> map = new HashMap<>(); for (int i = 0; i < nums.length; ++i) { int first = target - nums[i]; if (map.containsKey(first)) { int firstIndex = map.get(target - nums[i]); return new int[]{firstIndex, i}; } map.put(nums[i], i); } return new int[0]; } }\",\"复杂度分析\",\"令 n 为数组长度。\",\"时间复杂度：O(n)\",\"空间复杂度：O(n)，哈希表存储元素的开销\"]},\"18\":{\"c\":[\"LeetCode\"]},\"19\":{\"c\":[\"哈希表\"]},\"20\":{\"h\":\"101-对称二叉树\"},\"21\":{\"h\":\"题目地址(101. 对称二叉树 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/symmetric-tree/description/\"]},\"22\":{\"h\":\"题目描述\",\"t\":[\" 给你一个二叉树的根节点 root ， 检查它是否轴对称。\",\" 示例 1：\",\" 输入： root = [1,2,2,3,4,4,3] 输出： true \",\" 示例 2：\",\" 输入： root = [1,2,2, null,3, null,3] 输出： false \",\" 提示：\",\" 树中节点数目在范围 [1, 1000] 内 \",\"-100 <= Node.val <= 100 \",\" 进阶： 你可以运用递归和迭代两种方法解决这个问题吗？\"]},\"23\":{\"h\":\"思路 1：递归\",\"t\":[\"定义递归函数：\",\"参数与返回值：入参是左子节点与右子节点，返回值是对称标志\",\"单层递归逻辑： \",\"如果节点值不同，则为 false\",\"如果其中一个为空，则为 false\",\"如果都为空，则为 true\",\"判断两节点 left.left 和 right.right 是否对称\",\"判断两节点 left.right 和 right.left 是否对称\",\"终止条件：\"]},\"24\":{\"h\":\"关键点\",\"t\":[\"两个二叉树互为镜像的定义：\",\"两个二叉树的根节点的值相等\",\"每个二叉树的右子树与另一个树的左子树互为镜像\",\"如果以节点来说明：\",\"两对称节点值相同：left.val = right.val\",\"left 的左子节点与 right 的右子节点相同：left.left.val = right.right.val\",\"left 的右子节点与 right 的左子节点相同：left.right.val = right.left.val\"]},\"25\":{\"h\":\"代码\",\"t\":[\" /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isSymmetric(TreeNode root) { return root == null || recur(root.left, root.right); } public boolean recur(TreeNode left, TreeNode right){ if(left == null && right == null) return true; if(left == null || right == null || left.val != right.val) return false; return recur(left.left,right.right) && recur(left.right,right.left); } }\",\"复杂度分析\",\"令 n 为二叉树节点个数。\",\"时间复杂度：O(n)，每次判断一对节点是否对称，需要递归一次。\",\"空间复杂度：O(n)，最差情况，二叉树退化为链表，共有 2n-1 个\"]},\"26\":{\"h\":\"思路 2：迭代\",\"t\":[\"将递归逻辑写成迭代的形式。\",\"将这个二叉树看成是两个 u，v，使用队列存储遍历过程中的每一对节点\",\"对于根节点而已，入队两次，相当于处理这一对节点\",\"对于其他的一对节点 \",\"入队 u.left 和 v.right\",\"入队 u.right 和 v.left\"]},\"27\":{\"h\":\"代码\",\"t\":[\"class Solution { public boolean isSymmetric(TreeNode root) { return check(root, root); } public boolean check(TreeNode u, TreeNode v) { Queue<TreeNode> q = new LinkedList<TreeNode>(); q.offer(u); q.offer(v); while (!q.isEmpty()) { u = q.poll(); v = q.poll(); if (u == null && v == null) { continue; } if ((u == null || v == null) || (u.val != v.val)) { return false; } //1 q.offer(u.left); q.offer(v.right); //2 q.offer(u.right); q.offer(v.left); } return true; } }\",\"复杂度分析\",\"令 n 为二叉树节点个数。\",\"时间复杂度：O(n)，每次判断一对节点是否对称，需要递归一次。\",\"空间复杂度：O(n)，使用一个队列维护节点，每个几点最多进队一次，队列中最多不会超过 n 个节点。\"]},\"28\":{\"c\":[\"LeetCode\"]},\"29\":{\"c\":[\"二叉树\"]},\"30\":{\"h\":\"104-二叉树的最大深度\"},\"31\":{\"h\":\"题目地址(104. 二叉树的最大深度 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/submissions/\"]},\"32\":{\"h\":\"题目描述\",\"t\":[\" 给定一个二叉树 root ，返回其最大深度。\",\" 二叉树的 最大深度 是指从根节点到最远叶子节点的最长路径上的节点数。\",\" 示例 1：\",\" 输入： root = [3,9,20, null, null,15,7] 输出： 3 \",\" 示例 2：\",\" 输入： root = [1, null,2] 输出： 2 \",\" 提示：\",\" 树中节点的数量在 [0, 10 4 ] 区间内。\",\"-100 <= Node.val <= 100 \"]},\"33\":{\"h\":\"前置知识\",\"t\":[\"深度概念\",\"二叉树\",\"DFS、BFS\"]},\"34\":{\"h\":\"思路 1: DFS\",\"t\":[\"二叉树的最大深度 = Math.max(左子树的最大深度，右子树的最大深度) + 1\",\"递归三要素:\",\"终止条件： 当 root 为空时，说明不是叶节点，因此深度是 0\",\"单层递归逻辑：计算节点 root 的 左子树的深度 ，计算节点 root 的 右子树的深度\",\"返回值：：返回树的深度\"]},\"35\":{\"h\":\"关键点\",\"t\":[\"二叉树的最大深度 = Math.max(左子树的最大深度，右子树的最大深度) + 1\"]},\"36\":{\"h\":\"代码\",\"t\":[\"class Solution { public int maxDepth(TreeNode root) { if (root == null) return 0; // 单层递归逻辑：求树的大深度 // 树的最大深度 = max(左子树的最大深度 ，右子树的最大深度) + 1 return Math.max(maxDepth(root.left),maxDepth(root.right))+1; } }\",\"复杂度分析\",\"令 n 为二叉树节点个数。\",\"时间复杂度：O(n)，计算树的深度需要遍历所有节点。\",\"空间复杂度：O(n)，最差情况下（当树退化为链表时），递归深度可达到 N 。\"]},\"37\":{\"h\":\"思路 2：BFS\",\"t\":[\"树的层序遍历 / 广度优先搜索往往利用 队列 实现。\",\"关键点： 每遍历一层，则计数器 +1 ，直到遍历完成，则可得到树的深度。\"]},\"38\":{\"h\":\"代码\",\"t\":[\"class Solution { public int maxDepth(TreeNode root) { if (root == null) return 0; List<TreeNode> queue = new LinkedList<>() {{ add(root); }}, tmp; int res = 0; while (!queue.isEmpty()) { tmp = new LinkedList<>(); for(TreeNode node : queue) { if (node.left != null) tmp.add(node.left); if (node.right != null) tmp.add(node.right); } queue = tmp; res++; } return res; } }\",\"复杂度分析\",\"令 n 为二叉树节点个数。\",\"时间复杂度：O(n)，计算树的深度需要遍历所有节点。\",\"空间复杂度：O(n)，最差情况下, 队列 queue 同时存储 N/2 个节点\"]},\"39\":{\"c\":[\"LeetCode\"]},\"40\":{\"c\":[\"二叉树\"]},\"41\":{\"h\":\"1047-删除字符串中的所有相邻重复项\"},\"42\":{\"h\":\"题目地址(1047. 删除字符串中的所有相邻重复项 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/description/\"]},\"43\":{\"h\":\"题目描述\",\"t\":[\" 给出由小写字母组成的字符串 S ， 重复项删除操作 会选择两个相邻且相同的字母，并删除它们。\",\" 在 S 上反复执行重复项删除操作，直到无法继续删除。\",\" 在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。\",\" 示例：\",\" 输入： \\\"abbaca\\\" 输出： \\\"ca\\\" 解释： 例如，在 \\\"abbaca\\\" 中，我们可以删除 \\\"bb\\\" 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 \\\"aaca\\\"，其中又只有 \\\"aa\\\" 可以执行重复项删除操作，所以最后的字符串为 \\\"ca\\\"。 \",\" 提示：\",\" 1 <= S.length <= 20000 \",\" S 仅由小写英文字母组成。\"]},\"44\":{\"h\":\"前置知识\",\"t\":[\"字符串\",\"栈\",\"数组\"]},\"45\":{\"h\":\"思路 1：双端队列\",\"t\":[\"当字符串中同时有多组相邻重复项时，我们无论是先删除哪一个，都不会影响最终的结果。\",\"遍历字符串，使用一个集合（数字或者队列）存储遍历的情况。\",\"当前字符与队列尾部相同时，说明此时是重复项已经出现，此时将队列尾部元素删除\",\"当前字符与队列尾部不同时，说明不是重复项，放进队列中\"]},\"46\":{\"h\":\"关键点\",\"t\":[\"利用栈的思想来判断匹配情况\"]},\"47\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\"class Solution { public String removeDuplicates(String s) { if (s == null || s.length() == 0) { return s; } Deque<Character> queue = new ArrayDeque<>(); for (char c : s.toCharArray()) { if (queue.isEmpty() || c != queue.peekLast()) { queue.offer(c); } else { queue.pollLast(); } } StringBuilder sb = new StringBuilder(); while (!queue.isEmpty()) { sb.append(queue.poll()); } return sb.toString(); } }\",\"复杂度分析\",\"令 n 为字符串长度。\",\"时间复杂度：O(n)，我们只需要遍历该字符串一次。\",\"空间复杂度：O(n)，需要创建一个队列来存储情况，最坏的情况是字符串中不存在相邻重复项。\"]},\"48\":{\"h\":\"思路 2：数组\",\"t\":[\"把数组当成一个队列使用，使用两个指针来判断遍历情况\",\"hh <= tt 时说明，字符串不为空。\",\"如果数组尾元素 d[tt] == c ，说明 当前是相邻重复项，修改 tt 指向上一个元素\",\"否则就将元素放进数组\"]},\"49\":{\"h\":\"关键点\"},\"50\":{\"h\":\"代码\",\"t\":[\"class Solution { public String removeDuplicates(String s) { if (s == null || s.length() == 0) { return s; } char[] d = new char[s.length()]; // 双指针，tt 指向最后的数组末尾指针 int hh = 0, tt = -1; for (char c : s.toCharArray()) { if (hh <= tt && d[tt] == c) { tt--; } else { // 数组为空时，添加元素 // 当前字符与末尾元素不相同时，添加元素 d[++tt] = c; } } return new String(d, 0, tt + 1); } }\",\"复杂度分析\",\"令 n 为字符串长度。\",\"时间复杂度：O(n)，我们只需要遍历该字符串一次。\",\"空间复杂度：O(n)，需要创建一个长度为 n 的数组来存储情况，最坏的情况是字符串中不存在相邻重复项。\"]},\"51\":{\"c\":[\"LeetCode\"]},\"52\":{\"c\":[\"字符串\"]},\"53\":{\"h\":\"111-二叉树的最小深度\"},\"54\":{\"h\":\"题目地址(111. 二叉树的最小深度 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/minimum-depth-of-binary-tree/description/\"]},\"55\":{\"h\":\"题目描述\",\"t\":[\"给定一个二叉树，找出其最小深度。\",\"最小深度是从根节点到最近叶子节点的最短路径上的节点数量。\",\"说明：叶子节点是指没有子节点的节点。\",\"示例 1：\",\"输入：root = [3,9,20,null,null,15,7] 输出：2 \",\"示例 2：\",\"输入：root = [2,null,3,null,4,null,5,null,6] 输出：5 \",\"提示：\",\"树中节点数的范围在 [0, 105] 内\",\"-1000 <= Node.val <= 1000\"]},\"56\":{\"h\":\"前置知识\",\"t\":[\"二叉树\",\"DFS\",\"叶子节点\"]},\"57\":{\"h\":\"思路\",\"t\":[\"叶子节点的定义是左孩子和右孩子都为 null 时叫做叶子节点\",\"只有根节点时，深度为1\",\"当根节点左右孩子有一个为空时，返回不为空的孩子节点的深度\",\"当根节点左右孩子都不为空时，返回左右孩子较小深度的节点值\"]},\"58\":{\"h\":\"关键点\"},\"59\":{\"h\":\"代码\",\"t\":[\"class Solution { public int minDepth(TreeNode root) { // 如果树是空，那么最小深度就是0 if(root == null) return 0; // 如果只有根节点,那么最小深度就是1 if(root.left == null && root.right == null) return 1; // 如果左子树为空，那么求右子树的最小深度 int ans = Integer.MAX_VALUE; if(root.left != null) { ans = Math.min(minDepth(root.left), ans); } if(root.right != null) { ans = Math.min(minDepth(root.right), ans); } return ans + 1; } }\",\"复杂度分析\",\"令 n 为二叉树节点个数。\",\"时间复杂度：O(n),每个节点都会遍历一次\",\"空间复杂度：O(h)，其中 H 是树的高度。空间复杂度主要取决于递归时栈空间的开销，最坏情况下，树呈现链状，空间复杂度为 O(N)。\"]},\"60\":{\"c\":[\"LeetCode\"]},\"61\":{\"c\":[\"二叉树\",\"DFS\"]},\"62\":{\"h\":\"116-填充每个节点的下一个右侧节点指针\"},\"63\":{\"h\":\"题目地址(116. 填充每个节点的下一个右侧节点指针 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/description/\"]},\"64\":{\"h\":\"题目描述\",\"t\":[\" 给定一个 完美二叉树 ，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：\",\" struct Node { int val; Node *left; Node *right; Node *next; }\",\" 填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL 。\",\" 初始状态下，所有 next 指针都被设置为 NULL 。\",\" 示例 1：\",\" 输入： root = [1,2,3,4,5,6,7] 输出： [1,#,2,3,#,4,5,6,7,#] 解释： 给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。序列化的输出按层序遍历排列，同一层节点由 next 指针连接，'#' 标志着每一层的结束。 \",\" 示例 2: \",\" 输入： root = [] 输出： [] \",\" 提示：\",\" 树中节点的数量在 [0, 2 12 - 1] 范围内 \",\"-1000 <= node.val <= 1000 \",\" 进阶：\",\" 你只能使用常量级额外空间。\",\" 使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。\"]},\"65\":{\"h\":\"前置知识\",\"t\":[\"二叉树\",\"BFS\"]},\"66\":{\"h\":\"思路\",\"t\":[\"next 指针只有两种类型：\",\"同一个父节点的两个子节点\",\"node.left.next = node.right\",\"不同父节点的子节点。将这一层的上一层串联好，就可以通过父节点的 next 找到邻居，完成处理。即第 N 层节点之间建立 next 指针后，再建立第 N+1 层节点的 next 指针。\",\"root.right.next => root.next.left\"]},\"67\":{\"h\":\"关键点\",\"t\":[\"把每一层当成一个链表进行遍历。\",\"root.right.next => root.next.left\"]},\"68\":{\"h\":\"代码\",\"t\":[\"/* // Definition for a Node. class Node { public int val; public Node left; public Node right; public Node next; public Node() {} public Node(int _val) { val = _val; } public Node(int _val, Node _left, Node _right, Node _next) { val = _val; left = _left; right = _right; next = _next; } }; */ class Solution { public Node connect(Node root) { if(root == null) return root; // 从根节点开始 Node pre = root; while(pre.left!=null) { // 遍历这一层节点组织成的链表，为下一层的节点更新 next 指针 Node temp = pre; while(temp != null){ // 同一个父节点下的串联 temp.left.next = temp.right; // 如果上一层已经完成串联 if(temp.next!=null) { temp.right.next = temp.next.left; } //继续右边遍历 temp = temp.next; } //从下一层的最左边开始遍历 pre = pre.left; } return root; } }\",\"复杂度分析\",\"令 n 为二叉树节点个数。\",\"时间复杂度：O(n)，每个节点只访问一次\",\"空间复杂度：O(1)，不需要存储额外的节点\"]},\"69\":{\"c\":[\"LeetCode\"]},\"70\":{\"c\":[\"二叉树\"]},\"71\":{\"h\":\"117-填充每个节点的下一个右侧节点指针 II\"},\"72\":{\"h\":\"题目地址(117. 填充每个节点的下一个右侧节点指针 II - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/\"]},\"73\":{\"h\":\"题目描述\",\"t\":[\" 给定一个二叉树：\",\" struct Node { int val; Node *left; Node *right; Node *next; }\",\" 填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL 。\",\" 初始状态下，所有 next 指针都被设置为 NULL 。\",\" 示例 1：\",\" 输入 ：root = [1,2,3,4,5, null,7] 输出： [1,#,2,3,#,4,5,7,#] 解释： 给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。序列化输出按层序遍历顺序（由 next 指针连接），'#' 表示每层的末尾。\",\" 示例 2：\",\" 输入： root = [] 输出： [] \",\" 提示：\",\" 树中的节点数在范围 [0, 6000] 内 \",\"-100 <= Node.val <= 100 \",\" 进阶：\",\" 你只能使用常量级额外空间。\",\" 使用递归解题也符合要求，本题中递归程序的隐式栈空间不计入额外空间复杂度。\",\" ## 前置知识 \",\"二叉树\",\"层序遍历\"]},\"74\":{\"h\":\"思路 1：出队串联\",\"t\":[\"按照层序遍历的方式，创建一个队列存放每一层的节点，将每一层想象成一条链表。当遍历到一层时，从左到右出队将其串联起来。\"]},\"75\":{\"h\":\"关键点\",\"t\":[\"//出队 Node node = queue.poll(); //如果 pre 为空就表示 node 节点是这一行的第一个， //没有前一个节点指向他，否则就让前一个节点指向他 if (pre != null) { pre.next = node; }\"]},\"76\":{\"h\":\"代码\",\"t\":[\" /* // Definition for a Node. class Node { public int val; public Node left; public Node right; public Node next; public Node() {} public Node(int _val) { val = _val; } public Node(int _val, Node _left, Node _right, Node _next) { val = _val; left = _left; right = _right; next = _next; } }; */ class Solution { public Node connect(Node root) { if (root == null) return root; Deque<Node> queue = new ArrayDeque<>(); queue.addLast(root); while (!queue.isEmpty()) { int levelSize = queue.size(); Node pre = null; for (int i = 0; i < levelSize; i++) { // 出队 Node node = queue.pollFirst(); // //如果 pre 为空就表示 node 节点是这一行的第一个， if (pre != null) { pre.next = node; } // 然后再让当前节点成为前一个节点 pre = node; // 左右子节点如果不为空就入队 if (node.left != null) { queue.add(node.left); } if (node.right != null) { queue.add(node.right); } } } return root; } }\",\"复杂度分析\",\"令 n 为二叉树节点个数。\",\"时间复杂度：O(n)，每个节点最多出队和入队一次。\",\"空间复杂度：O(n)，队列存放节点所需要的空间不超过 n 个节点\"]},\"77\":{\"h\":\"思路 2：模拟链表串联\",\"t\":[\"将队列去掉，引入一个「虚拟头节点」\"]},\"78\":{\"h\":\"代码\",\"t\":[\"cur 是某一行的节点，dummy 和 pre 是下一行的头\",\"当对 cur 进行遍历时，使用 pre 去串联\",\"当 cur 遍历完，cur 更新为 dummy.next，也就是下一行的头，这样就完成向下一行的变化。\",\"class Solution { public Node connect(Node root) { // 将每一行看成一个链表进行处理 if(root == null) return root; //cur 我们可以把它看做是每一层的链表 Node cur = root; while(cur != null){ // 虚拟头节点 Node dummy = new Node(-1); //pre 表示访下一层节点的前一个节点 Node pre = dummy; while (cur != null) { if (cur.left != null) { // 如果当前层的左子节点不为空，就下一层的虚拟头节点指向它 pre.next = cur.left; // 然后再更新下一层的指针 pre = pre.next; } //同理参照左子树 if (cur.right != null) { pre.next = cur.right; pre = pre.next; } //继续访问这一行的下一个节点 cur = cur.next; } //把下一层串联成一个链表之后，让他赋值给 cur， //后续继续循环，直到 cur 为空为止 cur = dummy.next; } return root; } }\",\"复杂度分析\",\"令 n 为二叉树节点个数。\",\"时间复杂度：O(n)，每个节点最多出队和入队一次。\",\"空间复杂度：O(1)，没有额外的空间\"]},\"79\":{\"c\":[\"LeetCode\"]},\"80\":{\"c\":[\"二叉树\",\"BFS\"]},\"81\":{\"h\":\"142-环形链表 ii\"},\"82\":{\"h\":\"题目地址(142. 环形链表 II - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/linked-list-cycle-ii/description/\"]},\"83\":{\"h\":\"题目描述\",\"t\":[\" 给定一个链表的头节点 head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null 。\",\" 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（ 索引从 0 开始 ）。如果 pos 是 -1 ，则在该链表中没有环。 注意： pos 不作为参数进行传递 ，仅仅是为了标识链表的实际情况。\",\" 不允许修改 链表。\",\" 示例 1：\",\" 输入： head = [3,2,0,-4], pos = 1 输出： 返回索引为 1 的链表节点 解释： 链表中有一个环，其尾部连接到第二个节点。 \",\" 示例 2：\",\" 输入： head = [1,2], pos = 0 输出： 返回索引为 0 的链表节点 解释： 链表中有一个环，其尾部连接到第一个节点。 \",\" 示例 3：\",\" 输入： head = [1], pos = -1 输出： 返回 null 解释： 链表中没有环。 \",\" 提示：\",\" 链表中节点的数目范围在范围 [0, 10 4 ] 内 \",\"-10 5 <= Node.val <= 10 5 \",\" pos 的值为 -1 或者链表中的一个有效索引 \",\" 进阶： 你是否可以使用 O(1) 空间解决此题？\"]},\"84\":{\"h\":\"前置知识\",\"t\":[\"链表\",\"环形证明\"]},\"85\":{\"h\":\"思路\",\"t\":[\"使用双指针，分别定义为 fast 和 slow。从头节点出发，fast 每次走两步，slow 每次走 1 步。\",\"如果存在环，由于 fast 的步速大于 slow，最终 fast 和 slow 一定会在环中相遇\",\"如果不存在环，fast 会先于 slow 走到 null\",\"从头节点到环形入口节点的节点数为 x，环形入口节点到 fast 指针与 slow 指针相遇节点节点数为 y。从相遇节点 再到环形入口节点节点数为 z。\",\"相遇时，slow 走过的节点数为 x+y，fast 走过的节点数为 x+y+n(y+z)，其中 n 为走过的环的圈数。\",\"fast 每次走两步，slow 每次走一步。\",\"x+y+n(y+z) = 2*(x+y) => x = (n-1)(y+z)+z\",\"从「相遇点到入环点的距离」加上「 n−1 圈的环长度」，恰好等于「从链表头部到入环点的距离」。\"]},\"86\":{\"h\":\"关键点\",\"t\":[\"判断链表是否环\",\"如果有环，如何找到这个环的入口\"]},\"87\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode detectCycle(ListNode head) { if(head == null || head.next == null){ return null; } // 采用双指针的方式 ListNode fast = head,slow = head; // 第一次相遇, fast 走了 2n 个环， slow 走了 n 个环 while(true){ if(fast == null || fast.next == null) return null; fast = fast.next.next; slow = slow.next; if(fast == slow) break; } // 让 fast 和 slow 一起同时 1，在次相遇就是环入口 fast = head; while(fast != slow){ fast = fast.next; slow = slow.next; } return slow; } }\",\"复杂度分析\",\"时间复杂度：O(n)：第一次相遇时，slow 要走 x+y 步，第二次相遇，slow 要走 z 步，总体是线性复杂度\",\"空间复杂度：O(1)：双指针使用常数大小的额外空间\"]},\"88\":{\"c\":[\"LeetCode\"]},\"89\":{\"c\":[\"链表\"]},\"90\":{\"h\":\"15-三数之和\"},\"91\":{\"h\":\"题目地址(15. 三数之和 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/3sum/description/\"]},\"92\":{\"h\":\"题目描述\",\"t\":[\" 给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums [j], nums [k]] 满足 i != j 、 i != k 且 j != k ，同时还满足 nums [i] + nums [j] + nums [k] == 0 。请 \",\" 你返回所有和为 0 且不重复的三元组。\",\" 注意： 答案中不可以包含重复的三元组。\",\" 示例 1：\",\" 输入： nums = [-1,0,1,2,-1,-4] 输出： [[-1,-1,2], [-1,0,1]] 解释： nums [0] + nums [1] + nums [2] = (-1) + 0 + 1 = 0 。 nums [1] + nums [2] + nums [4] = 0 + 1 + (-1) = 0 。 nums [0] + nums [3] + nums [4] = (-1) + 2 + (-1) = 0 。 不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。 注意，输出的顺序和三元组的顺序并不重要。 \",\" 示例 2：\",\" 输入： nums = [0,1,1] 输出： [] 解释： 唯一可能的三元组和不为 0 。 \",\" 示例 3：\",\" 输入： nums = [0,0,0] 输出： [[0,0,0]] 解释： 唯一可能的三元组和为 0 。 \",\" 提示：\",\" 3 <= nums.length <= 3000 \",\"-10 5 <= nums [i] <= 10 5 \"]},\"93\":{\"h\":\"前置知识\",\"t\":[\"双指针\"]},\"94\":{\"h\":\"思路：排序+双指针\",\"t\":[\"如果使用「暴力枚举」的方式，时间复杂度为 O(n3), 最后还要通过哈希表进行去重。\",\"为了「不重复」，我们先要排序。这样就能保证我们每一层循环都可以过滤掉相同的元素，而且能快速做出剪枝\",\"排序的时间复杂度为 O(nlogn)\",\"在固定两个元素的情况下，第三个元素会导致和为 <0>0=0。而两个元素的交替移动也能达到这个效果。\",\"定义三个指针 k, i, j，其中 k 指向最左的元素，双指针 i, j 分别在数组索引（k, length(nums)）处, 双指针 i , j 交替向中间移动，记录对于每个固定指针 k 的所有满足 nums [k] + nums [i] + nums [j] == 0 的 i, j 组合：\",\"如果 nums[k] > 0 ，而 nums[k] 又是最小，所以和肯定 > 0，终止循环\",\"如果 nums[k] == nums[k-1] 有可能是重复答案，处理一次即可\",\"双指针 i, j 变动情况： \",\"如果和 < 0, 说明 i 需要往 右边 移动，移动的时候要注意处理相同元素情况\",\"如果和 > 0, 说明 j 需要往 左边 移动，移动的时候要注意处理相同元素情况\",\"如果和 = 0, i 和 j 同时往中间移动的时候处理相同元素的情况\"]},\"95\":{\"h\":\"关键点\",\"t\":[\"为了 “不可以包含重复的三元组”，通过排序容易找到相同的三元组答案。\",\"为了更有效的找到有效解，双指针「交替向中间移动」\"]},\"96\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class Solution { public List<List<Integer>> threeSum(int[] nums) { // 三重循环枚举，不重复则需要 // 第二重循环枚举到的元素不小于当前第一重循环枚举到的元素； // 第三重循环枚举到的元素不小于当前第二重循环枚举到的元素； // 因此需要先排序。 // 双指针为什么要交替移动，往中间靠拢 // 在固定两重循环元素的情况，第三个元素导致的三数之和有可能导致 > 0 ,= 0 < 0，也有可能 = 0（重复答案） // 而 < 0 时，第二个枚举元素的下标要右边移动，增大总和 // 而 > 0 时，只能让第三个枚举元素的下标向左移动，减小总和 // = 0，就是当前答案，随后继续交替移动，排除重复答案、 List<List<Integer>> res = new ArrayList<>(); if(nums == null || nums.length <3){ return res; } Arrays.sort(nums); for(int k = 0;k < nums.length; k++){ if(nums[k] > 0) break; // 此时剩余两个元素都 > 0，往后的查找不满足。 if(k > 0 && nums[k] == nums[k - 1]) continue; // 找到重复答案（题目要求不重复） int i = k + 1,j = nums.length - 1; while(i < j){ int sum = nums[k] + nums[i] + nums[j]; if(sum < 0){ while(i < j && nums[i] == nums[++i]); // 不判断相同元素 }else if(sum > 0){ while(i < j && nums[j] == nums[--j]); // 不判断相同元素 }else if(sum == 0){ res.add(new ArrayList<Integer>(Arrays.asList(nums[k],nums[i],nums[j]))); while(i < j && nums[i] == nums[++i]); // 不判断相同答案的元素 while(i < j && nums[j] == nums[--j]); // 不判断相同答案的元素 } } } return res; } }\",\"复杂度分析\",\"令 n 为数组长度。\",\"时间复杂度：O(n2)，排序的时间复杂度为 O(nlogn)。双重循环的时间复杂度为 O(n2)\",\"空间复杂度：O(1)，指针使用常数大小的额外空间，忽略答案的存储空间。\"]},\"97\":{\"c\":[\"LeetCode\"]},\"98\":{\"c\":[\"双指针\",\"数组\"]},\"99\":{\"h\":\"151-反转字符串中的单词\"},\"100\":{\"h\":\"题目地址(151. 反转字符串中的单词 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/reverse-words-in-a-string/submissions/\"]},\"101\":{\"h\":\"题目描述\",\"t\":[\" 给你一个字符串 s ，请你反转字符串中 单词 的顺序。\",\" 单词 是由非空格字符组成的字符串。 s 中使用至少一个空格将字符串中的 单词 分隔开。\",\" 返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。\",\" 注意： 输入字符串 s 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。\",\" 示例 1：\",\" 输入： s = \\\" the sky is blue \\\" 输出： \\\" blue is sky the \\\" \",\" 示例 2：\",\" 输入： s = \\\" hello world \\\" 输出： \\\"world hello\\\" 解释： 反转后的字符串中不能存在前导空格和尾随空格。 \",\" 示例 3：\",\" 输入： s = \\\"a good example\\\" 输出： \\\"example good a\\\" 解释： 如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。 \",\" 提示：\",\" 1 <= s.length <= 10 4 \",\" s 包含英文大小写字母、数字和空格 ' '\",\" s 中 至少存在一个 单词 \",\" 进阶： 如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。\"]},\"102\":{\"h\":\"前置知识\",\"t\":[\"字符串\",\"双指针\"]},\"103\":{\"h\":\"思路 1：字符串 API\",\"t\":[\"使用 split() ，以空格进行分割\",\"使用 reverse() 倒排字符串列表\"]},\"104\":{\"h\":\"代码\",\"t\":[\"Java Code\",\"class Solution { public String reverseWords(String s) { // 除去开头和末尾的空白字符 s = s.trim(); // 正则匹配连续的空白字符作为分隔符分割 List<String> wordList = Arrays.asList(s.split(\\\"\\\\\\\\s+\\\")); Collections.reverse(wordList); return String.join(\\\" \\\", wordList); } }\",\"复杂度分析\",\"令 n 为字符串长度。\",\"时间复杂度：O(n)，线性遍历字符串。\",\"空间复杂度：O(n)，List 中的元素总长度，占用 O(N) 大小的额外空间。\"]},\"105\":{\"h\":\"思路 2：倒序遍历+双指针\",\"t\":[\"倒序遍历字符串 s，使用双指针 i，j 指向单词的范围。\",\"将单词添加到结果中\",\"并将双指针指向新的单词，最后将所有单词拼接起来。\"]},\"106\":{\"h\":\"代码\",\"t\":[\"Java Code:\",\" class Solution { public String reverseWords(String s) { s = s.trim(); // 删除首尾空格 int j = s.length() - 1, i = j; StringBuilder res = new StringBuilder(); while (i >= 0) { while (i >= 0 && s.charAt(i) != ' ') i--; // 搜索首个空格 res.append(s.substring(i + 1, j + 1) + \\\" \\\"); // 添加单词 while (i >= 0 && s.charAt(i) == ' ') i--; // 跳过单词间空格 j = i; // j 指向下个单词的尾字符 } return res.toString().trim(); // 转化为字符串并返回 } }\",\"复杂度分析\",\"令 n 为字符串长度。\",\"时间复杂度：O(n)，线性遍历字符串。\",\"空间复杂度：O(n)，StringBuilder(Java) 中的字符串总长度，占用 O(N) 大小的额外空间。\"]},\"107\":{\"h\":\"思路3：手写字符串API\",\"t\":[\"去除空格 trimSpaces\",\"先翻转整个字符串 reverse\",\"再翻转每个单词 reverseEachWord\"]},\"108\":{\"h\":\"代码\",\"t\":[\"class Solution { public String reverseWords(String s) { StringBuilder sb = trimSpaces(s); // 翻转字符串 reverse(sb, 0, sb.length() - 1); // 翻转每个单词 reverseEachWord(sb); return sb.toString(); } // 去掉多余空格 public StringBuilder trimSpaces(String s) { int left = 0, right = s.length() - 1; // 去掉字符串开头的空白字符 while (left <= right && s.charAt(left) == ' ') { ++left; } // 去掉字符串末尾的空白字符 while (left <= right && s.charAt(right) == ' ') { --right; } // 将字符串间多余的空白字符去除 StringBuilder sb = new StringBuilder(); while (left <= right) { char c = s.charAt(left); if (c != ' ') { sb.append(c); } else if (sb.charAt(sb.length() - 1) != ' ') { sb.append(c); } ++left; } return sb; } // 反转字符串 public void reverse(StringBuilder sb, int left, int right) { while (left < right) { char tmp = sb.charAt(left); sb.setCharAt(left++, sb.charAt(right)); sb.setCharAt(right--, tmp); } } // 翻转每一个单词 public void reverseEachWord(StringBuilder sb) { int n = sb.length(); int start = 0, end = 0; while (start < n) { // 循环至单词的末尾 while (end < n && sb.charAt(end) != ' ') { ++end; } // 翻转单词 reverse(sb, start, end - 1); // 更新start，去找下一个单词 start = end + 1; ++end; } } }\",\"复杂度分析\",\"时间复杂度：O(n)，其中 n 为输入字符串的长度。\",\"空间复杂度：Java 和 Python 的方法需要 O(n) 的空间来存储字符串\"]},\"109\":{\"c\":[\"LeetCode\"]},\"110\":{\"c\":[\"字符串\"]},\"111\":{\"h\":\"18-四数之和\"},\"112\":{\"h\":\"题目地址(18. 四数之和 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/4sum/description/\"]},\"113\":{\"h\":\"题目描述\",\"t\":[\"给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复）：\",\"0 <= a, b, c, d < n\",\"a、b、c 和 d互不相同\",\"nums[a] + nums[b] + nums[c] + nums[d] == target\",\"你可以按 任意顺序 返回答案 。\",\"示例 1：\",\"输入：nums = [1,0,-1,0,-2,2], target = 0 输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]] \",\"示例 2：\",\"输入：nums = [2,2,2,2,2], target = 8 输出：[[2,2,2,2]] \",\"提示：\",\"1 <= nums.length <= 200\",\"-109 <= nums[i] <= 109\",\"-109 <= target <= 109\"]},\"114\":{\"h\":\"前置知识\",\"t\":[\"哈希表\",\"三数之和\"]},\"115\":{\"h\":\"思路\",\"t\":[\"本题与「15. 三数之和」相似，解法也相似。\",\"为了避免枚举到重复四元组，则需要保证每一重循环枚举到的元素不小于其上一重循环枚举到的元素，且在同一重循环中不能多次枚举到相同的元素。因此我们需要「排序」。\",\"使用两重循环分别枚举前两个数，然后在两重循环枚举到的数之后使用双指针枚举剩下的两个数。\"]},\"116\":{\"h\":\"关键点\",\"t\":[\"排序解决重复问题\",\"使用两重循环分别枚举前两个数，然后在两重循环枚举到的数之后使用双指针枚举剩下的两个数。\"]},\"117\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\"class Solution { public List<List<Integer>> fourSum(int[] nums, int target) { Arrays.sort(nums); List<List<Integer>> ans = new ArrayList<>(); int n = nums.length; // 枚举第一个数 for (int a = 0; a < n - 3; a++) { long x = nums[a]; // 跳过重复数字 if (a > 0 && x == nums[a - 1]) continue; if (x + nums[a + 1] + nums[a + 2] + nums[a + 3] > target) break; if (x + nums[n - 3] + nums[n - 2] + nums[n - 1] < target) continue; // 枚举第二个数 for (int b = a + 1; b < n - 2; b++) { long y = nums[b]; if (b > a + 1 && y == nums[b - 1]) continue; if (x + y + nums[b + 1] + nums[b + 2] > target) break; if (x + y + nums[n - 2] + nums[n - 1] < target) continue; int l = b + 1, r = n - 1; while (l < r) { long sum = x + y + nums[l] + nums[r]; if (sum > target) r--; else if (sum < target) l++; else { // sum == target ans.add(Arrays.asList((int)x, (int)y, nums[l], nums[r])); l++; while (l < r && nums[l] == nums[l - 1]) l++; r--; while (l < r && nums[r] == nums[r + 1]) r--; } } } } return ans; } }\",\"复杂度分析\",\"令 n 为数组长度。\",\"时间复杂度：O(n3)，排序的时间复杂度是 O(nlogn)，枚举四元组的时间复杂度是 O(n3)，因此总时间复杂度为 O(n3+nlogn)=O(n3)。\",\"空间复杂度：O(n)，空间复杂度主要取决于排序额外使用的空间。可以看成使用了一个额外的数组存储了数组 nums 的副本并排序，空间复杂度为 O(n)。\"]},\"118\":{\"c\":[\"LeetCode\"]},\"119\":{\"c\":[\"双指针\",\"数组\"]},\"120\":{\"h\":\"19-删除链表的倒数第N个结点\"},\"121\":{\"h\":\"题目地址(19. 删除链表的倒数第 N 个结点 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/\"]},\"122\":{\"h\":\"题目描述\",\"t\":[\" 给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。\",\" 示例 1：\",\" 输入： head = [1,2,3,4,5], n = 2 输出： [1,2,3,5] \",\" 示例 2：\",\" 输入： head = [1], n = 1 输出： [] \",\" 示例 3：\",\" 输入： head = [1,2], n = 1 输出： [1] \",\" 提示：\",\" 链表中结点的数目为 sz \",\" 1 <= sz <= 30 \",\" 0 <= Node.val <= 100 \",\" 1 <= n <= sz \",\" 进阶： 你能尝试使用一趟扫描实现吗？\"]},\"123\":{\"h\":\"前置知识\",\"t\":[\"链表\",\"双指针\"]},\"124\":{\"h\":\"思路 1：双指针\",\"t\":[\"dummyHead 存储虚拟头节点，first 存储头节点，second 存储虚拟头节点，进行遍历。\",\"让 first 先走 N 步。\",\"second 和 first 一起走。\",\"当 first 走到空节点时时，second 刚好走好倒数第 N+1 个\"]},\"125\":{\"h\":\"关键点\",\"t\":[\"由于要进行删除操作，因此要找到「倒数第 n+1」个节点位置\"]},\"126\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode removeNthFromEnd(ListNode head, int n) { if (head.next == null && n == 1) { return null; } // 怎么知道是倒数第 2 个，使用双指针，让一个指针先走 2 步 ListNode dummyHead = new ListNode(-1, head); ListNode first = head; ListNode second = dummyHead; // 让 first 先走 n，让 first 到达尾节点，second 刚好指向倒数第 n 个 for (int i = 0; i < n; i++) { first = first.next; } while (first != null) { first = first.next; second = second.next; } second.next = second.next.next; return dummyHead.next; } }\",\"复杂度分析\",\"令 n 为数组长度。\",\"时间复杂度：O(n)\",\"空间复杂度：O(1)\"]},\"127\":{\"c\":[\"LeetCode\"]},\"128\":{\"c\":[\"链表\"]},\"129\":{\"h\":\"199-二叉树的右视图\"},\"130\":{\"h\":\"题目地址(199. 二叉树的右视图 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/binary-tree-right-side-view/description/\"]},\"131\":{\"h\":\"题目描述\",\"t\":[\" 给定一个二叉树的 根节点 root ，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。\",\" 示例 1: \",\" 输入: [1,2,3, null,5, null,4] 输出: [1,3,4] \",\" 示例 2: \",\" 输入: [1, null,3] 输出: [1,3] \",\" 示例 3: \",\" 输入: [] 输出: [] \",\" 提示: \",\" 二叉树的节点个数的范围是 [0,100] \",\"-100 <= Node.val <= 100 \"]},\"132\":{\"h\":\"前置知识\",\"t\":[\"二叉树\",\"层序遍历\",\"深度遍历\"]},\"133\":{\"h\":\"思路1：层序遍历\",\"t\":[\"使用一个队列存储每一层的节点，在遍历每一层节点时，直到最后一个节点才进行处理。\"]},\"134\":{\"h\":\"关键点\",\"t\":[\"每一层从左到右遍历时，直到最后一个节点才进行处理\"]},\"135\":{\"h\":\"代码\",\"t\":[\"class Solution { public List<Integer> rightSideView(TreeNode root) { // 层序遍历，从右到左 List<Integer> res = new ArrayList<>(); if (root == null) return res; Deque<TreeNode> queue = new ArrayDeque<>(); queue.offer(root); while (!queue.isEmpty()) { int levelSize = queue.size(); for (int i = 0; i < levelSize; i++) { TreeNode node = queue.poll(); if (node.left != null) { queue.offer(node.left); } if (node.right != null) { queue.offer(node.right); } // 单层的最后一个元素就是最右元素 if (i == levelSize - 1) { res.add(node.val); } } } return res; } }\",\"复杂度分析\",\"令 n 为二叉树节点个数。\",\"时间复杂度：O(n)，每个节点最多进队列一次，出队列一次。\",\"空间复杂度：O(n)，每个节点最多进队列一次，所以队列长度最大不不超过 n，所以这里的空间代价为 O(n)。\"]},\"136\":{\"h\":\"思路2：层序遍历——递归方式\",\"t\":[\"先递归右子树，保证首次遇到的一定是最右边的节点。\",\"在递归左子树。\"]},\"137\":{\"h\":\"代码\",\"t\":[\"class Solution { public List<Integer> rightSideView(TreeNode root) { List<Integer> ans = new ArrayList<>(); dfs(root, 0, ans); return ans; } private void dfs(TreeNode root, int depth, List<Integer> ans) { if (root == null) { return; } if (depth == ans.size()) { // 这个深度首次遇到 ans.add(root.val); } dfs(root.right, depth + 1, ans); // 先递归右子树，保证首次遇到的一定是最右边的节点 dfs(root.left, depth + 1, ans); } }\",\"复杂度分析\",\"令 n 为二叉树节点个数。\",\"时间复杂度：O(n)，每个节点最多进队列一次，出队列一次。\",\"空间复杂度：O(h)，其中 h 是二叉树的高度。递归需要 O(h) 的栈空间。最坏情况下，二叉树退化成一条链，递归需要 O(n) 的栈空间。\"]},\"138\":{\"c\":[\"LeetCode\"]},\"139\":{\"c\":[\"二叉树\",\"BFS\",\"DFS\"]},\"140\":{\"h\":\"20-有效的括号\"},\"141\":{\"h\":\"题目地址(20. 有效的括号 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/valid-parentheses/description/\"]},\"142\":{\"h\":\"题目描述\",\"t\":[\"给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。\",\"有效字符串需满足：\",\"左括号必须用相同类型的右括号闭合。\",\"左括号必须以正确的顺序闭合。\",\"每个右括号都有一个对应的相同类型的左括号。\",\"示例 1：\",\"输入：s = \\\"()\\\" 输出：true \",\"示例 2：\",\"输入：s = \\\"()[]{}\\\" 输出：true \",\"示例 3：\",\"输入：s = \\\"(]\\\" 输出：false \",\"提示：\",\"1 <= s.length <= 104\",\"s 仅由括号 '()[]{}' 组成\"]},\"143\":{\"h\":\"前置知识\",\"t\":[\"栈\",\"字符串\"]},\"144\":{\"h\":\"思路\",\"t\":[\"当我们遇到一个左括号时，就放入一个对应的右括号。\",\"当我们遇到一个右括号时，\",\"如果栈为空或者栈顶元素与「当前的右括号」不一样时，那么字符串就是无效的。\",\"如果与栈顶元素一样，就说明括号右效。将栈顶元素出栈\",\"最后再判断栈是不是为空，解决 [({}) 这种情况\"]},\"145\":{\"h\":\"关键点\",\"t\":[\"入栈是右括号，并将当前元素与栈顶元素判断是否相同\"]},\"146\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\"class Solution { public boolean isValid(String s) { if (s.isEmpty()) { return true; } // 长度为奇数时 if(s.length() % 2 == 1){ return false; } Deque<Character> queue = new ArrayDeque<>(); for (char c : s.toCharArray()) { if(c == '('){ queue.offer(')'); }else if(c == '['){ queue.offer(']'); }else if(c == '{'){ queue.offer('}'); }else if(queue.isEmpty() || c != queue.pollLast()){ return false; } } return queue.isEmpty(); } }\",\"复杂度分析\",\"令 n 为字符串长度。\",\"时间复杂度：O(n)\",\"空间复杂度：O(n),创建一个双端队列存放右括号，最多是1/2 n个。\"]},\"147\":{\"c\":[\"LeetCode\"]},\"148\":{\"c\":[\"字符串\",\"栈\"]},\"149\":{\"h\":\"202-快乐数\"},\"150\":{\"h\":\"题目地址(202. 快乐数 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/happy-number/\"]},\"151\":{\"h\":\"题目描述\",\"t\":[\"编写一个算法来判断一个数 n 是不是快乐数。\",\"「快乐数」 定义为：\",\"对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。\",\"然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。\",\"如果这个过程 结果为 1，那么这个数就是快乐数。\",\"如果 n 是 快乐数 就返回 true ；不是，则返回 false 。\",\"示例 1：\",\"输入：n = 19 输出：true 解释： 12 + 92 = 82 82 + 22 = 68 62 + 82 = 100 12 + 02 + 02 = 1 \",\"示例 2：\",\"输入：n = 2 输出：false \",\"提示：\",\"1 <= n <= 231 - 1\"]},\"152\":{\"h\":\"前置知识\",\"t\":[\"哈希表\"]},\"153\":{\"h\":\"思路\",\"t\":[\"通过反复调用 getNext(n) 得到的链是一个隐式的链表。链中的所有其他数字都是节点。那问题就直接转换为「检测一个链表是否有环。」\",\"定义两个指针slow和fast，slow在链表中前进 1 个节点，fast在链表前进 2 个节点（对 getNext(n) 函数的嵌套调用）。\",\"如果 n 是快乐数，则就说明没有循环，fast 会先到 “1”\",\"如果 n 不是快乐数，fast 和 slow 一定会在循环中。\"]},\"154\":{\"h\":\"关键点\",\"t\":[\"将”快乐数“操作视为寻找下一个数，即看成一个链表\"]},\"155\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class Solution { // 对于一个三位数来说，最大的平方和为 9^2+9^2+9^2 = 243 // 对于一个四位数来说，最大的平方和为 81 + 81 + 81 + 81 = 324 // 在继续往下后，4位数只会降到3位数，而不会无穷大 public int getNext(int n) { int totalSum = 0; // 计算每一位的平方和 while (n > 0) { int d = n % 10; n = n / 10; totalSum += d * d; } return totalSum; } public boolean isHappy(int n) { int slowRunner = n; int fastRunner = getNext(n); if(fastRunner == 1){ return true; } // 快慢指针，不是快乐数，那么存在一个环使得算法无限循环 // 在环中它们由于步速不一致，会相遇 // 如果相遇，则说明不是快乐数 // 如果是快乐数，最后会返回1 while (slowRunner != fastRunner) { // slow 走一步, fast 走两步 slowRunner = getNext(slowRunner); fastRunner = getNext(fastRunner); fastRunner = getNext(fastRunner); } return fastRunner == 1; } }\",\"复杂度分析\",\"时间复杂度：O(n)\",\"如果没有循环，那么fast将先到达 1，slow将到达链表中的一半。成本是 O(2⋅logn)=O(logn)\",\"一旦两个指针都在循环中，假设循环中有 k 个数字。如果他们的起点是相隔 k−1 的位置（这是他们可以开始的最远的距离），那么快跑者需要 k−1 步才能到达慢跑者，主操作不变，所以也是 O(logn)。\",\"空间复杂度：O(n)\"]},\"156\":{\"c\":[\"LeetCode\"]},\"157\":{\"c\":[\"哈希表\"]},\"158\":{\"h\":\"203-移除链表元素\"},\"159\":{\"h\":\"题目地址(203. 移除链表元素 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/remove-linked-list-elements/description/\"]},\"160\":{\"h\":\"题目描述\",\"t\":[\"给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。\",\" 示例 1：\",\" 输入： head = [1,2,6,3,4,5,6], val = 6 输出： [1,2,3,4,5] \",\" 示例 2：\",\" 输入： head = [], val = 1 输出： [] \",\" 示例 3：\",\" 输入： head = [7,7,7,7], val = 7 输出： [] \",\" 提示：\",\" 列表中的节点数目在范围 [0, 10 4 ] 内 \",\" 1 <= Node.val <= 50 \",\" 0 <= val <= 50 ## 前置知识 \",\"链表\",\"删除节点\",\"虚拟节点\"]},\"161\":{\"h\":\"思路1:直接删除\",\"t\":[\"先判断头结点的情况 head!=null&&head.val!=val\",\"从当前节点的后驱节点进行遍历\"]},\"162\":{\"h\":\"关键点\",\"t\":[\"头结点要特殊处理\",\"cur.next=cur.next.next\"]},\"163\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode removeElements(ListNode head, int val) { // 删除值相同的头结点后，可能新的头结点也值相等，用循环解决 while (head != null && head.val == val) { head = head.next; } if (head == null) return head; ListNode prev = head; // 确保当前结点后还有结点 while (prev.next != null) { if (prev.next.val == val) { prev.next = prev.next.next; } else { prev = prev.next; } } return head; } }\",\"复杂度分析\",\"令 n 为数组长度。\",\"时间复杂度：O(n)\",\"空间复杂度：O(1)\"]},\"164\":{\"h\":\"思路2：虚拟头节点\"},\"165\":{\"h\":\"关键点\",\"t\":[\"在虚拟头节点下，要删除一个节点，删除方式一样。最后返回的时候是 dummyNode.next\"]},\"166\":{\"h\":\"代码\",\"t\":[\" /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode removeElements(ListNode head, int val) { //创建一个虚拟头结点 ListNode dummyNode=new ListNode(val-1); dummyNode.next=head; ListNode prev=dummyNode; //确保当前结点后还有结点 while(prev.next!=null){ if(prev.next.val==val){ prev.next=prev.next.next; }else{ prev=prev.next; } } return dummyNode.next; } }\",\"复杂度分析\",\"令 n 为数组长度。\",\"时间复杂度：O(n)\",\"空间复杂度：O(1)\"]},\"167\":{\"c\":[\"LeetCode\"]},\"168\":{\"c\":[\"链表\"]},\"169\":{\"h\":\"206-反转链表\"},\"170\":{\"h\":\"题目地址(206. 反转链表 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/reverse-linked-list/\"]},\"171\":{\"h\":\"题目描述\",\"t\":[\"给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。\",\"示例 1：\",\"输入：head = [1,2,3,4,5] 输出：[5,4,3,2,1] \",\"示例 2：\",\"输入：head = [1,2] 输出：[2,1] \",\"示例 3：\",\"输入：head = [] 输出：[] \",\"提示：\",\"链表中节点的数目范围是 [0, 5000]\",\"-5000 <= Node.val <= 5000\",\"进阶：链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？\"]},\"172\":{\"h\":\"前置知识\",\"t\":[\"链表\",\"双指针/递归思想\"]},\"173\":{\"h\":\"思路1:双指针\",\"t\":[\"图片来自：代码随想录\",\"pre 指向虚拟节点，cur 指向头节点\",\"在每一次移动过程中，修改节点指向\"]},\"174\":{\"h\":\"关键点\",\"t\":[\"先存储 next 引用 next=cur.next\",\"cur.next=pre\",\"pre=cur\",\"cur=next\"]},\"175\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode reverseList(ListNode head) { ListNode prev = null; // 前驱节点 null ListNode curr = head; // 当前节点 1 (1->2) while (curr != null) { ListNode next = curr.next; // 后驱节点 2 curr.next = prev; // 反向 1<-2 prev = curr; // prev = 1 curr = next; // curr = 2 } return prev; } }\",\"复杂度分析\",\"令 n 为链表长度。\",\"时间复杂度：O(n)\",\"空间复杂度：O(1)\"]},\"176\":{\"h\":\"思路2：递归\",\"t\":[\"递归函数的定义\",\"输出一个节点 head\",\"将 head 为起点的链表进行反转\",\"返回反转之后的头节点\"]},\"177\":{\"h\":\"关键点\",\"t\":[\"理解递归\",\"当第一次递归时，已经把链表分成后两部分\"]},\"178\":{\"h\":\"代码\",\"t\":[\"class Solution { public ListNode reverseList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode last = reverseList(head.next); head.next.next = head; head.next = null; return last; } }\",\"复杂度分析\",\"令 n 为链表长度。\",\"时间复杂度：O(n)\",\"空间复杂度：O(n)，空间复杂度主要取决于递归调用的栈空间，最多为 n 层。\"]},\"179\":{\"c\":[\"LeetCode\"]},\"180\":{\"c\":[\"链表\"]},\"181\":{\"h\":\"209-长度最小的子数组\"},\"182\":{\"h\":\"题目地址(209. 长度最小的子数组 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/minimum-size-subarray-sum/\"]},\"183\":{\"h\":\"题目描述\",\"t\":[\"给定一个含有 n个正整数的数组和一个正整数 target 。\",\"找出该数组中满足其总和大于等于target的长度最小的 \",\"子数组\",\"[numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。\",\"示例 1：\",\"输入：target = 7, nums = [2,3,1,2,4,3] 输出：2 解释：子数组 [4,3] 是该条件下的长度最小的子数组。 \",\"示例 2：\",\"输入：target = 4, nums = [1,4,4] 输出：1 \",\"示例 3：\",\"输入：target = 11, nums = [1,1,1,1,1,1,1,1] 输出：0 \",\"提示：\",\"1 <= target <= 109\",\"1 <= nums.length <= 105\",\"1 <= nums[i] <= 105\",\"进阶：\",\"如果你已经实现O(n) 时间复杂度的解法, 请尝试设计一个 O(n log(n)) 时间复杂度的解法。\"]},\"184\":{\"h\":\"前置知识\",\"t\":[\"滑动窗口\",\"[前缀和+二分查找]\"]},\"185\":{\"h\":\"思路1：滑动窗口\",\"t\":[\"定义两个指针 start 和 end 分别指向滑动窗口的开始位置和结束位置\",\"计算滑动窗口的总和 sum\",\"当 sum 符合题目时，窗口的长度为子数组的最小长度 end−start+1\",\"将 start 继续往右移，找到更小的窗口长度\",\"继续更新子数组的最小长度\"]},\"186\":{\"h\":\"关键点\",\"t\":[\"当窗口符合条件时，要将 start 继续往右移，找到更小的窗口长度\"]},\"187\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class Solution { public int minSubArrayLen(int target, int[] nums) { // 第一次符合条件为窗口长度 right - left // int n = nums.length; if(n == 0) return 0; int ans = Integer.MAX_VALUE; int start = 0, end = 0; // 滑动串口的指针和右指针 int sum = 0; while (end < n) { sum += nums[end]; // 把当前元素添加进去,直到符合最小窗口的长度 while (sum >= target) { // 最小窗口长度右移，直到不满足 此时，ans = end - start + 1， end - start ans = Math.min(ans, end - start + 1); sum -= nums[start]; start++; } end++; } return ans == Integer.MAX_VALUE ? 0 : ans; } }\",\"复杂度分析\",\"令 n 为数组长度。\",\"时间复杂度：O(n)\",\"空间复杂度：O(1)\"]},\"188\":{\"c\":[\"LeetCode\"]},\"189\":{\"h\":\"225-用队列实现栈\"},\"190\":{\"h\":\"题目地址(225. 用队列实现栈 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/implement-stack-using-queues/description/\"]},\"191\":{\"h\":\"题目描述\",\"t\":[\" 请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（ push 、 top 、 pop 和 empty ）。\",\" 实现 MyStack 类：\",\" void push(int x) 将元素 x 压入栈顶。\",\" int pop() 移除并返回栈顶元素。\",\" int top() 返回栈顶元素。\",\" boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。\",\" 注意：\",\" 你只能使用队列的标准操作 —— 也就是 push to back 、 peek/pop from front 、 size 和 is empty 这些操作。\",\" 你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。\",\" 示例：\",\" 输入： [\\\"MyStack\\\", \\\"push\\\", \\\"push\\\", \\\"top\\\", \\\"pop\\\", \\\"empty\\\"] [[], [1], [2], [], [], []] 输出： [null, null, null, 2, 2, false] 解释： MyStack myStack = new MyStack(); myStack.push(1); myStack.push(2); myStack.top(); // 返回 2 myStack.pop(); // 返回 2 myStack.empty(); // 返回 False \",\" 提示：\",\" 1 <= x <= 9 \",\" 最多调用 100 次 push 、 pop 、 top 和 empty \",\" 每次调用 pop 和 top 都保证栈不为空 \",\" 进阶： 你能否仅用一个队列来实现栈。\"]},\"192\":{\"h\":\"前置知识\",\"t\":[\"栈\",\"队列\"]},\"193\":{\"h\":\"思路\",\"t\":[\"队列是先进先出\",\"栈是后进先出。\",\"使用两个队列，一个当成主要的，一个辅助备份。\"]},\"194\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class MyStack { //q1 作为主要的队列，其元素排列顺序和出栈顺序相同 Queue<Integer> q1 = new ArrayDeque<>(); //q2 仅作为临时放置 Queue<Integer> q2 = new ArrayDeque<>(); public MyStack() { } //在加入元素时先将 q1 中的元素依次出栈压入 q2，然后将新加入的元素压入 q1，再将 q2 中的元素依次出栈压入 q1 public void push(int x) { while (q1.size() > 0) { q2.offer(q1.poll()); } q1.offer(x); while (q2.size() > 0) { q1.offer(q2.poll()); } } public int pop() { return q1.poll(); } public int top() { return q1.peek(); } public boolean empty() { return q1.isEmpty(); } }\",\"复杂度分析\",\"令 n 为栈内元素个数。\",\"时间复杂度：O(n), push 操作为 2n+1 个，pop 操作为 O(1), top 操作为 O(1)，empty 操作为 O(1)\",\"空间复杂度：O(n), 其中 n 是栈内的元素个数。需要使用两个队列存储栈内的元素。\"]},\"195\":{\"c\":[\"LeetCode\"]},\"196\":{\"c\":[\"列队\",\"栈\"]},\"197\":{\"h\":\"226-翻转二叉树\"},\"198\":{\"h\":\"题目地址(226. 翻转二叉树 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/invert-binary-tree/description/\"]},\"199\":{\"h\":\"题目描述\",\"t\":[\" 给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。\",\" 示例 1：\",\" 输入： root = [4,2,7,1,3,6,9] 输出： [4,7,2,9,6,3,1] \",\" 示例 2：\",\" 输入： root = [2,1,3] 输出： [2,3,1] \",\" 示例 3：\",\" 输入： root = [] 输出： [] \",\" 提示：\",\" 树中节点数目范围在 [0, 100] 内 \",\"-100 <= Node.val <= 100 ## 思路 1：递归 \",\"所谓的翻转就是将二叉树上的每个节点的「左右子节点交换」\",\"递归函数定义：\",\"终止条件：当节点 root 为空时，直接返回 null;\",\"单层递归逻辑： \",\"暂存节点 root 的左子节点（因为左子节点在翻转后会发生变化）\",\"递归翻转 root 的右子节点，递归的结果就是 root 的新左子节点\",\"递归翻转 root 的左子节点（旧），递归的结果就是 root 的新右子节点\",\"返回值： root\"]},\"200\":{\"h\":\"关键点\",\"t\":[\"翻转二叉树是改变树，而不是单纯的输出树节点，所以不能通过「层序遍历」方法输出\",\"在翻转后子节点会发生变化。不要用\"]},\"201\":{\"h\":\"代码\",\"t\":[\" /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode invertTree(TreeNode root) { // 1. 终止条件：当节点为空时，返回 null // 2. 参数及返回值：root，root // 3. 单层递归逻辑：交换左右子树 if(root ==null) return root; TreeNode temp = root.left; root.left = invertTree(root.right); // 处理右子树后，就是根节点的左子树（左子树已经发生变化） root.right = invertTree(temp); // 处理左子树，处理后变成根节点的右子树（不能使用 root.left） return root; } }\",\"复杂度分析\",\"令 n 为二叉树节点个数。\",\"时间复杂度：O(n)，需要遍历树的所有节点\",\"空间复杂度：O(n)，最差情况下，二叉树退化为链表，需要开辟 O(n) 的栈空间来递归\"]},\"202\":{\"h\":\"思路 2：层序遍历\",\"t\":[\"使用一个队列存储每一层的遍历结果，并交换节点的左右子节点\",\"提前将 root 节点入队\",\"循环遍历，当队列为空时，退出循环 \",\"出队节点 node\",\"将 node 的左右节点进行入队\",\"交换 node 的左右子节点\",\"第一次循环后的情况如下：\"]},\"203\":{\"h\":\"代码\",\"t\":[\"/** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode invertTree(TreeNode root) { // 层序遍历 if(root == null) return root; Deque<TreeNode> deque = new ArrayDeque<>(); deque.offerLast(root); while(!deque.isEmpty()){ TreeNode node = deque.pollFirst(); if(node.left != null){ deque.offerLast(node.left); } if(node.right != null){ deque.offerLast(node.right); } swapLeftRight(node); } return root; } public void swapLeftRight(TreeNode root){ TreeNode temp = root.left; root.left = root.right; root.right = temp; } }\",\"复杂度分析\",\"令 n 为二叉树节点个数。\",\"时间复杂度：O(n)，需要遍历树的所有节点\",\"空间复杂度：O(n)，最差情况下，队列最多同时存储 (N+1)/2 个节点，占用 O(N) 额外空间。\"]},\"204\":{\"c\":[\"Leetcode\"]},\"205\":{\"c\":[\"二叉树\"]},\"206\":{\"h\":\"232-用栈实现队列\"},\"207\":{\"h\":\"题目地址(232. 用栈实现队列 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/implement-queue-using-stacks/description/\"]},\"208\":{\"h\":\"题目描述\",\"t\":[\" 请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（ push 、 pop 、 peek 、 empty ）：\",\" 实现 MyQueue 类：\",\" void push(int x) 将元素 x 推到队列的末尾 \",\" int pop() 从队列的开头移除并返回元素 \",\" int peek() 返回队列开头的元素 \",\" boolean empty() 如果队列为空，返回 true ；否则，返回 false \",\" 说明：\",\" 你 只能 使用标准的栈操作 —— 也就是只有 push to top , peek/pop from top , size , 和 is empty 操作是合法的。\",\" 你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。\",\" 示例 1：\",\" 输入： [\\\"MyQueue\\\", \\\"push\\\", \\\"push\\\", \\\"peek\\\", \\\"pop\\\", \\\"empty\\\"] [[], [1], [2], [], [], []] 输出： [null, null, null, 1, 1, false] 解释： MyQueue myQueue = new MyQueue(); myQueue.push(1); // queue is: [1] myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue) myQueue.peek(); // return 1 myQueue.pop(); // return 1, queue is [2] myQueue.empty(); // return false \",\" 提示：\",\" 1 <= x <= 9 \",\" 最多调用 100 次 push 、 pop 、 peek 和 empty \",\" 假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）\",\" 进阶：\",\" 你能否实现每个操作均摊时间复杂度为 O(1) 的队列？换句话说，执行 n 个操作的总时间复杂度为 O(n) ，即使其中一个操作可能花费较长时间。\"]},\"209\":{\"h\":\"前置知识\",\"t\":[\"队列\"]},\"210\":{\"h\":\"思路\",\"t\":[\"用一个队列存放 push 元素，用一个队列存放 pop 元素。在 pop 或 peek 时，需要将元素从 in 放进 out 中进行。\"]},\"211\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class MyQueue { Deque<Integer> out, in; public MyQueue() { in = new ArrayDeque<Integer>(); out = new ArrayDeque<Integer>(); } public void push(int x) { in.push(x); } public int pop() { if (out.isEmpty()) { in2out(); } return out.pop(); } public int peek() { if (out.isEmpty()) { in2out(); } return out.peek(); } public boolean empty() { return in.isEmpty() && out.isEmpty(); } private void in2out() { while (!in.isEmpty()) { out.push(in.pop()); } } } /** * Your MyQueue object will be instantiated and called as such: * MyQueue obj = new MyQueue(); * obj.push(x); * int param_2 = obj.pop(); * int param_3 = obj.peek(); * boolean param_4 = obj.empty(); */\",\"复杂度分析\",\"令 n 为操作数。\",\"时间复杂度：O(1), push 和 empty 操作都是 O(1), pop 和 peek 为均摊 O(1)。\",\"空间复杂度：O(n)，对于有 n 次 push 操作的情况，队列中会有 n 个元素，故空间复杂度为 O(n)。\"]},\"212\":{\"c\":[\"LeetCode\"]},\"213\":{\"c\":[\"栈\"]},\"214\":{\"h\":\"24-两两交换链表中的节点\"},\"215\":{\"h\":\"题目地址(24. 两两交换链表中的节点 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/swap-nodes-in-pairs/description/\"]},\"216\":{\"h\":\"题目描述\",\"t\":[\"给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。\",\"示例 1：\",\"输入：head = [1,2,3,4] 输出：[2,1,4,3] \",\"示例 2：\",\"输入：head = [] 输出：[] \",\"示例 3：\",\"输入：head = [1] 输出：[1] \",\"提示：\",\"链表中节点的数目在范围 [0, 100] 内\",\"0 <= Node.val <= 100\"]},\"217\":{\"h\":\"前置知识\",\"t\":[\"链表\"]},\"218\":{\"h\":\"思路1：虚拟头节点\",\"t\":[\"使用变量 cur 代表当前节点，初始化为 cur=dummy\",\"使用两个变量 first 和 second 待交换的节点，即 first=cur.next 和 second=cur.next.next\",\"当链表还剩下两个节点时，就可以进行更改链表节点的交换\",\"cur.next = secod\",\"first.next = second.next\",\"second.next = first\",\"cur = first\",\"进行下一轮的判断并且交换\"]},\"219\":{\"h\":\"关键点\",\"t\":[\"循环条件是当前链表还有2个以上的节点\",\"链表节点交换的指针变动\"]},\"220\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode swapPairs(ListNode head) { if (head == null || head.next == null) { return head; } ListNode dummy = new ListNode(0); // 设置一个虚拟头节点 dummy.next = head; // 将虚拟头结点指向head,这样方便后续做删除操作 ListNode cur = dummy; while (cur.next != null && cur.next.next != null) { ListNode first = cur.next; ListNode second = cur.next.next; cur.next = second; // 步骤一 first.next = second.next; // 步骤三 second.next = first; // 步骤二 cur = first; } return dummy.next; } }\",\"复杂度分析\",\"令 n 为链表长度。\",\"时间复杂度：O(n)\",\"空间复杂度：O(1)\"]},\"221\":{\"c\":[\"LeetCode\"]},\"222\":{\"h\":\"242-有效的字母异位词\"},\"223\":{\"h\":\"题目地址(242. 有效的字母异位词 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/valid-anagram/description/\"]},\"224\":{\"h\":\"题目描述\",\"t\":[\" 给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。\",\" 注意： 若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。\",\" 示例 1: \",\" 输入: s = \\\"anagram\\\", t = \\\"nagaram\\\" 输出: true \",\" 示例 2: \",\" 输入: s = \\\"rat\\\", t = \\\"car\\\" 输出: false \",\" 提示: \",\" 1 <= s.length, t.length <= 5 * 10 4 \",\" s 和 t 仅包含小写字母 \",\" 进阶: 如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？\"]},\"225\":{\"h\":\"前置知识\",\"t\":[\"哈希表\"]},\"226\":{\"h\":\"思路：哈希表记录\",\"t\":[\"若 s、t 长度不相等，则「非字母异位词」\",\"若 s、t 某对应字母数量不同，则「非字母异位词」\",\"统计 s 各字符时执行 +1 ，统计 t 各字符时 −1 。若两字符串互为字母异位词，则最终哈希表中所有字符统计数值都应为 0 。\"]},\"227\":{\"h\":\"关键点\",\"t\":[\"使用哈希表进行记录不同字母出现的次数\",\"也可以使用长度固定的数组记录不同字母出现的次数\"]},\"228\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class Solution { public boolean isAnagram(String s, String t) { // 先判断长度一致 if (s.length() != t.length()) { return false; } // 使用字母的特性：只有 26 个，以一个数组来记录 int[] table = new int[26]; for (int i = 0; i < s.length(); i++) { table[s.charAt(i) - 'a']++; table[t.charAt(i) - 'a']--; } for (int i = 0; i < 26; i++) { if (table[i] != 0) { return false; } } return true; } }\",\"复杂度分析\",\"令 n 为数组长度。\",\"时间复杂度：O(n)\",\"空间复杂度：O(1)，数组长度为常数，因此空间复杂度为常数\"]},\"229\":{\"c\":[\"LeetCode\"]},\"230\":{\"c\":[\"哈希表\"]},\"231\":{\"h\":\"27-移除元素\"},\"232\":{\"h\":\"题目地址(27. 移除元素 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/remove-element/\"]},\"233\":{\"h\":\"题目描述\",\"t\":[\" 给你一个数组 nums 和一个值 val ，你需要 原地 移除所有数值等于 val 的元素。元素的顺序可能发生改变。然后返回 nums 中与 val 不同的元素的数量。\",\" 假设 nums 中不等于 val 的元素数量为 k ，要通过此题，您需要执行以下操作：\",\" 更改 nums 数组，使 nums 的前 k 个元素包含不等于 val 的元素。 nums 的其余元素和 nums 的大小并不重要。\",\" 返回 k 。\",\" 用户评测：\",\" 评测机将使用以下代码测试您的解决方案：\",\"int [] nums = [...]; // 输入数组 int val = ...; // 要移除的值 int [] expectedNums = [...]; // 长度正确的预期答案。 // 它以不等于 val 的值排序。 int k = removeElement(nums, val); // 调用你的实现 assert k == expectedNums.length; sort(nums, 0, k); // 排序 nums 的前 k 个元素 for (int i = 0; i < actualLength; i++) { assert nums [i] == expectedNums [i]; }\",\" 如果所有的断言都通过，你的解决方案将会 通过 。\",\" 示例 1：\",\" 输入： nums = [3,2,2,3], val = 3 输出： 2, nums = [2,2, _,_] 解释： 你的函数函数应该返回 k = 2, 并且 nums 中的前两个元素均为 2。 你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。\",\" 示例 2：\",\" 输入： nums = [0,1,2,2,3,0,4,2], val = 2 输出： 5, nums = [0,1,4,0,3, _,_,_] 解释： 你的函数应该返回 k = 5，并且 nums 中的前五个元素为 0,0,1,3,4。 注意这五个元素可以任意顺序返回。 你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。 \",\" 提示：\",\" 0 <= nums.length <= 100 \",\" 0 <= nums [i] <= 50 \",\" 0 <= val <= 100 \"]},\"234\":{\"h\":\"前置知识\",\"t\":[\"数组\"]},\"235\":{\"h\":\"思路 1\",\"t\":[\"题意：\",\"原地-》空间复杂度为 O(1)\",\"前 K 个元素不等于 val\",\"遍历数组 nums，每次取出的数字变量为 num，同时设置一个下标 ans\",\"在遍历过程中如果出现数字与需要移除的值 不相同 时，则进行拷贝覆盖 nums[ans]=num，ans 自增 1\",\"如果相同的时候，则跳过该数字不进行拷贝覆盖，最后 ans 即为新的数组长度\"]},\"236\":{\"h\":\"关键点\",\"t\":[\"拷贝覆盖\"]},\"237\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class Solution { public int removeElement(int[] nums, int val) { int ans = 0; for (int num : nums) { if (num != val) { nums[ans] = num; ans++; } } return ans; } }\",\"复杂度分析\",\"令 n 为数组长度。\",\"时间复杂度：O(n)\",\"空间复杂度：O(1)\"]},\"238\":{\"c\":[\"LeetCode\"]},\"239\":{\"c\":[\"数组\"]},\"240\":{\"h\":\"344-反转字符串\"},\"241\":{\"h\":\"题目地址(344. 反转字符串 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/reverse-string/\"]},\"242\":{\"h\":\"题目描述\",\"t\":[\" 编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。\",\" 不要给另外的数组分配额外的空间，你必须 原地 修改输入数组 、使用 O(1) 的额外空间解决这一问题。\",\" 示例 1：\",\" 输入： s = [\\\"h\\\", \\\"e\\\", \\\"l\\\", \\\"l\\\", \\\"o\\\"] 输出： [\\\"o\\\", \\\"l\\\", \\\"l\\\", \\\"e\\\", \\\"h\\\"] \",\" 示例 2：\",\" 输入： s = [\\\"H\\\", \\\"a\\\", \\\"n\\\", \\\"n\\\", \\\"a\\\", \\\"h\\\"] 输出： [\\\"h\\\", \\\"a\\\", \\\"n\\\", \\\"n\\\", \\\"a\\\", \\\"H\\\"] \",\" 提示：\",\" 1 <= s.length <= 10 5 \",\" s [i] 都是 ASCII 码表中的可打印字符 \"]},\"243\":{\"h\":\"前置知识\",\"t\":[\"字符串\",\"双指针\"]},\"244\":{\"h\":\"思路\",\"t\":[\"使用两个指针 l, r 分别指向字符数组首元素，字符数组尾元素。\",\"当 l < r 时，交换 l 和 r 指向的元素。\",\"当 l == r 时，就表示反转结束。\"]},\"245\":{\"h\":\"关键点\",\"t\":[\"s[i] 与 s[n-1-i] 交换\"]},\"246\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class Solution { public void reverseString(char[] s) { //O(1) int left = 0; int right = s.length - 1; while(left < right){ char temp = s[left]; s[left] = s[right]; s[right] = temp; left++; right--; } } }\",\"复杂度分析\",\"令 n 为数组长度。\",\"时间复杂度：O(n), 一共执行了 n/2 次交换。\",\"空间复杂度：O(1)，两个指针，常数的空间。\"]},\"247\":{\"c\":[\"LeetCode\"]},\"248\":{\"c\":[\"字符串\"]},\"249\":{\"h\":\"349-两个数组的交集\"},\"250\":{\"h\":\"题目地址(349. 两个数组的交集 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/intersection-of-two-arrays/\"]},\"251\":{\"h\":\"题目描述\",\"t\":[\"给定两个数组 nums1 和 nums2 ，返回 它们的 \",\"交集\",\" 。输出结果中的每个元素一定是 唯一 的。我们可以 不考虑输出结果的顺序 。\",\"示例 1：\",\"输入：nums1 = [1,2,2,1], nums2 = [2,2] 输出：[2] \",\"示例 2：\",\"输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4] 输出：[9,4] 解释：[4,9] 也是可通过的 \",\"提示：\",\"1 <= nums1.length, nums2.length <= 1000\",\"0 <= nums1[i], nums2[i] <= 1000\"]},\"252\":{\"h\":\"前置知识\"},\"253\":{\"h\":\"公司\",\"t\":[\"暂无\"]},\"254\":{\"h\":\"思路\"},\"255\":{\"h\":\"关键点\"},\"256\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class Solution { public int[] intersection(int[] nums1, int[] nums2) { int[] hash1 = new int[1002]; int[] hash2 = new int[1002]; // 计数 for(int i : nums1) hash1[i]++; for(int i : nums2) hash2[i]++; List<Integer> resList = new ArrayList<>(); // 寻找交集元素 for(int i = 0; i < 1002; i++) if(hash1[i] > 0 && hash2[i] > 0) resList.add(i); // 转换成数组 int index = 0; int res[] = new int[resList.size()]; for(int i : resList) res[index++] = i; return res; } }\",\"复杂度分析\",\"令 n 为nums1数组长度,m为nums2数组长度。\",\"时间复杂度：O(m+n),使用两个集合分别存储两个数组中的元素需要 O(m+n) 的时间\",\"空间复杂度：O(m+n)，两个存储数组都是固定长度。\"]},\"257\":{\"c\":[\"LeetCode\"]},\"258\":{\"c\":[\"哈希表\",\"数组\"]},\"259\":{\"h\":\"383-赎金信\"},\"260\":{\"h\":\"题目地址(383. 赎金信 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/ransom-note/description/\"]},\"261\":{\"h\":\"题目描述\",\"t\":[\" 给你两个字符串： ransomNote 和 magazine ，判断 ransomNote 能不能由 magazine 里面的字符构成。\",\" 如果可以，返回 true ；否则返回 false 。\",\" magazine 中的每个字符只能在 ransomNote 中使用一次。\",\" 示例 1：\",\" 输入： ransomNote = \\\"a\\\", magazine = \\\"b\\\" 输出： false \",\" 示例 2：\",\" 输入： ransomNote = \\\"aa\\\", magazine = \\\"ab\\\" 输出： false \",\" 示例 3：\",\" 输入： ransomNote = \\\"aa\\\", magazine = \\\"aab\\\" 输出： true \",\" 提示：\",\" 1 <= ransomNote.length, magazine.length <= 10 5 \",\" ransomNote 和 magazine 由小写英文字母组成 \"]},\"262\":{\"h\":\"前置知识\",\"t\":[\"哈希表\"]},\"263\":{\"h\":\"思路\",\"t\":[\"如果两个字符串的长度不相等，则不是正确答案。\",\"如果 ransomNote 存在 magazine 没有的字母，则不是正确答案。\",\"定义一个长度为 26 的数组存放 magazine 不同字母的个数。 \",\"记录 ransomNote 每个字符的情况\",\"如果某个字符数量检查情况中，出现数量 < 0，说明 ransomNote 针对该字母的数量比 magazine 多，也不是正确答案\"]},\"264\":{\"h\":\"关键点\",\"t\":[\"字母总数为 26 个\",\"哈希表计数或者数组计数\",\"同样的题目还有 242-有效的字母异位词\"]},\"265\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class Solution { public boolean canConstruct(String ransomNote, String magazine) { if (ransomNote.length() > magazine.length()) { return false; } int[] cnt = new int[26]; for (char c : magazine.toCharArray()) { cnt[c - 'a']++; } for (char c : ransomNote.toCharArray()) { cnt[c - 'a']--; if (cnt[c - 'a'] < 0) { return false; } } return true; } }\",\"复杂度分析\",\"令 n 为字符串长度。\",\"时间复杂度：O(n)，遍历字符串所需要的时间复杂度\",\"空间复杂度：O(S),定义存储的数组，固定长度，|S| <= 26;\"]},\"266\":{\"c\":[\"LeetCode\"]},\"267\":{\"c\":[\"哈希表\"]},\"268\":{\"h\":\"429-N 叉树的层序遍历\"},\"269\":{\"h\":\"题目地址(429. N 叉树的层序遍历 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/n-ary-tree-level-order-traversal/description/\"]},\"270\":{\"h\":\"题目描述\",\"t\":[\" 给定一个 N 叉树，返回其节点值的 层序遍历 。（即从左到右，逐层遍历）。\",\" 树的序列化输入是用层序遍历，每组子节点都由 null 值分隔（参见示例）。\",\" 示例 1：\",\" 输入： root = [1, null,3,2,4, null,5,6] 输出： [[1], [3,2,4], [5,6]] \",\" 示例 2：\",\" 输入： root = [1, null,2,3,4,5, null, null,6,7, null,8, null,9,10, null, null,11, null,12, null,13, null, null,14] 输出： [[1], [2,3,4,5], [6,7,8,9,10], [11,12,13], [14]] \",\" 提示：\",\" 树的高度不会超过 1000 \",\" 树的节点总数在 [0, 10 4 ] 之间 \"]},\"271\":{\"h\":\"前置知识\",\"t\":[\"树\",\"BFS: 广度优先搜索\",\"DFS: 深度优先搜索\"]},\"272\":{\"h\":\"思路 1：BFS\",\"t\":[\"将二叉树的层序遍历扩展到 N 叉树，本质上是不变的。\",\"在二叉树的时候，我们是单独处理 root.left 和 root.right。而对于 N 叉树，我们应该使用一个循环进行处理。\"]},\"273\":{\"h\":\"关键点\",\"t\":[\"以「层」为单位构建答案，因此在单次 BFS 过程中也按「层」进行。\"]},\"274\":{\"h\":\"代码 1：\",\"t\":[\"class Solution { public List<List<Integer>> levelOrder(Node root) { List<List<Integer>> ans = new ArrayList<>(); Deque<Node> d = new ArrayDeque<>(); if (root != null) d.addLast(root); while (!d.isEmpty()) { int size = d.size(); List<Integer> list = new ArrayList<>(); while (size-- > 0) { Node t = d.pollFirst(); for (Node node : t.children) d.addLast(node); list.add(t.val); } ans.add(list); } return ans; } }\",\"复杂度分析\",\"令 n 为树的节点个数。\",\"时间复杂度：O(n)，每个节点最多出队一次，入队一次。\",\"空间复杂度：O(n)，队列所需要用到的空间是 O(n)，最坏情况下，树只有两层，根节点和 n-1 个节点组成的第二层。\"]},\"275\":{\"h\":\"思路 2：DFS\",\"t\":[\"在深度优先搜索过程中，同层的节点不会连续被处理，但在处理的时候依然遵循「从左到右」。\",\"因此对于某个节点来说，会获取对应该层的答案，然后处理该节点。\"]},\"276\":{\"h\":\"代码\",\"t\":[\" class Solution { List<List<Integer>> ans = new ArrayList<>(); public List<List<Integer>> levelOrder(Node root) { if (root == null) return ans; dfs(root, 0); return ans; } void dfs(Node u, int depth) { if (ans.size() == depth) ans.add(new ArrayList<>()); List<Integer> list = ans.get(depth); list.add(u.val); for (Node node : u.children) dfs(node, depth + 1); } }\",\"复杂度分析\",\"令 n 为树的节点个数。\",\"时间复杂度：O(n)，每个节点最多出队一次，入队一次。\",\"空间复杂度：O(h)，h为树的高度，最坏情况，树退化成链表，此时树的高度与节点个数一样。\"]},\"277\":{\"c\":[\"LeetCode\"]},\"278\":{\"c\":[\"树\",\"BFS\",\"DFS\"]},\"279\":{\"h\":\"454-四数相加 ii\"},\"280\":{\"h\":\"题目地址(454. 四数相加 II - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/4sum-ii/description/\"]},\"281\":{\"h\":\"题目描述\",\"t\":[\" 给你四个整数数组 nums1 、 nums2 、 nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足：\",\" 0 <= i, j, k, l < n \",\" nums1 [i] + nums2 [j] + nums3 [k] + nums4 [l] == 0 \",\" 示例 1：\",\" 输入： nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2] 输出： 2 解释： 两个元组如下： 1. (0, 0, 0, 1) -> nums1 [0] + nums2 [0] + nums3 [0] + nums4 [1] = 1 + (-2) + (-1) + 2 = 0 2. (1, 1, 0, 0) -> nums1 [1] + nums2 [1] + nums3 [0] + nums4 [0] = 2 + (-1) + (-1) + 0 = 0 \",\" 示例 2：\",\" 输入： nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0] 输出： 1 \",\" 提示：\",\" n == nums1.length \",\" n == nums2.length \",\" n == nums3.length \",\" n == nums4.length \",\" 1 <= n <= 200 \",\"-2 28 <= nums1 [i], nums2 [i], nums3 [i], nums4 [i] <= 2 28 \"]},\"282\":{\"h\":\"前置知识\",\"t\":[\"两数之和思路\"]},\"283\":{\"h\":\"思路\",\"t\":[\"使用一个哈希表map存储 A 和 B 所有和sumAB的情况，其中 key 是和，value是和出现的次数\",\"使用同样的遍历方式，遍历 C + D，找到map是否存在 −(sumCD)。\",\"将 −(sumCD) 对应的值累加起来，就是答案。\"]},\"284\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class Solution { public int fourSumCount(int[] A, int[] B, int[] C, int[] D) { Map<Integer, Integer> countAB = new HashMap<Integer, Integer>(); for (int u : A) { for (int v : B) { countAB.put(u + v, countAB.getOrDefault(u + v, 0) + 1); } } int ans = 0; for (int u : C) { for (int v : D) { if (countAB.containsKey(-u - v)) { ans += countAB.get(-u - v); } } } return ans; } }\",\"复杂度分析\",\"令 n 为数组长度。\",\"时间复杂度：O(n2)：使用双重循环进行遍历求和，其中哈希表操作都是 O(1)\",\"空间复杂度：O(n2)：哈希表所用的空间，最坏情况下，A 和 B 数组中每个元素之和都不相同。\"]},\"285\":{\"c\":[\"LeetCode\"]},\"286\":{\"c\":[\"哈希表\",\"数组\"]},\"287\":{\"h\":\"515-在每个树行中找最大值\"},\"288\":{\"h\":\"题目地址(515. 在每个树行中找最大值 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/find-largest-value-in-each-tree-row/description/\"]},\"289\":{\"h\":\"题目描述\",\"t\":[\" 给定一棵二叉树的根节点 root ，请找出该二叉树中每一层的最大值。\",\" 示例 1：\",\" 输入: root = [1,3,2,5,3, null,9] 输出: [1,3,9] \",\" 示例 2：\",\" 输入: root = [1,2,3] 输出: [1,3] \",\" 提示：\",\" 二叉树的节点个数的范围是 [0,10 4 ] \",\"-2 31 <= Node.val <= 2 31 - 1 \"]},\"290\":{\"h\":\"前置知识\",\"t\":[\"二叉树\",\"BFS\",\"DFS\"]},\"291\":{\"h\":\"思路 1：DFS\",\"t\":[\"在进行 DFS 的过程中，如果当前节点是新的一层，默认该节点是该层的最大值。\",\"等到再 DFS 到同层节点时，就将同层节点与最大值进行比较。\"]},\"292\":{\"h\":\"关键点\",\"t\":[\"数组可以通过索引的方式进行重新设置值。\"]},\"293\":{\"h\":\"代码\",\"t\":[\"class Solution { List<Integer> res = new ArrayList<>(); public List<Integer> largestValues(TreeNode root) { if(root == null) return res; dfs(root, 0); return res; } public void dfs(TreeNode root, int depth){ if(root == null) return; if(res.size() == depth){ res.add(root.val); }else{ res.set(depth,Math.max(res.get(depth),root.val)); } if (root.left != null) { dfs(root.left, depth + 1); } if (root.right != null) { dfs(root.right, depth + 1); } } }\",\"复杂度分析\",\"令 n 为二叉树节点个数。\",\"时间复杂度：O(n), 其中 n 为二叉树节点个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次。\",\"空间复杂度：O(h), 其中 h 表示树的高度。递归函数需要栈空间，递归深度等价于二叉树的高度。最坏情况下，树退化成一个链表，此时 h=n。\"]},\"294\":{\"h\":\"思路 2：BFS\",\"t\":[\"使用 BFS 进行层序遍历，每次的 BFS 都会将该层所有节点入队，在出队的时候，维护该层的最大值，并将其加入答案中。\"]},\"295\":{\"h\":\"代码\",\"t\":[\"class Solution { public List<Integer> largestValues(TreeNode root) { List<Integer> res = new ArrayList<>(); if(root == null) return res; Deque<TreeNode> queue = new ArrayDeque<>(); queue.addLast(root); while(!queue.isEmpty()){ int levelSize = queue.size(); int max = Integer.MIN_VALUE; for(int i = 0;i<levelSize;i++){ TreeNode node = queue.pollFirst(); if(node.left != null){ queue.addLast(node.left); } if(node.right != null){ queue.addLast(node.right); } max = Math.max(max,node.val); } res.add(max); } return res; } }\",\"复杂度分析\",\"令 n 为二叉树节点个数。\",\"时间复杂度：O(n), 其中 n 为二叉树节点个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次。\",\"空间复杂度：O(n), 队列所需要的空间最多不超过 n 个节点的存放。\"]},\"296\":{\"c\":[\"LeetCode\"]},\"297\":{\"c\":[\"二叉树\",\"BFS\",\"DFS\"]},\"298\":{\"h\":\"541-反转字符串 ii\"},\"299\":{\"h\":\"题目地址(541. 反转字符串 II - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/reverse-string-ii/description/\"]},\"300\":{\"h\":\"题目描述\",\"t\":[\" 给定一个字符串 s 和一个整数 k ，从字符串开头算起，每计数至 2k 个字符，就反转这 2k 字符中的前 k 个字符。\",\" 如果剩余字符少于 k 个，则将剩余字符全部反转。\",\" 如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。\",\" 示例 1：\",\" 输入： s = \\\"abcdefg\\\", k = 2 输出： \\\"bacdfeg\\\" \",\" 示例 2：\",\" 输入： s = \\\"abcd\\\", k = 2 输出： \\\"bacd\\\" \",\" 提示：\",\" 1 <= s.length <= 10 4 \",\" s 仅由小写英文组成 \",\" 1 <= k <= 10 4 \"]},\"301\":{\"h\":\"前置知识\",\"t\":[\"字符串\",\"双指针\"]},\"302\":{\"h\":\"思路\",\"t\":[\"使用 left 和 right 两个指针分别指向待反转的范围。\",\"每次翻转完，要更新 left 和 right 的范围。\",\"l = l + 2 * k\",\"r = l + k - 1\",\"指向下一个 2k 范围，然后再进行反转。\"]},\"303\":{\"h\":\"关键点\",\"t\":[\"双指针移动的更新\",\"最后一次翻转，r 有可能越界，因为要取 Math.min(r,n-1)\"]},\"304\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class Solution { public String reverseStr(String s, int k) { char[] cs = s.toCharArray(); int n = s.length(); // l 和 r 分别指向待反转的范围 // 更新 l 和 r 要注意 不足 k 的情况。 // r 可能会 > n-1，此时应该是最后一次，而 l 还是会在索引范围内， // 极端的情况是 l = n-1，此时不需要翻转。 for (int l = 0; l < n; l = l + 2 * k) { int r = l + k - 1; reverse(cs, l, Math.min(r, n - 1)); } return String.valueOf(cs); } void reverse(char[] cs, int l, int r) { while (l < r) { char c = cs[l]; cs[l] = cs[r]; cs[r] = c; l++; r--; } } }\",\"复杂度分析\",\"令 n 为字符串长度。\",\"时间复杂度：O(n)。遍历的长度为字符串长度n。\",\"空间复杂度：O(n),因为Java语言不需要申请长度为n的数组来存储字符。\"]},\"305\":{\"c\":[\"LeetCode\"]},\"306\":{\"c\":[\"字符串\",\"双指针\"]},\"307\":{\"h\":\"59-螺旋矩阵 II\"},\"308\":{\"h\":\"题目地址(59. 螺旋矩阵 II - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/spiral-matrix-ii/\"]},\"309\":{\"h\":\"题目描述\",\"t\":[\" 给你一个正整数 n ，生成一个包含 1 到 n 2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。\",\" 示例 1：\",\" 输入： n = 3 输出： [[1,2,3], [8,9,4], [7,6,5]] \",\" 示例 2：\",\" 输入： n = 1 输出： [[1]] \",\" 提示：\",\" 1 <= n <= 20 \"]},\"310\":{\"h\":\"前置知识\",\"t\":[\"数组\",\"模拟\"]},\"311\":{\"h\":\"思路\",\"t\":[\"定义好上下左右四个边界 top, bottom, left, right\",\"按照题目进行模拟，从左到右（上边界缩减），从上到下（右边界缩减），从右到左（下边界缩减），从下到上（下边界缩减）\",\"使用 num<=tar 而不是 l<r∣∣t<b 作为迭代条件，是为了解决当 n 为奇数时，矩阵中心数字无法在迭代过程中被填充的问题。 \",\"当 n = 3 时，填充到8时，此时 top==bottom ，就会导致退出循环，中心数字无法在迭代过程中被填充。\"]},\"312\":{\"h\":\"关键点\",\"t\":[\"边界变化条件\",\"循环终止条件\"]},\"313\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class Solution { public int[][] generateMatrix(int n) { int left = 0, right = n-1, top = 0, bottom = n-1; int count = 1, target = n * n; int[][] res = new int[n][n]; //for循环中变量定义成i或j的细节：按照通常的思维，i代表行，j代表列 //这样，就可以很容易区分出来变化的量应该放在[][]的第一个还是第二个 //对于变量的边界怎么定义： //从左向右填充：填充的列肯定在[left,right]区间 //从上向下填充：填充的行肯定在[top,bottom]区间 //从右向左填充：填充的列肯定在[right,left]区间 //从下向上填充：填充的行肯定在[bootom,top]区间 //通过上面的总结会发现边界的起始和结束与方向是对应的 while(count <= target){ //从左到右填充，相当于缩小上边界 for(int j = left; j <= right; j++) res[top][j] = count++; //缩小上边界 top++; //从上向下填充，相当于缩小右边界 for(int i = top; i <=bottom; i++) res[i][right] = count++; //缩小右边界 right--; //从右向左填充，相当于缩小下边界 for(int j = right; j >= left; j--) res[bottom][j] = count++; //缩小下边界 bottom--; //从下向上填充，相当于缩小左边界 for(int i = bottom; i >= top; i--) res[i][left] = count++; //缩小左边界 left++; } return res; } }\",\"复杂度分析\",\"令 n 为数组长度。\",\"时间复杂度：O(n2)\",\"空间复杂度：O(1)\"]},\"314\":{\"c\":[\"LeetCode\"]},\"315\":{\"h\":\"704-二分查找\"},\"316\":{\"h\":\"题目地址(704. 二分查找 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/binary-search/\"]},\"317\":{\"h\":\"题目描述\",\"t\":[\" 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target ，如果目标值存在返回下标，否则返回 -1 。\",\" 示例 1: \",\" 输入: nums = [-1,0,3,5,9,12], target = 9 输出: 4 解释: 9 出现在 nums 中并且下标为 4 \",\" 示例 2: \",\" 输入: nums = [-1,0,3,5,9,12], target = 2 输出: -1 解释: 2 不存在 nums 中因此返回 -1 \",\" 提示：\",\" 你可以假设 nums 中的所有元素是不重复的。\",\" n 将在 [1, 10000] 之间。\",\" nums 的每个元素都将在 [-9999, 9999] 之间。\"]},\"318\":{\"h\":\"前置知识\",\"t\":[\"数组\"]},\"319\":{\"h\":\"思路\",\"t\":[\"区间定义\",\"当我们选择「左闭右开」的时候，我们可以 0 来定义左边界(left)，而以数组的长度来定义右边界(right)，因此右边界我们是判断不到的。\",\"循环终止条件\",\"在左闭右开的情况，区间不为空，也就意味着 right 至少大于等于 left 。如果超过了这个条件，循环就终止。\",\"判断条件\",\"nums[mid]==target ，mid 就是我们要得到的结果，直接返回\",\"nums[mid]<target，我们应往右边的区间继续寻找，注意 mid 的位置我们是可以取到的，因此我们更新左边界的时候，应该为 left=mid+1\",\"nums[mid]>target，我们应往左边的区间找，而 mid 的位置明显不是答案，但是我们选择的是左闭右开区间，而右开所指向的位置本身就不在我们的候选区间里，所以 right=mid，而不是 right=mid−1.\",\"如果 mid−1 的位置正好是答案，在左闭右开的情况是找不到这个位置的\"]},\"320\":{\"h\":\"关键点\",\"t\":[\"左右区间的闭合\",\"左右区间的比较\"]},\"321\":{\"h\":\"代码\",\"t\":[\"Java Code:\",\" class Solution { public int search(int[] nums, int target) { int left = 0; int right = nums.length; while (left < right){ int mid = (right + left) / 2; if(nums[mid] > target){ right = mid; }else if(nums[mid] < target) { left = mid +1 ; }else{ return mid; } } return -1; }\",\"复杂度分析\",\"令 n 为数组长度。\",\"时间复杂度：O(logn)\",\"空间复杂度：O(1)\"]},\"322\":{\"h\":\"思路改进\",\"t\":[\"在 nums[mid]<target 和 nums[mid]==target 是可以合并起来的。当区间长度为 1 时，剩下的就是答案，由于 nums [mid] 可能等于答案，因此我们不能跳过这个 mid 的位置\",\"public int search(int[] nums, int target) { int left = 0; int right = nums.length; while (left < right){ int mid = (right + left)/2; if(nums[mid] > target){ right = mid; }else{ left = mid; } } if(nums[l] == target){ return l; } return -1; }\"]},\"323\":{\"h\":\"左闭右必区间\",\"t\":[\"public int search(int[] nums, int target) { int left = 0; int right = nums.length - 1; while(left <= right){ // #1 int mid = (right + left) / 2; if(nums[mid] == target){ return mid; }else if(nums[mid] < target){ left = mid + 1; // #2 }else{ right = mid - 1; // #3 } } return -1; }\"]},\"324\":{\"c\":[\"LeetCode\"]},\"325\":{\"c\":[\"数组\",\"二分查找\"]},\"326\":{\"h\":\"707-设计链表\"},\"327\":{\"h\":\"题目地址(707. 设计链表 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/design-linked-list/description/\"]},\"328\":{\"h\":\"题目描述\",\"t\":[\" 你可以选择使用单链表或者双链表，设计并实现自己的链表。\",\" 单链表中的节点应该具备两个属性： val 和 next 。 val 是当前节点的值， next 是指向下一个节点的指针/引用。\",\" 如果是双向链表，则还需要属性 prev 以指示链表中的上一个节点。假设链表中的所有节点下标从 0 开始。\",\" 实现 MyLinkedList 类：\",\" MyLinkedList() 初始化 MyLinkedList 对象。\",\" int get(int index) 获取链表中下标为 index 的节点的值。如果下标无效，则返回 -1 。\",\" void addAtHead(int val) 将一个值为 val 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。\",\" void addAtTail(int val) 将一个值为 val 的节点追加到链表中作为链表的最后一个元素。\",\" void addAtIndex(int index, int val) 将一个值为 val 的节点插入到链表中下标为 index 的节点之前。如果 index 等于链表的长度，那么该节点会被追加到链表的末尾。如果 index 比长度更大，该节点将 不会插入 到链表中。\",\" void deleteAtIndex(int index) 如果下标有效，则删除链表中下标为 index 的节点。\",\" 示例：\",\" 输入 [\\\"MyLinkedList\\\", \\\"addAtHead\\\", \\\"addAtTail\\\", \\\"addAtIndex\\\", \\\"get\\\", \\\"deleteAtIndex\\\", \\\"get\\\"] [[], [1], [3], [1, 2], [1], [1], [1]] 输出 [null, null, null, null, 2, null, 3] 解释 MyLinkedList myLinkedList = new MyLinkedList(); myLinkedList.addAtHead(1); myLinkedList.addAtTail(3); myLinkedList.addAtIndex(1, 2); // 链表变为 1-> 2-> 3 myLinkedList.get(1); // 返回 2 myLinkedList.deleteAtIndex(1); // 现在，链表变为 1-> 3 myLinkedList.get(1); // 返回 3 \",\" 提示：\",\" 0 <= index, val <= 1000 \",\" 请不要使用内置的 LinkedList 库。\",\" 调用 get 、 addAtHead 、 addAtTail 、 addAtIndex 和 deleteAtIndex 的次数不超过 2000 。\"]},\"329\":{\"h\":\"前置知识\",\"t\":[\"链表结果\",\"链表基本操作\"]},\"330\":{\"h\":\"思路: 单链表实现\",\"t\":[\"内部定义一个 Node 对象当成链表中的节点\",\"由于需要根据索引来查找节点，因此提供查询节点的方法 getNode()\"]},\"331\":{\"h\":\"关键点\",\"t\":[\"插入/删除节点，需要同时更新 size\"]},\"332\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class MyLinkedList { // 单向链表 class Node { int val; Node next; public Node(int val) { this.val = val; } } Node _head = new Node(-1); int size = 0; public MyLinkedList() { _head.next = null; } public int get(int index) { Node ret = getNode(index); return ret == null ? -1 : ret.val; } public void addAtHead(int val) { Node newNode = new Node(val); newNode.next = _head.next; _head.next = newNode; size++; } public void addAtTail(int val) { Node newNode = new Node(val); newNode.next = null; if (size == 0) { _head.next = newNode; } else { // 头节点 Node head = _head.next; // 遍历找到最后一个节点 while (head.next != null) { head = head.next; } // 最后一个节点的后驱节点是新节点 head.next = newNode; } size++; } public void addAtIndex(int index, int val) { if (index > size) { return; } if (index == size) { addAtTail(val); return; } Node newNode = new Node(val); Node indexNode = getNode(index - 1); newNode.next = indexNode.next; indexNode.next = newNode; size++; } public void deleteAtIndex(int index) { if (index >= size) { return; } if (index == 0) { _head.next = _head.next.next; } else { Node indexPreNode = getNode(index - 1); indexPreNode.next = indexPreNode.next.next; } size--; } Node getNode(int index) { if (index >= size) { return null; } Node head = _head; for (int i = 0; i <= index; i++) { head = head.next; } return head; } } /** * Your MyLinkedList object will be instantiated and called as such: * MyLinkedList obj = new MyLinkedList(); * int param_1 = obj.get(index); * obj.addAtHead(val); * obj.addAtTail(val); * obj.addAtIndex(index, val); * obj.deleteAtIndex(index); */\",\"复杂度分析\",\"令 n 为链表长度。\",\"时间复杂度：初始化消耗 O(1)，get 消耗 O(index)，addAtHead 消耗 O(1)，addAtTail 消耗 O(n)\",\"空间复杂度：所有函数的单次调用空间复杂度均为 O(1)，总体空间复杂度为 O(n)，其中 n 为 addAtHead，addAtTail 和 addAtIndex 调用次数之和。\"]},\"333\":{\"h\":\"思路：双链表实现\",\"t\":[\"实现双向链表，即每个节点要存储本身的值，「后继节点」和「前驱节点」。除此之外，需要一个「哨兵节点」作为头节点 head 和一个「哨兵节点」作为尾节点 tail。\"]},\"334\":{\"h\":\"关键点\",\"t\":[\"在遍历过程过程，从前往后遍历（当索引小于链表长度的一半时）还是从后往前遍历来优化查找效率。\",\"遍历时，每移动一次就减小 index 的值，当 index 为 0 时，说明找到了目标节点并返回。如果遍历结束没有找到，则返回 null。\"]},\"335\":{\"h\":\"代码\",\"t\":[\"class MyLinkedList { class Node { Node prev, next; int val; Node (int _val) { val = _val; } } Node head = new Node(-1), tail = new Node(-1); int size = 0; public MyLinkedList() { head.next = tail; tail.prev = head; } public int get(int index) { Node node = getNode(index); return node == null ? -1 : node.val; } public void addAtHead(int val) { Node node = new Node(val); node.next = head.next; node.prev = head; head.next.prev = node; head.next = node; size++; } public void addAtTail(int val) { Node node = new Node(val); node.prev = tail.prev; node.next = tail; tail.prev.next = node; tail.prev = node; size++; } public void addAtIndex(int index, int val) { if (index > sz) return ; if (index <= 0) { addAtHead(val); } else if (index == sz) { addAtTail(val); } else { Node node = new Node(val), cur = getNode(index); node.next = cur; node.prev = cur.prev; cur.prev.next = node; cur.prev = node; size++; } } public void deleteAtIndex(int index) { Node cur = getNode(index); if (cur == null) return ; cur.next.prev = cur.prev; cur.prev.next = cur.next; size--; } Node getNode(int index) { boolean isLeft = index < size / 2; if (!isLeft) index = size - index - 1; Node cur = isLeft ? head.next : tail.prev; for (; cur != tail && cur != head; cur = isLeft ? cur.next : cur.prev) { if (index-- == 0) return cur; } return null; } }\",\"复杂度分析\",\"令 n 为链表长度。\",\"时间复杂度：初始化消耗 O(1)，get 消耗 O(index)，addAtHead 消耗 O(1)，addAtTail 消耗 O(1)，addAtIndex 消耗 O(index)。\",\"空间复杂度：所有函数单次调用的空间复杂度均为 O(1)，总体空间复杂度为 O(n)，其中 n 为 addAtHead，addAtTail 和 addAtIndex 调用次数之和。\"]},\"336\":{\"c\":[\"LeetCode\"]},\"337\":{\"c\":[\"链表\"]},\"338\":{\"h\":\"977-有序数组的平方\"},\"339\":{\"h\":\"题目地址(977. 有序数组的平方 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/squares-of-a-sorted-array/description/\"]},\"340\":{\"h\":\"题目描述\",\"t\":[\" 给你一个按 非递减顺序 排序的整数数组 nums ，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。\",\" 示例 1：\",\" 输入： nums = [-4,-1,0,3,10] 输出： [0,1,9,16,100] 解释： 平方后，数组变为 [16,1,0,9,100] 排序后，数组变为 [0,1,9,16,100] \",\" 示例 2：\",\" 输入： nums = [-7,-3,2,3,11] 输出： [4,9,9,49,121] \",\" 提示：\",\" 1 <= nums.length <= 10 4 \",\"-10 4 <= nums [i] <= 10 4 \",\" nums 已按 非递减顺序 排序 \",\" 进阶：\",\" 请你 设计时间复杂度为 O(n) 的算法解决本问题 \"]},\"341\":{\"h\":\"前置知识\",\"t\":[\"双指针\"]},\"342\":{\"h\":\"思路\",\"t\":[\"使用两个指针分别指向位置 0 和 n−1，每次比较两个指针对应的数，选择较大的那个逆序放入答案并移动指针。\"]},\"343\":{\"h\":\"关键点\",\"t\":[\"平方大小的比较 = 绝对值大小的比较\",\"双指针指向相等时，任意放一个进入结果数组即可。\"]},\"344\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" class Solution { public int[] sortedSquares(int[] nums) { // 非递减 // 在正数，越大，平方也就越大 // 在负数，越小，平方越大 // 采用双指针，头尾比较 int left = 0; int right = nums.length - 1; int[] ret = new int[nums.length]; int index = right; while (left < right) { // 当left == right时，退出循环 if (Math.abs(nums[left]) < Math.abs(nums[right])) { ret[index--] = nums[right] * nums[right]; right--; } else if (Math.abs(nums[left]) > Math.abs(nums[right])) { ret[index--] = nums[left]*nums[left]; left++; }else if(Math.abs(nums[left]) == Math.abs(nums[right])){ ret[index--] = nums[right]*nums[right]; right--; } } ret[index] = nums[left]*nums[left]; return ret; } }\",\"复杂度分析\",\"令 n 为数组长度。\",\"时间复杂度：O(n)\",\"空间复杂度：O(1)，除了存储答案的数组以外，我们只需要维护常量空间。\"]},\"345\":{\"c\":[\"LeetCode\"]},\"346\":{\"c\":[\"数组\",\"二分查找\"]},\"347\":{\"h\":\"LeetCode\"},\"348\":{\"h\":\"我们的目标是刷穿LeetCode\"},\"349\":{\"h\":\"哈希表基础理论\"},\"350\":{\"h\":\"哈希表是什么\",\"t\":[\"通过建立键 key 与值 value 之间的映射，实现高效的元素查询。就像每一个人的身份证对应一个人一样。\",\"数组\",\"链表\",\"哈希表\",\"查找元素\",\"O(1)\",\"O(n)\",\"O(1)\",\"添加元素\",\"O(n)\",\"O(1)\",\"O(1)\",\"删除元素\",\"O(n)\",\"O(1)\",\"O(1)\"]},\"351\":{\"h\":\"哈希函数\",\"t\":[\"通过某种算法将 value 映射到 key上。\",\"比如\",\"当我们使用数组实现哈希表时，会将所有的key能映射到数组上对应的索引，数组元素则是对应的value\",\"index = hash(key) % cap\",\"图片来自：hello-algo\"]},\"352\":{\"h\":\"哈希冲突\",\"t\":[\"理论上一定存在“多个输入对应相同输出”的情况，将这种情况视为“哈希冲突”。\"]},\"353\":{\"h\":\"拉链法\",\"t\":[\"冲突的位置存储在链表中。\"]},\"354\":{\"h\":\"线性探测法\",\"t\":[\"在冲突的地方继续往前查询，直到查询到不冲突，就放入对应的索引中。\"]},\"355\":{\"c\":[\"LeetCode\"]},\"356\":{\"c\":[\"哈希表\"]},\"357\":{\"h\":\"回溯算法理论基础\"},\"358\":{\"h\":\"是什么\",\"t\":[\"回溯算法（BackTracing）是一种搜索方法，简单理解是一种简单粗暴的试错搜索。\",\"回溯问题可以抽象为「树形」问题，递归向下处理和获取结果，递归向上撤销结果。\",\"回溯函数也就是递归函数，指的都是一个函数。\"]},\"359\":{\"h\":\"解决什么问题\",\"t\":[\"回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案。在一些问题上通过for循环暴力枚举是不可行的，但回溯却可以解决问题。\",\"回溯法，一般可以解决如下几种问题：\",\"组合问题：N个数里面按一定规则找出k个数的集合\",\"切割问题：一个字符串按一定规则有几种切割方式\",\"子集问题：一个N个数的集合里有多少符合条件的子集\",\"排列问题：N个数按一定规则全排列，有几种排列方式\",\"棋盘问题：N皇后，解数独等等\"]},\"360\":{\"h\":\"如何理解以及模板\",\"t\":[\"回溯法解决的问题都可以抽象为「树形结构」\",\"集合的大小就构成了树的宽度，递归的深度就构成了树的深度。\",\"回溯三要素\",\"函数返回值一般为void，参数根据情况而定\",\"终止条件\",\"搜索过程\",\"void backtracking(参数) { if (终止条件) { 存放结果; return; } for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) { 处理节点; backtracking(路径，选择列表); // 递归 回溯，撤销处理结果 } }\"]},\"361\":{\"c\":[\"leetcode\"]},\"362\":{\"c\":[\"回溯\"]},\"363\":{\"h\":\"数组总结篇\"},\"364\":{\"h\":\"什么是数组？\",\"t\":[\"数组是存放在「连续内存空间」上的「相同类型数据」的集合。\"]},\"365\":{\"h\":\"数组的特点\",\"t\":[\"索引从 0 开始\",\"内存地址是连续\",\"访问元素：O(1)\",\"插入和删除元素: O(n)\"]},\"366\":{\"h\":\"二分法\"},\"367\":{\"h\":\"二分查找模板 1\",\"t\":[\"public int binarySearch(int[] nums, int target){ int left = 0; int right = nums.length - 1; // 注意 1 while(left <= right){ // Prevent (left + right) overflow int mid = left + (right - left) / 2; if(nums[mid] == target){ return mid; } else if(nums[mid] < target) { left = mid + 1; // 注意 }else if(nums[mid] > target){ right = mid - 1; // 注意 } } // End Condition: left > right return -1; }\",\"初始化条件：left = 0, right = nums.length - 1 ，相当于闭区间 [left,right]，而这个区间就是我们的「搜索区间」\",\"循环停止条件：\",\"nums[mid] == target\",\"如果没有找到的情况下，「搜索区间」不存在。即 left > right => [right+1,right] ，区间不存在\",\" 如果非要用 while(left < right)，我该怎么办？\",\" //... while(left < right) { // ... } return nums [left] == target ? left : -1; \",\" 分析如下：\",\" 当退出循环时，存在 left == right ，不管是因为什么原因导致的， 左元素还是右元素最终有一个没做判断 \",\" left = mid + 1 ，所以才有 left == right 退出循环 \",\" right = mid - 1 ，所以才有 left == right 退出循环 \",\"向左查找，向右查找：在上面的「搜索区间」情况下，当 nums[mid] 查找不到时，此时 mid 已经被判断了。因此下次「搜索区间」应该是 [left,mid−1] 或者 [mid+1,right]\"]},\"368\":{\"h\":\"二分查找模版 2：找满足条件的最左侧的值\",\"t\":[\"int left_bound(int[] nums, int target) { if (nums.length == 0) return -1; int left = 0; int right = nums.length; // 注意 while (left < right) { // 注意 int mid = (left + right) / 2; if (nums[mid] == target) { right = mid; } else if (nums[mid] < target) { left = mid + 1; } else if (nums[mid] > target) { right = mid; // 注意 } } return left; }\",\"初始化条件：left = 0, right = nums.length ，每次循环的「搜索区间」是 [left, right) 左闭右开\",\"循环停止条件：left == right，[left,left) 区间为空，搜索停止。\",\"向左查找：nums[mid] > target，nums[mid] == target 都会改变 right 的值。其实相当于告诉我们 nums[mid]的值都在target的右侧。只有这样做，我们才能不断地 缩小「搜索区间」的上界right，在区间 [left, mid) 中继续搜索，即不断向左收缩，达到锁定左侧边界的目的。\",\"如果 target 在数组中，最后返回的结果 left 表示，数组中小于 target 的元素有 left 个，也可以表示 target 最左的下标为 left\",\"如果 target 不在数组中，假设一种极端情况\",\"[2,5,7,8] target = 1\",\"在循环过程中，left 一直保持不变，而 right 一直向左边靠近，最终 left == right 最后循环，最后返回 left = 0。\",\"含义是：数组中小于 1 的元素有 0 个。\",\"综上可以看出，函数的返回值（即 left 变量的值）取值区间是闭区间[0,nums.length]\",\"while (left < right) { //... } // target 比所有数都大 if (left == nums.length) return -1; // 类似之前算法的处理方式 return nums[left] == target ? left : -1; //if(left != nums.length && nums [left] == target){ //return left; //} //return -1;\"]},\"369\":{\"h\":\"二分查找模版 3：找满足条件的最右侧的值\",\"t\":[\"public int search(int[] nums,int target){ int left = 0; int right = nums.length; while(left < right){ int mid = left + (right - left) / 2; if (nums[mid] == target) { left = mid + 1; // 注意 } else if (nums[mid] < target) { left = mid + 1; } else if (nums[mid] > target) { right = mid; } } if(left != 0 && nums[left-1] == target){ return left - 1; } return -1; }\",\"当 nums[mid] == target 时，不要立即返回，而是 增大「搜索区间」的下界**left**，使得区间不断向右收缩，达到锁定右侧边界的目的。\",\"由于我们更新 left 是 left = mid + 1，那就出现一种情况，left = mid + 1 = right 越界退出循环。\",\"nums[left] 一定不等于 target，否则也不会导致 left = mid+ 1 的操作发生\",\"nums[left-1] 有可能是 target，所以要进行 后处理检查\"]},\"370\":{\"h\":\"双指针法\",\"t\":[\"双指针法（快慢指针法）：通过一个快指针和慢指针在一个 for 循环下完成两个 for 循环的工作。\"]},\"371\":{\"h\":\"滑动窗口\",\"t\":[\"根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将 O(n2) 的暴力解法降为 O(n)。\",\"最小/最大子数组问题\",\"字符串模式匹配问题\",\"固定长度的子数组/子字符串问题\",\"固定长度的子数组/子字符串问题\"]},\"372\":{\"h\":\"模拟行为\",\"t\":[\"模拟类的题目在数组中很常见，不涉及到什么算法，就是单纯的模拟。\",\"循环不变量原则，其实这也是写程序中的重要原则。\"]},\"373\":{\"c\":[\"LeetCode\"]},\"374\":{\"h\":\"栈理论基础篇\"},\"375\":{\"h\":\"理论\",\"t\":[\"堆栈是一种抽象数据类型，用作元素的集合，具有两个主要的操作；\",\"PUSH：将元素添加到集合\",\"POP：删除最近添加但尚未删除的元素\",\"栈是一种 LIFO（后进先出）的线性的数据结构，push 和 pop 操作只发生在结构的一端，称为栈顶。\",\"在 Java 中，Stack 类是很粗糙的，源码中推荐使用 ArrayDeque 去替代。\"]},\"376\":{\"h\":\"ArrayDeque\",\"t\":[\"基于数组实现的双端队列\",\"ArrayDeque 允许在其头部和尾部进行高效地添加和移除元素，它可以用作栈（LIFO，后进先出）\",\"当空间不足时，它会自动进行扩容操作，通常扩容后的容量是原容量的两倍\"]},\"377\":{\"h\":\"问题\",\"t\":[\"堆栈的使用场景？\",\"为什么不是用 Stack 类？\",\"ArrayDeque 是基于什么实现的？\",\"ArrayDeque 数据结构使用过程叙述。\",\"ArrayDeque 为什么要初始化2的n次幂个长度？\"]},\"378\":{\"c\":[\"LeetCode\"]},\"379\":{\"c\":[\"栈\"]},\"380\":{\"h\":\"树专题\"},\"381\":{\"h\":\"概念\",\"t\":[\"树结构的基本单位是节点。\",\"节点之间的链接，称为分支（branch）, 也可以称为边(edge)\",\"树结构的开端，称为根（root），或根结点。\",\"根节点之外的节点，称为子节点（child）。\",\"没有链接到其他子节点的节点，称为叶节点（leaf）。\",\"/* 二叉树节点类 */ class TreeNode { int val; // 节点值 TreeNode left; // 左子节点引用 TreeNode right; // 右子节点引用 TreeNode(int x) { val = x; } }\",\"节点所在的层（level）：从顶至底递增，根节点所在层为 1 。\",\"节点的度（degree）：节点的子节点的数量。在二叉树中，度的取值范围是 0、1、2 。\",\"二叉树的高度（height）：从根节点到最远叶节点所经过的「边的数量」。\",\"节点的深度（depth）：从根节点到该节点所经过的「边的数量」。\",\"节点的高度（height）：从距离该节点最远的叶节点到该节点所经过的「边的数量」。\",\"注\",\"“深度”和”高度“说法，如果把边的数量换成节点数量，那就是都+1。\",\"在LeetCode中，有两道题 111.二叉树的最小深度 和 104.二叉树的最大深度 ，其中 二叉树的最大深度其实跟二叉的高度的定义是一致，不过一个是算节点的数量，一个算边的数量。\"]},\"382\":{\"h\":\"类型\"},\"383\":{\"h\":\"满二叉树\",\"t\":[\" 图片来自：https://www.hello-algo.com/chapter_tree/binary_tree/#2 \",\"叶节点的度为 0，其余节点度为 2\",\"设树的高度为 h，则节点数量为 2h+1−1\"]},\"384\":{\"h\":\"完全二叉树\",\"t\":[\" 图片来自：https://www.hello-algo.com/chapter_tree/binary_tree/#1_1 \"]},\"385\":{\"h\":\"平衡二叉树\",\"t\":[\" 图片来自：https://www.hello-algo.com/chapter_tree/binary_tree/#3 \"]},\"386\":{\"h\":\"二叉搜索树\",\"t\":[\"图片来自：https://www.hello-algo.com/chapter_tree/binary_search_tree/\",\"左子树的所有节点的值 < 根节点\",\"右子树的所有节点的值 > 根节点\",\"左子树和右子树都要满足以上两点\",\"没有键值相等的节点\"]},\"387\":{\"h\":\"遍历\",\"t\":[\"二叉数的遍历主要有前中后遍历和层次遍历。 前中后属于 DFS，层次遍历则可以使用 BFS 或者 DFS 来实现。\",\"DFS 都可以使用「栈」来简化操作，并且其实树本身是一种递归的数据结构，因此「递归」和「栈」对于 DFS 来说是两个关键点。\",\"BFS 的关键点在于如何记录每一层次是否遍历完成， 我们可以用一个标识位来表式当前层的结束。\"]},\"388\":{\"h\":\"层序遍历\",\"t\":[\"层序遍历（level-order traversal）从顶部到底部逐层遍历二叉树，并在每一层按照从左到右的顺序访问节点。\",\"广度优先遍历通常借助“队列”来实现。队列遵循“先进先出”的规则，而广度优先遍历则遵循“逐层推进”的规则，两者背后的思想是一致的。\"]},\"389\":{\"h\":\"BFS遍历\",\"t\":[\"/* 层序遍历 */ List<Integer> levelOrder(TreeNode root) { // 初始化队列，加入根节点 Queue<TreeNode> queue = new LinkedList<>(); queue.offer(root); // 初始化一个列表，用于保存遍历序列 List<Integer> list = new ArrayList<>(); while (!queue.isEmpty()) { TreeNode node = queue.poll(); // 队列出队 list.add(node.val); // 保存节点值 if (node.left != null) queue.offer(node.left); // 左子节点入队 if (node.right != null) queue.offer(node.right); // 右子节点入队 } return list; }\"]},\"390\":{\"h\":\"BFS遍历的副产物-层序遍历-迭代写法\",\"t\":[\"乍一看来，这个遍历顺序和 BFS 是一样的，我们可以直接用 BFS 得出层序遍历结果。\",\"然而，层序遍历要求的输入结果和 BFS 是不同的。层序遍历要求我们区分每一层，也就是返回一个二维数组。而 BFS 的遍历结果是一个一维数组，无法区分每一层。\",\"注意点：在每一层遍历开始前，先记录队列中的结点数量 n（也就是这一层的结点数量），然后一口气处理完这一层的 n 个结点，BFS 遍历改造成了层序遍历\",\"public class Solution { public List<List<Integer>> levelOrderTraversal(TreeNode root) { List<List<Integer>> result = new ArrayList<>(); if (root == null) { return result; } Queue<TreeNode> queue = new LinkedList<>(); queue.offer(root); while (!queue.isEmpty()) { List<Integer> level = new ArrayList<>(); int levelSize = queue.size(); for (int i = 0; i < levelSize; i++) { TreeNode node = queue.poll(); level.add(node.val); if (node.left != null) { queue.offer(node.left); } if (node.right != null) { queue.offer(node.right); } } result.add(level); } return result; } }\",\"复杂度分析\",\"时间复杂度为 O(n) ：所有节点被访问一次，使用 O(n) 时间，其中 n 为节点数量。\",\"空间复杂度为 O(n) ：在最差情况下，即满二叉树时，遍历到最底层之前，队列中最多同时存在 (n+1)/2 个节点，占用 O(n) 空间。\"]},\"391\":{\"h\":\"BFS遍历的副产物-层序遍历-递归写法\",\"t\":[\"public List<List<Integer>> resList = new ArrayList<List<Integer>>(); public List<List<Integer>> levelOrderTraversal(TreeNode root) { levelOrderTraversalHelper(root, 0); return result; } private void levelOrderTraversalHelper(TreeNode node, int level) { if (node == null) return; if (result.size() <= level) { result.add(new ArrayList<>()); } result.get(level).add(node.val); levelOrderTraversalHelper(node.left, level + 1, result); levelOrderTraversalHelper(node.right, level + 1, result); }\",\"复杂度分析\",\"时间复杂度为 O(n) ：对书中的每个节点都进行递归调用函数，每一层递归的操作都是O(1)。\",\"空间复杂度为 O(n) ：需要将层次顺序遍历结果存储在一个2D 列表中，该列表可以包含多达 n 个元素。\"]},\"392\":{\"h\":\"前、中、后序遍历\",\"t\":[\"沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点 v 的所在边都己被探寻过，搜索将回溯到发现节点 v 的那条边的起始节点。一直进行到已发现从源节点可达的所有节点为止。\",\"前、中、后都属于深度优先遍历（depth-first traversal），也称深度优先搜索（depth-first search, DFS）。\"]},\"393\":{\"h\":\"前序遍历\",\"t\":[\"/* 前序遍历 */ void preOrder(TreeNode root) { if (root == null) return; // 访问优先级：根节点 -> 左子树 -> 右子树 list.add(root.val); preOrder(root.left); preOrder(root.right); }\",\"处理根节点\",\"访问左子树\",\"访问右子树\",\"1、2、5、3、6、7\"]},\"394\":{\"h\":\"中序遍历\",\"t\":[\"/* 中序遍历 */ void inOrder(TreeNode root) { if (root == null) return; // 访问优先级：左子树 -> 根节点 -> 右子树 inOrder(root.left); list.add(root.val); inOrder(root.right); }\",\"2、5、1、6、3、7\"]},\"395\":{\"h\":\"后序遍历\",\"t\":[\"/* 后序遍历 */ void postOrder(TreeNode root) { if (root == null) return; // 访问优先级：左子树 -> 右子树 -> 根节点 postOrder(root.left); postOrder(root.right); list.add(root.val); }\",\"5、2、6、7、3、1\",\"“递”表示开启新方法，程序在此过程中访问下一个节点。\",\"“归”表示函数返回，代表当前节点已经访问完毕。\",\"复杂度分析：\",\"时间复杂度为 O(n) ：所有节点被访问一次，使用 O(n) 时间。\",\"空间复杂度为 O(n) ：在最差情况下，即树退化为链表时，递归深度达到 n ，系统占用 O(n) 栈帧空间。\"]},\"396\":{\"h\":\"迭代遍历\",\"t\":[\"参考垃圾回收算法中标记法：\",\"使用颜色标记节点的状态，新节点为白色(WHITE)，已访问的节点为灰色(GRAY)。\",\"如果遇到的节点为白色，则将其标记为灰色 \",\"将其右子节点、自身、左子节点依次入栈。\",\"如果遇到的节点为灰色，则将节点的值输出。\"]},\"397\":{\"h\":\"前序遍历\",\"t\":[\"前序遍历的顺序是 根-左-右\",\"思路是：\",\"先将根结点入栈\",\"出栈一个元素，将右节点和左节点依次入栈（这样出栈的时候才是中左右的顺序）\",\"重复 2 的步骤\",\"从宏观上表现为：自顶向下依次访问左侧链，然后自底向上依次访问右侧链\",\"从上向下我们可以直接递归访问即可，从下向上我们只需要借助栈也可以轻易做到。\",\"class Solution { public List<Integer> preorderTraversal(TreeNode root) { List<Integer> result = new ArrayList<>(); if (root == null){ return result; } Stack<TreeNode> stack = new Stack<>(); stack.push(root); while (!stack.isEmpty()){ TreeNode node = stack.pop(); result.add(node.val); if (node.right != null){ stack.push(node.right); } if (node.left != null){ stack.push(node.left); } } return result; } }\"]},\"398\":{\"h\":\"中序遍历\",\"t\":[\"class Solution { public List<Integer> inorderTraversal(TreeNode root) { List<Integer> result = new ArrayList<>(); if (root == null){ return result; } Stack<TreeNode> stack = new Stack<>(); TreeNode cur = root; while (cur != null || !stack.isEmpty()){ if (cur != null){ stack.push(cur); cur = cur.left; }else{ cur = stack.pop(); result.add(cur.val); cur = cur.right; } } return result; } }\"]},\"399\":{\"h\":\"后序遍历\",\"t\":[\"// 后序遍历顺序 左-右-中 入栈顺序：中-左-右 出栈顺序：中-右-左， 最后翻转结果 class Solution { public List<Integer> postorderTraversal(TreeNode root) { List<Integer> result = new ArrayList<>(); if (root == null){ return result; } Stack<TreeNode> stack = new Stack<>(); stack.push(root); while (!stack.isEmpty()){ TreeNode node = stack.pop(); result.add(node.val); if (node.left != null){ stack.push(node.left); } if (node.right != null){ stack.push(node.right); } } Collections.reverse(result); return result; } }\"]},\"400\":{\"h\":\"迭代遍历统一法\",\"t\":[\"参考垃圾回收算法中的三色标记\",\"那么迭代遍历，其核心思想如下：\",\"使用颜色标记节点的状态，新节点为白色，已访问的节点为灰色。\",\"如果遇到的节点为白色，则将其标记为灰色，然后将其右子节点、自身、左子节点依次入栈。\",\"如果遇到的节点为灰色，则将节点的值输出。\"]},\"401\":{\"h\":\"前序遍历\",\"t\":[\"class Solution { public List<Integer> preorderTraversal(TreeNode root) { List<Integer> result = new LinkedList<>(); Stack<TreeNode> st = new Stack<>(); if (root != null) st.push(root); while (!st.empty()) { TreeNode node = st.peek(); if (node != null) { st.pop(); // 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中 if (node.right!=null) st.push(node.right); // 添加右节点（空节点不入栈） if (node.left!=null) st.push(node.left); // 添加左节点（空节点不入栈） st.push(node); // 添加中节点 st.push(null); // 中节点访问过，但是还没有处理，加入空节点做为标记。 } else { // 只有遇到空节点的时候，才将下一个节点放进结果集 st.pop(); // 将空节点弹出 node = st.peek(); // 重新取出栈中元素 st.pop(); result.add(node.val); // 加入到结果集 } } return result; } }\",\"中序遍历\",\"class Solution { public List<Integer> inorderTraversal(TreeNode root) { List<Integer> result = new LinkedList<>(); Stack<TreeNode> st = new Stack<>(); if (root != null) st.push(root); while (!st.empty()) { TreeNode node = st.peek(); if (node != null) { st.pop(); // 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中 if (node.right!=null) st.push(node.right); // 添加右节点（空节点不入栈） st.push(node); // 添加中节点 st.push(null); // 中节点访问过，但是还没有处理，加入空节点做为标记。 if (node.left!=null) st.push(node.left); // 添加左节点（空节点不入栈） } else { // 只有遇到空节点的时候，才将下一个节点放进结果集 st.pop(); // 将空节点弹出 node = st.peek(); // 重新取出栈中元素 st.pop(); result.add(node.val); // 加入到结果集 } } return result; } }\",\"class Solution { public List<Integer> postorderTraversal(TreeNode root) { List<Integer> result = new LinkedList<>(); Stack<TreeNode> st = new Stack<>(); if (root != null) st.push(root); while (!st.empty()) { TreeNode node = st.peek(); if (node != null) { st.pop(); // 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中 st.push(node); // 添加中节点 st.push(null); // 中节点访问过，但是还没有处理，加入空节点做为标记。 if (node.right!=null) st.push(node.right); // 添加右节点（空节点不入栈） if (node.left!=null) st.push(node.left); // 添加左节点（空节点不入栈） } else { // 只有遇到空节点的时候，才将下一个节点放进结果集 st.pop(); // 将空节点弹出 node = st.peek(); // 重新取出栈中元素 st.pop(); result.add(node.val); // 加入到结果集 } } return result; } }\"]},\"402\":{\"h\":\"表示\"},\"403\":{\"h\":\"完美二叉树\",\"t\":[\"图片来自：https://www.hello-algo.com/chapter_tree/array_representation_of_tree/\"]},\"404\":{\"h\":\"任意二叉树\",\"t\":[\"图片来自：https://www.hello-algo.com/chapter_tree/array_representation_of_tree/#732\",\"完全二叉树中，None 只出现在最底层且靠右的位置，因此所有 None 一定出现在层序遍历序列的末尾。\",\"图片来自：https://www.hello-algo.com/chapter_tree/array_representation_of_tree/#732\"]},\"405\":{\"h\":\"AVL树\",\"t\":[\"AVL 树是「平衡」二叉「搜索树」。\",\"在需要频繁进行「增删查改」操作的场景中，AVL 树能始终保持高效的数据操作性能，时间复杂度保持在 O(longn) 中\"]},\"406\":{\"h\":\"递归三要素\",\"t\":[\"确定递归函数的参数和返回值： 确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。\",\"确定终止条件： 如果递归没有终止，操作系统的内存栈必然就会溢出。\",\"确定单层递归的逻辑： 确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。\"]},\"407\":{\"h\":\"递归可视化\",\"t\":[\"https://labuladong.online/algo-visualize/\",\" let preorderResult = []; let inorderResult = []; let postorderResult = []; function traverse(root) { if (root === null) { return; } // 前序遍历 preorderResult.push(root.val); // 递归遍历左子树 traverse(root.left); // 中序遍历 inorderResult.push(root.val); // 递归遍历右子树 traverse(root.right); // 后序遍历 postorderResult.push(root.val); } let preorderIteratorResult = []; let inorderIteratorResult = []; let postorderIteratorResult = []; function preorderTraversal(root) { if (root === null) { return preorderIteratorResult; } const stack = [root]; while (stack.length > 0) { const node = stack.pop(); preorderIteratorResult.push(node.val); if (node.right !== null) { stack.push(node.right); } if (node.left !== null) { stack.push(node.left); } } return preorderIteratorResult; } function inorderTraversal(root) { if (root === null) { return inorderIteratorResult; } const stack = []; let cur = root; while (cur !== null || stack.length > 0) { if (cur !== null) { stack.push(cur); cur = cur.left; } else { cur = stack.pop(); inorderIteratorResult.push(cur.val); cur = cur.right; } } return inorderIteratorResult; } function postorderTraversal(root) { if (!root) { return postorderIteratorResult; } const stack = [root]; while (stack.length > 0) { const node = stack.pop(); postorderIteratorResult.push(node.val); if (node.left) { stack.push(node.left); } if (node.right) { stack.push(node.right); } } return postorderIteratorResult.reverse(); } let allRoot = TreeNode.create([1, 2, 3, null, 5, 6, 7]); traverse(allRoot); preorderTraversal(allRoot); inorderTraversal(allRoot); postorderTraversal(allRoot);\"]},\"408\":{\"h\":\"题目\",\"t\":[\"层序遍历题目：\",\"102.二叉树的层序遍历(opens new window)\",\"107.二叉树的层次遍历II(opens new window)\",\"199.二叉树的右视图(opens new window)\",\"637.二叉树的层平均值(opens new window)\",\"429.N叉树的层序遍历(opens new window)\",\"515.在每个树行中找最大值(opens new window)\",\"116.填充每个节点的下一个右侧节点指针(opens new window)\",\"117.填充每个节点的下一个右侧节点指针II(opens new window)\",\"104.二叉树的最大深度(opens new window)\",\"111.二叉树的最小深度\"]},\"409\":{\"c\":[\"LeetCode\"]},\"410\":{\"c\":[\"二叉树\"]},\"411\":{\"h\":\"链表总结篇\"},\"412\":{\"h\":\"虚拟头节点\",\"t\":[\"203-移除链表元素\",\"通过添加虚拟头节点的方式，可以很方便进行删除操作。\"]},\"413\":{\"h\":\"快慢指针\",\"t\":[\"206-翻转链表\"]},\"414\":{\"h\":\"删除倒数第 N 个节点\",\"t\":[\"19-删除倒数第 N 个节点 结合虚拟头结点 和 双指针法来移除链表倒数第 N 个节点\",\"交换链表中的节点\",\"删除链表 M 个节点之后的 N 个节点\",\"删除链表的中间节点\"]},\"415\":{\"h\":\"链表的基本操作\",\"t\":[\"707-设计链表\",\"获取链表第 index 个节点的数值\",\"在链表的最前面插入一个节点\",\"在链表的最后面插入一个节点\",\"在链表第 index 个节点前面插入一个节点\",\"删除链表的第 index 个节点的数值\"]},\"416\":{\"h\":\"链表相交\",\"t\":[\"面试题 02.07-链表相交\"]},\"417\":{\"h\":\"环形链表\",\"t\":[\"这类链表题目一般都是使用双指针法解决的，例如寻找距离尾部第 K 个节点、寻找环入口、寻找公共尾部入口等。\",\"142-环形链表-ii\"]},\"418\":{\"c\":[\"LeetCode\"]},\"419\":{\"c\":[\"链表\"]},\"420\":{\"h\":\"链表理论基础\"},\"421\":{\"h\":\"链表是什么？\",\"t\":[\"链表是一种通过指针串联在一起的线性结构\",\"每一个节点由两部分组成，一部分是「数据域」，一部分是「指针域」，最后一个节点的指针域指向 null\"]},\"422\":{\"h\":\"链表类型\"},\"423\":{\"h\":\"单链表\",\"t\":[\"​ \"]},\"424\":{\"h\":\"双链表\",\"t\":[\"每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点。\"]},\"425\":{\"h\":\"循环链表\",\"t\":[\"循环链表，顾名思义，就是链表首尾相连。\"]},\"426\":{\"h\":\"链表存储方式\",\"t\":[\"链表在内存中可不是连续分布的。\",\"链表是通过「指针域的指针」链接在内存中各个节点，每个节点存放着下一个节点的内存地址。\",\"链表的组成单位是 Node 对象\",\"/* 链表节点类 */ class ListNode { int val; // 节点值 ListNode next; // 指向下一节点的引用 ListNode(int x) { val = x; } // 构造函数 }\"]},\"427\":{\"h\":\"链表操作\"},\"428\":{\"h\":\"头插节点\",\"t\":[\"记录头节点\",\"创建新节点，新节点的头节点为null\",\"新节点的 next 为 「步骤1」的头节点\",\"「步骤1」的前驱节点为 新节点\",\"void linkFirst(E e) { final Node<E> f = first; // 头节点 final Node<E> newNode = new Node<>(null, e, f); // 新节点，后驱节点是f first = newNode; // 现在头节点是新节点 if (f == null) // 如果之前的头节点为null last = newNode; // 那么现在头节点和尾节点都是 新节点 else f.prev = newNode; // 之间的头节点的前驱节点是新节点 size++; }\",\"图片来自：bugstack.cn\"]},\"429\":{\"h\":\"尾插节点\",\"t\":[\"void linkLast(E e) { final Node<E> l = last; final Node<E> newNode = new Node<>(l, e, null); last = newNode; if (l == null) { first = newNode; } else { l.next = newNode; } size++; }\",\"图片来自：bugstack.cn\"]},\"430\":{\"h\":\"拆链操作\",\"t\":[\"E unlink(Node<E> x) { final E element = x.item; final Node<E> next = x.next; final Node<E> prev = x.prev; if (prev == null) { first = next; } else { prev.next = next; x.prev = null; } if (next == null) { last = prev; } else { next.prev = prev; x.next = null; } x.item = null; size--; return element; }\",\"图片来自：bugstack.cn\"]},\"431\":{\"h\":\"删除节点\",\"t\":[\"public boolean remove(Object o) { if (o == null) { for (Node<E> x = first; x != null; x = x.next) { if (x.item == null) { unlink(x); return true; } } } else { for (Node<E> x = first; x != null; x = x.next) { if (o.equals(x.item)) { unlink(x); return true; } } } return false; }\",\"图片来自：bugstack.cn\"]},\"432\":{\"h\":\"链表性能分析\",\"t\":[\"插入/删除为 O(1)\",\"查询为O(n)\"]},\"433\":{\"h\":\"问题\",\"t\":[\"描述一下链表的数据结构？\",\"Java 中 LinkedList 使用的是单向链表、双向链表还是循环链表？\",\"链表中数据的插入、删除、获取元素，时间复杂度是多少？\",\"什么场景下使用链表更合适？\"]},\"434\":{\"c\":[\"LeetCode\"]},\"435\":{\"c\":[\"链表\"]},\"436\":{\"h\":\"队列理论基础篇\"},\"437\":{\"h\":\"理论\",\"t\":[\"一个 队列(queue) 是一种特殊类型的抽象数据类型或集合。集合中的实体按顺序保存。\",\"队列既可以是数组实现也可以是链表实现。\",\"在 Java 中 Queue 是单端队列接口\",\"在 Java 中 Deque 是双端队列接口\"]},\"438\":{\"h\":\"题目\",\"t\":[\"单端队列和双端队列，分别对应的实现类是哪个？\",\"单端队列遵循先进先出（FIFO）原则，主要通过实现 java.util.Queue 接口来定义，通常使用 java.util.LinkedList 来作为 Queue 的实现模拟单端队列行为。\",\"双端队列（Deque，全称为 Double Ended Queue）是一种允许在其两端进行插入和删除的线性数据结构。\",\"它可以被用作栈，也可以用作队列。双端队列的直接实现类是 java.util.Deque 接口，而常用的实现类是 java.util.ArrayDeque 和 java.util.LinkedList。\",\"简述延迟队列/优先队列的实现方式\",\"优先队列（PriorityQueue）的底层实现是一个二叉堆，通常是最大堆。\",\"最大堆的特点是父节点的优先级总是 >= 其子节点的优先级。为了支持优先级的比较，会实现一个 Comparable 接口或者提供一个 Comparator。\",\"延迟队列（Delay Queue）是一种特殊类型的优先队列，它根据元素的延迟时间来决定元素的优先级。它基于优先队列（PriorityQueue）实现的，用于处理具有过期时间（delay）的任务。\",\"队列里面的元素实现了 java.util.concurrent.Delayed 接口\",\"内部使用一个 PriorityQueue 来存储元素\",\"二叉堆插入/弹出元素的过程\",\"二叉堆(基于数组）插入元素的过程\",\"public void insert(int element) { heap.add(element); // 添加一个元素在数组末尾 int currentIndex = heapArray.size() - 1; // 当前节点位置 int parentIndex = (currentIndex - 1) / 2; // 当前节点的父节点位置 // Compare and swap with parent until the heap property is restored // 当子节点小于父节点，交换他们的元素（最大堆） // 继续比较其节点和其父节点 while (currentIndex > 0 && heap.get(currentIndex) < heap.get(parentIndex)) { swap(currentIndex, parentIndex); currentIndex = parentIndex; parentIndex = (currentIndex - 1) / 2; } }\",\"二叉堆(基于数组）弹出元素的过程\",\"public int pop() { if (heap.isEmpty()) { throw new IllegalStateException(\\\"堆为空！\\\"); } int poppedElement = heap.get(0); // 弹出的元素 heap.set(0, heap.get(heapArray.size() - 1)); // 将数组尾元素替换根元素，并删除旧的数组尾元素 heap.remove(heap.size() - 1); int currentIndex = 0; int leftChildIndex = 2 * currentIndex + 1; int rightChildIndex = 2 * currentIndex + 2; // 比较并交换与较大子节点，直到满足最大堆的性质 while (leftChildIndex < heapArray.size()) { int largerChildIndex = leftChildIndex; if (rightChildIndex < heapArray.size() && heapArray.get(rightChildIndex) > heapArray.get(leftChildIndex)) { largerChildIndex = rightChildIndex; } // 已经满足最大堆的性质 if (heapArray.get(currentIndex) > heapArray.get(largerChildIndex)) { break; } swap(currentIndex, largerChildIndex); currentIndex = largerChildIndex; leftChildIndex = 2 * currentIndex + 1; rightChildIndex = 2 * currentIndex + 2; } return poppedElement; }\",\"延迟队列的使用场景\",\"订单超时处理：在线购物平台中，当用户下单后，系统可能会设置一个延迟队列，如果订单在 30 分钟或 1 小时内未完成支付，则自动取消订单并释放锁定的库存。\",\"定时任务触发：如定期发送报告、数据同步、缓存刷新等操作可以在特定时间点通过延迟队列自动触发执行。\",\"短信或邮件通知：在用户注册、下单等操作后，系统不立即发送确认短信或邮件，而是在用户操作后的几分钟或更长时间后再发送，以避免即时发送失败或对用户体验造成干扰。\",\"延迟队列为什么要添加信号量\",\"信号量用于控制对共享资源的访问，尤其是当涉及到 多个线程访问有限资源 时。它通过维护一个 计数器 来实现这一功能，允许一定数量的并发访问，并且其他请求访问的线程必须等待直到计数器非零。\",\"流量控制：通过信号量限制生产者向延迟队列中添加消息的速度，可以实现流量控制，确保队列不会被过快填满，从而维持系统的稳定运行。\",\"资源访问同步：如果队列某些操作（如调整队列参数、查询队列状态）需要独占访问，信号量可以用来同步这些操作，确保同一时间只有一个线程能执行此类操作，防止数据不一致性或竞态条件。\"]},\"439\":{\"c\":[\"LeetCode\"]},\"440\":{\"c\":[\"队列\"]},\"441\":{\"h\":\"面试题02.07-链表相交\"},\"442\":{\"h\":\"题目地址(面试题 02.07. 链表相交 - 力扣（LeetCode）)\",\"t\":[\"https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/\"]},\"443\":{\"h\":\"题目描述\",\"t\":[\" 给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。\",\" 图示两个链表在节点 c1 开始相交 ：\",\" 题目数据 保证 整个链式结构中不存在环。\",\" 注意 ，函数返回结果后，链表必须 保持其原始结构 。\",\" 示例 1：\",\" 输入： intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3 输出： Intersected at '8' 解释： 相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。 从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。 在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。 \",\" 示例 2：\",\" 输入： intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1 输出： Intersected at '2' 解释： 相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。 从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。 在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。 \",\" 示例 3：\",\" 输入： intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2 输出： null 解释： 从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。 由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。 这两个链表不相交，因此返回 null 。 \",\" 提示：\",\" listA 中节点数目为 m \",\" listB 中节点数目为 n \",\" 0 <= m, n <= 3 * 10 4 \",\" 1 <= Node.val <= 10 5 \",\" 0 <= skipA <= m \",\" 0 <= skipB <= n \",\" 如果 listA 和 listB 没有交点， intersectVal 为 0 \",\" 如果 listA 和 listB 有交点， intersectVal == listA [skipA + 1] == listB [skipB + 1] \",\" 进阶： 你能否设计一个时间复杂度 O(n) 、仅用 O(1) 内存的解决方案？\"]},\"444\":{\"h\":\"前置知识\",\"t\":[\"双指针\",\"链表\",\"哈希表\"]},\"445\":{\"h\":\"思路\",\"t\":[\"相交部分长度为 c，listA 长度为 a，listb 长度为 b。\",\"有两个变量 headA、headB 分别从 listA、listB 分别出发。\",\"当 headA 走完 listA 时，从 headB 继续走。\",\"当 headB 走完 listB 时，从 headA 继续走。\",\"headA == headB 时就是相交节点\",\"headA 共走了 a+（b-c）\",\"headB 共走了 b+（a-c）\",\"若两链表 有 公共尾部 (即 c > 0 ) ：指针 A, B 同时指向第一个相交节点。\",\"若两链表 无 公共尾部 (即 c = 0 ) ：指针 A , B 同时指向 null 。\"]},\"446\":{\"h\":\"关键点\",\"t\":[\"双指针遍历各自所在链表后，在遍历对方的链表，第一次「相等」就是相交点\",\"「相等」有可能两个指针都指向 null\"]},\"447\":{\"h\":\"代码\",\"t\":[\"语言支持：Java\",\"Java Code:\",\" /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode getIntersectionNode(ListNode headA, ListNode headB) { if (headA == null || headB == null) { return null; } // A 链长度为 a // B 链长度为 b // A 和 B 重叠的链长度为 c // A 相交的位置在 a+b-c // B 相交的位置在 b+a-c ListNode first = headA; ListNode second = headB; while(first != second){ // 循环终止条件 first = first == null? headB:first.next; second = second == null? headA:second.next; } return first; } }\",\"复杂度分析\",\"令 a 为 listA 长度，b 为 listB 长度\",\"时间复杂度：O(a+b)，最差情况下（即 ∣a−b∣=1 , c=0 ），此时需遍历 a+b 个节点。\",\"空间复杂度：O(1)\"]},\"448\":{\"c\":[\"LeetCode\"]},\"449\":{\"c\":[\"链表\"]},\"450\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"451\":{\"h\":\"About\"}},\"dirtCount\":0,\"index\":[[\"∣a−b∣=1\",{\"1\":{\"447\":1}}],[\"公共尾部\",{\"1\":{\"445\":2}}],[\"公司\",{\"0\":{\"253\":1}}],[\"共走了\",{\"1\":{\"445\":2}}],[\"共有\",{\"1\":{\"25\":1}}],[\"必须为\",{\"1\":{\"443\":1}}],[\"图示两个链表在节点\",{\"1\":{\"443\":1}}],[\"图片来自\",{\"1\":{\"173\":1,\"351\":1,\"383\":1,\"384\":1,\"385\":1,\"386\":1,\"403\":1,\"404\":2,\"428\":1,\"429\":1,\"430\":1,\"431\":1}}],[\"防止数据不一致性或竞态条件\",{\"1\":{\"438\":1}}],[\"信号量可以用来同步这些操作\",{\"1\":{\"438\":1}}],[\"信号量用于控制对共享资源的访问\",{\"1\":{\"438\":1}}],[\"资源访问同步\",{\"1\":{\"438\":1}}],[\"流量控制\",{\"1\":{\"438\":1}}],[\"允许一定数量的并发访问\",{\"1\":{\"438\":1}}],[\"允许在其头部和尾部进行高效地添加和移除元素\",{\"1\":{\"376\":1}}],[\"尤其是当涉及到\",{\"1\":{\"438\":1}}],[\"短信或邮件通知\",{\"1\":{\"438\":1}}],[\"缓存刷新等操作可以在特定时间点通过延迟队列自动触发执行\",{\"1\":{\"438\":1}}],[\"定时任务触发\",{\"1\":{\"438\":1}}],[\"定义好上下左右四个边界\",{\"1\":{\"311\":1}}],[\"定义存储的数组\",{\"1\":{\"265\":1}}],[\"定义一个长度为\",{\"1\":{\"263\":1}}],[\"定义两个指针\",{\"1\":{\"185\":1}}],[\"定义两个指针slow和fast\",{\"1\":{\"153\":1}}],[\"定义为\",{\"1\":{\"151\":1}}],[\"定义三个指针\",{\"1\":{\"94\":1}}],[\"定义递归函数\",{\"1\":{\"23\":1}}],[\"小时内未完成支付\",{\"1\":{\"438\":1}}],[\"系统不立即发送确认短信或邮件\",{\"1\":{\"438\":1}}],[\"系统可能会设置一个延迟队列\",{\"1\":{\"438\":1}}],[\"系统占用\",{\"1\":{\"395\":1}}],[\"订单超时处理\",{\"1\":{\"438\":1}}],[\"弹出的元素\",{\"1\":{\"438\":1}}],[\"弹出元素的过程\",{\"1\":{\"438\":2}}],[\"堆为空\",{\"1\":{\"438\":1}}],[\"堆栈的使用场景\",{\"1\":{\"377\":1}}],[\"堆栈是一种抽象数据类型\",{\"1\":{\"375\":1}}],[\"基于数组\",{\"1\":{\"438\":2}}],[\"基于数组实现的双端队列\",{\"1\":{\"376\":1}}],[\"延迟队列为什么要添加信号量\",{\"1\":{\"438\":1}}],[\"延迟队列的使用场景\",{\"1\":{\"438\":1}}],[\"延迟队列\",{\"1\":{\"438\":1}}],[\"优先队列\",{\"1\":{\"438\":1}}],[\"优先队列的实现方式\",{\"1\":{\"438\":1}}],[\"优化\",{\"1\":{\"7\":1}}],[\"简述延迟队列\",{\"1\":{\"438\":1}}],[\"简单理解是一种简单粗暴的试错搜索\",{\"1\":{\"358\":1}}],[\"接口或者提供一个\",{\"1\":{\"438\":1}}],[\"接口\",{\"1\":{\"438\":2}}],[\"接口来定义\",{\"1\":{\"438\":1}}],[\"全称为\",{\"1\":{\"438\":1}}],[\"主要通过实现\",{\"1\":{\"438\":1}}],[\"主操作不变\",{\"1\":{\"155\":1}}],[\"原则\",{\"1\":{\"438\":1}}],[\"原地\",{\"1\":{\"101\":1,\"233\":1,\"235\":1,\"242\":1}}],[\"集合中的实体按顺序保存\",{\"1\":{\"437\":1}}],[\"集合的大小就构成了树的宽度\",{\"1\":{\"360\":1}}],[\"什么场景下使用链表更合适\",{\"1\":{\"433\":1}}],[\"什么是数组\",{\"0\":{\"364\":1}}],[\"获取元素\",{\"1\":{\"433\":1}}],[\"获取链表第\",{\"1\":{\"415\":1}}],[\"获取链表中下标为\",{\"1\":{\"328\":1}}],[\"描述一下链表的数据结构\",{\"1\":{\"433\":1}}],[\"查询队列状态\",{\"1\":{\"438\":1}}],[\"查询为o\",{\"1\":{\"432\":1}}],[\"查找不到时\",{\"1\":{\"367\":1}}],[\"查找元素\",{\"1\":{\"350\":1}}],[\"拆链操作\",{\"0\":{\"430\":1}}],[\"尾插节点\",{\"0\":{\"429\":1}}],[\"尾随空格或者单词间的多个空格\",{\"1\":{\"101\":1}}],[\"创建新节点\",{\"1\":{\"428\":1}}],[\"创建一个虚拟头结点\",{\"1\":{\"166\":1}}],[\"创建一个双端队列存放右括号\",{\"1\":{\"146\":1}}],[\"创建一个队列存放每一层的节点\",{\"1\":{\"74\":1}}],[\"创建一个哈希表\",{\"1\":{\"15\":1}}],[\"构造函数\",{\"1\":{\"426\":1}}],[\"构建文档\",{\"1\":{\"4\":1}}],[\"顾名思义\",{\"1\":{\"425\":1}}],[\"​\",{\"1\":{\"423\":1}}],[\"寻找公共尾部入口等\",{\"1\":{\"417\":1}}],[\"寻找环入口\",{\"1\":{\"417\":1}}],[\"寻找交集元素\",{\"1\":{\"256\":1}}],[\"面试题02\",{\"0\":{\"441\":1}}],[\"面试题\",{\"0\":{\"442\":1},\"1\":{\"416\":1}}],[\"结合虚拟头结点\",{\"1\":{\"414\":1}}],[\"结果为\",{\"1\":{\"151\":1}}],[\"确保同一时间只有一个线程能执行此类操作\",{\"1\":{\"438\":1}}],[\"确保队列不会被过快填满\",{\"1\":{\"438\":1}}],[\"确保当前结点后还有结点\",{\"1\":{\"163\":1,\"166\":1}}],[\"确定每一层递归需要处理的信息\",{\"1\":{\"406\":1}}],[\"确定单层递归的逻辑\",{\"1\":{\"406\":1}}],[\"确定终止条件\",{\"1\":{\"406\":1}}],[\"确定哪些参数是递归的过程中需要处理的\",{\"1\":{\"406\":1}}],[\"确定递归函数的参数和返回值\",{\"1\":{\"406\":1}}],[\"增删查改\",{\"1\":{\"405\":1}}],[\"增大\",{\"1\":{\"369\":1}}],[\"增大总和\",{\"1\":{\"96\":1}}],[\"重叠的链长度为\",{\"1\":{\"447\":1}}],[\"重新取出栈中元素\",{\"1\":{\"401\":3}}],[\"重复\",{\"1\":{\"397\":1}}],[\"重复答案\",{\"1\":{\"96\":1}}],[\"重复项删除操作\",{\"1\":{\"43\":1}}],[\"才将下一个节点放进结果集\",{\"1\":{\"401\":3}}],[\"空节点不入栈\",{\"1\":{\"401\":6}}],[\"空间\",{\"1\":{\"390\":1}}],[\"空间解决此题\",{\"1\":{\"83\":1}}],[\"空间复杂度主要取决于递归调用的栈空间\",{\"1\":{\"178\":1}}],[\"空间复杂度主要取决于递归时栈空间的开销\",{\"1\":{\"59\":1}}],[\"空间复杂度主要取决于排序额外使用的空间\",{\"1\":{\"117\":1}}],[\"空间复杂度为\",{\"1\":{\"59\":1,\"117\":1,\"235\":1,\"390\":1,\"391\":1,\"395\":1}}],[\"空间复杂度\",{\"1\":{\"17\":1,\"25\":1,\"27\":1,\"36\":1,\"38\":1,\"47\":1,\"50\":1,\"59\":1,\"68\":1,\"76\":1,\"78\":1,\"87\":1,\"96\":1,\"104\":1,\"106\":1,\"108\":1,\"117\":1,\"126\":1,\"135\":1,\"137\":1,\"146\":1,\"155\":1,\"163\":1,\"166\":1,\"175\":1,\"178\":1,\"187\":1,\"194\":1,\"201\":1,\"203\":1,\"211\":1,\"220\":1,\"228\":1,\"237\":1,\"246\":1,\"256\":1,\"265\":1,\"274\":1,\"276\":1,\"284\":1,\"293\":1,\"295\":1,\"304\":1,\"313\":1,\"321\":1,\"332\":1,\"335\":1,\"344\":1,\"447\":1}}],[\"下单等操作后\",{\"1\":{\"438\":1}}],[\"下面再将右中左节点添加到栈中\",{\"1\":{\"401\":3}}],[\"下边界缩减\",{\"1\":{\"311\":2}}],[\"避免重复操作\",{\"1\":{\"401\":3}}],[\"归\",{\"1\":{\"395\":1}}],[\"程序在此过程中访问下一个节点\",{\"1\":{\"395\":1}}],[\"递\",{\"1\":{\"395\":1}}],[\"递归遍历右子树\",{\"1\":{\"407\":1}}],[\"递归遍历左子树\",{\"1\":{\"407\":1}}],[\"递归可视化\",{\"0\":{\"407\":1}}],[\"递归写法\",{\"0\":{\"391\":1}}],[\"递归的深度就构成了树的深度\",{\"1\":{\"360\":1}}],[\"递归的结果就是\",{\"1\":{\"199\":2}}],[\"递归向上撤销结果\",{\"1\":{\"358\":1}}],[\"递归向下处理和获取结果\",{\"1\":{\"358\":1}}],[\"递归深度达到\",{\"1\":{\"395\":1}}],[\"递归深度等价于二叉树的高度\",{\"1\":{\"293\":1}}],[\"递归深度可达到\",{\"1\":{\"36\":1}}],[\"递归翻转\",{\"1\":{\"199\":2}}],[\"递归函数需要栈空间\",{\"1\":{\"293\":1}}],[\"递归函数定义\",{\"1\":{\"199\":1}}],[\"递归函数的定义\",{\"1\":{\"176\":1}}],[\"递归思想\",{\"1\":{\"172\":1}}],[\"递归需要\",{\"1\":{\"137\":2}}],[\"递归方式\",{\"0\":{\"136\":1}}],[\"递归三要素\",{\"0\":{\"406\":1},\"1\":{\"34\":1}}],[\"递归\",{\"0\":{\"23\":1,\"176\":1},\"1\":{\"199\":1,\"360\":1,\"387\":1}}],[\"访问右子树\",{\"1\":{\"393\":1}}],[\"访问左子树\",{\"1\":{\"393\":1}}],[\"访问优先级\",{\"1\":{\"393\":1,\"394\":1,\"395\":1}}],[\"访问元素\",{\"1\":{\"365\":1}}],[\"尽可能深的搜索树的分支\",{\"1\":{\"392\":1}}],[\"沿着树的深度遍历树的节点\",{\"1\":{\"392\":1}}],[\"该列表可以包含多达\",{\"1\":{\"391\":1}}],[\"该节点将\",{\"1\":{\"328\":1}}],[\"无\",{\"1\":{\"445\":1}}],[\"无法区分每一层\",{\"1\":{\"390\":1}}],[\"无限循环\",{\"1\":{\"151\":1}}],[\"然而\",{\"1\":{\"390\":1}}],[\"然后将其右子节点\",{\"1\":{\"400\":1}}],[\"然后将新加入的元素压入\",{\"1\":{\"194\":1}}],[\"然后自底向上依次访问右侧链\",{\"1\":{\"397\":1}}],[\"然后一口气处理完这一层的\",{\"1\":{\"390\":1}}],[\"然后选出我们想要的答案\",{\"1\":{\"359\":1}}],[\"然后处理该节点\",{\"1\":{\"275\":1}}],[\"然后返回\",{\"1\":{\"233\":1}}],[\"然后重复这个过程直到这个数变为\",{\"1\":{\"151\":1}}],[\"然后在两重循环枚举到的数之后使用双指针枚举剩下的两个数\",{\"1\":{\"115\":1,\"116\":1}}],[\"然后再进行反转\",{\"1\":{\"302\":1}}],[\"然后再更新下一层的指针\",{\"1\":{\"78\":1}}],[\"然后再让当前节点成为前一个节点\",{\"1\":{\"76\":1}}],[\"然后利用demo去修改\",{\"1\":{\"7\":1}}],[\"得出层序遍历结果\",{\"1\":{\"390\":1}}],[\"得到的链是一个隐式的链表\",{\"1\":{\"153\":1}}],[\"乍一看来\",{\"1\":{\"390\":1}}],[\"保持其原始结构\",{\"1\":{\"443\":1}}],[\"保证\",{\"1\":{\"443\":1}}],[\"保证首次遇到的一定是最右边的节点\",{\"1\":{\"136\":1,\"137\":1}}],[\"保存节点值\",{\"1\":{\"389\":1}}],[\"加入到结果集\",{\"1\":{\"401\":3}}],[\"加入空节点做为标记\",{\"1\":{\"401\":3}}],[\"加入根节点\",{\"1\":{\"389\":1}}],[\"加上\",{\"1\":{\"85\":1}}],[\"逐层推进\",{\"1\":{\"388\":1}}],[\"逐层遍历\",{\"1\":{\"270\":1}}],[\"广度优先遍历通常借助\",{\"1\":{\"388\":1}}],[\"广度优先搜索\",{\"1\":{\"271\":1}}],[\"广度优先搜索往往利用\",{\"1\":{\"37\":1}}],[\"平衡\",{\"1\":{\"405\":1}}],[\"平衡二叉树\",{\"0\":{\"385\":1}}],[\"平方越大\",{\"1\":{\"344\":1}}],[\"平方也就越大\",{\"1\":{\"344\":1}}],[\"平方大小的比较\",{\"1\":{\"343\":1}}],[\"平方后\",{\"1\":{\"340\":1}}],[\"叶节点的度为\",{\"1\":{\"383\":1}}],[\"叶子节点的定义是左孩子和右孩子都为\",{\"1\":{\"57\":1}}],[\"叶子节点\",{\"1\":{\"56\":1}}],[\"叶子节点是指没有子节点的节点\",{\"1\":{\"55\":1}}],[\"满二叉树\",{\"0\":{\"383\":1}}],[\"满足\",{\"1\":{\"92\":1}}],[\"高度\",{\"1\":{\"381\":1}}],[\"高精尖儿\",{\"1\":{\"6\":1}}],[\"注\",{\"1\":{\"381\":1}}],[\"注意点\",{\"1\":{\"390\":1}}],[\"注意这五个元素可以任意顺序返回\",{\"1\":{\"233\":1}}],[\"注意\",{\"1\":{\"4\":1,\"83\":1,\"92\":2,\"101\":1,\"191\":1,\"224\":1,\"319\":1,\"367\":3,\"368\":3,\"369\":1,\"443\":3}}],[\"边的数量\",{\"1\":{\"381\":3}}],[\"边界变化条件\",{\"1\":{\"312\":1}}],[\"度的取值范围是\",{\"1\":{\"381\":1}}],[\"称为叶节点\",{\"1\":{\"381\":1}}],[\"称为子节点\",{\"1\":{\"381\":1}}],[\"称为根\",{\"1\":{\"381\":1}}],[\"称为分支\",{\"1\":{\"381\":1}}],[\"称为栈顶\",{\"1\":{\"375\":1}}],[\"概念\",{\"0\":{\"381\":1}}],[\"通常是最大堆\",{\"1\":{\"438\":1}}],[\"通常使用\",{\"1\":{\"438\":1}}],[\"通常扩容后的容量是原容量的两倍\",{\"1\":{\"376\":1}}],[\"通过信号量限制生产者向延迟队列中添加消息的速度\",{\"1\":{\"438\":1}}],[\"通过添加虚拟头节点的方式\",{\"1\":{\"412\":1}}],[\"通过一个快指针和慢指针在一个\",{\"1\":{\"370\":1}}],[\"通过某种算法将\",{\"1\":{\"351\":1}}],[\"通过建立键\",{\"1\":{\"350\":1}}],[\"通过上面的总结会发现边界的起始和结束与方向是对应的\",{\"1\":{\"313\":1}}],[\"通过\",{\"1\":{\"233\":1}}],[\"通过反复调用\",{\"1\":{\"153\":1}}],[\"通过反馈你才能时刻修正自己\",{\"1\":{\"9\":1}}],[\"通过排序容易找到相同的三元组答案\",{\"1\":{\"95\":1}}],[\"通过查询\",{\"1\":{\"15\":1}}],[\"源码中推荐使用\",{\"1\":{\"375\":1}}],[\"具有两个主要的操作\",{\"1\":{\"375\":1}}],[\"根\",{\"1\":{\"397\":1}}],[\"根据当前子序列和大小的情况\",{\"1\":{\"371\":1}}],[\"根节点所在层为\",{\"1\":{\"381\":1}}],[\"根节点之外的节点\",{\"1\":{\"381\":1}}],[\"根节点和\",{\"1\":{\"274\":1}}],[\"根节点\",{\"1\":{\"131\":1,\"386\":2,\"393\":1,\"394\":1,\"395\":1}}],[\"达到锁定右侧边界的目的\",{\"1\":{\"369\":1}}],[\"达到锁定左侧边界的目的\",{\"1\":{\"368\":1}}],[\"取值区间是闭区间\",{\"1\":{\"368\":1}}],[\"取消注释下一行\",{\"1\":{\"4\":1}}],[\"变量的值\",{\"1\":{\"368\":1}}],[\"变动情况\",{\"1\":{\"94\":1}}],[\"综上可以看出\",{\"1\":{\"368\":1}}],[\"含义是\",{\"1\":{\"368\":1}}],[\"应该是\",{\"1\":{\"367\":1}}],[\"应该为\",{\"1\":{\"319\":1}}],[\"情况下\",{\"1\":{\"367\":1}}],[\"向右查找\",{\"1\":{\"367\":1}}],[\"向左查找\",{\"1\":{\"367\":1,\"368\":1}}],[\"连续内存空间\",{\"1\":{\"364\":1}}],[\"撤销处理结果\",{\"1\":{\"360\":1}}],[\"路径\",{\"1\":{\"360\":1}}],[\"选择列表\",{\"1\":{\"360\":1}}],[\"选择\",{\"1\":{\"360\":1}}],[\"选择较大的那个逆序放入答案并移动指针\",{\"1\":{\"342\":1}}],[\"搜索树\",{\"1\":{\"405\":1}}],[\"搜索将回溯到发现节点\",{\"1\":{\"392\":1}}],[\"搜索停止\",{\"1\":{\"368\":1}}],[\"搜索区间\",{\"1\":{\"367\":4,\"368\":2,\"369\":1}}],[\"搜索过程\",{\"1\":{\"360\":1}}],[\"搜索首个空格\",{\"1\":{\"106\":1}}],[\"函数返回结果后\",{\"1\":{\"443\":1}}],[\"函数返回值一般为void\",{\"1\":{\"360\":1}}],[\"函数的返回值\",{\"1\":{\"368\":1}}],[\"函数的嵌套调用\",{\"1\":{\"153\":1}}],[\"棋盘问题\",{\"1\":{\"359\":1}}],[\"切割问题\",{\"1\":{\"359\":1}}],[\"穷举所有可能\",{\"1\":{\"359\":1}}],[\"问题\",{\"0\":{\"377\":1,\"433\":1},\"1\":{\"358\":1}}],[\"回溯\",{\"1\":{\"360\":1},\"2\":{\"362\":1}}],[\"回溯三要素\",{\"1\":{\"360\":1}}],[\"回溯法解决的问题都可以抽象为\",{\"1\":{\"360\":1}}],[\"回溯法\",{\"1\":{\"359\":1}}],[\"回溯的本质是穷举\",{\"1\":{\"359\":1}}],[\"回溯函数也就是递归函数\",{\"1\":{\"358\":1}}],[\"回溯问题可以抽象为\",{\"1\":{\"358\":1}}],[\"回溯算法\",{\"1\":{\"358\":1}}],[\"回溯算法理论基础\",{\"0\":{\"357\":1}}],[\"回想了一下自己大学的学习过程\",{\"1\":{\"6\":1}}],[\"线性探测法\",{\"0\":{\"354\":1}}],[\"线性遍历字符串\",{\"1\":{\"104\":1,\"106\":1}}],[\"冲突的位置存储在链表中\",{\"1\":{\"353\":1}}],[\"拉链法\",{\"0\":{\"353\":1}}],[\"理论\",{\"0\":{\"375\":1,\"437\":1}}],[\"理论上一定存在\",{\"1\":{\"352\":1}}],[\"理解递归\",{\"1\":{\"177\":1}}],[\"比较并交换与较大子节点\",{\"1\":{\"438\":1}}],[\"比所有数都大\",{\"1\":{\"368\":1}}],[\"比如\",{\"1\":{\"351\":1}}],[\"比长度更大\",{\"1\":{\"328\":1}}],[\"映射到\",{\"1\":{\"351\":1}}],[\"哈希冲突\",{\"0\":{\"352\":1},\"1\":{\"352\":1}}],[\"哈希函数\",{\"0\":{\"351\":1}}],[\"哈希表是什么\",{\"0\":{\"350\":1}}],[\"哈希表基础理论\",{\"0\":{\"349\":1}}],[\"哈希表所用的空间\",{\"1\":{\"284\":1}}],[\"哈希表计数或者数组计数\",{\"1\":{\"264\":1}}],[\"哈希表记录\",{\"0\":{\"226\":1}}],[\"哈希表存储元素的开销\",{\"1\":{\"17\":1}}],[\"哈希表存储的\",{\"1\":{\"16\":1}}],[\"哈希表\",{\"1\":{\"14\":1,\"114\":1,\"152\":1,\"225\":1,\"262\":1,\"350\":1,\"444\":1},\"2\":{\"19\":1,\"157\":1,\"230\":1,\"258\":1,\"267\":1,\"286\":1,\"356\":1}}],[\"采用双指针\",{\"1\":{\"344\":1}}],[\"采用双指针的方式\",{\"1\":{\"87\":1}}],[\"越界退出循环\",{\"1\":{\"369\":1}}],[\"越小\",{\"1\":{\"344\":1}}],[\"越大\",{\"1\":{\"344\":1}}],[\"绝对值大小的比较\",{\"1\":{\"343\":1}}],[\"已访问的节点为灰色\",{\"1\":{\"396\":1,\"400\":1}}],[\"已经满足最大堆的性质\",{\"1\":{\"438\":1}}],[\"已经被判断了\",{\"1\":{\"367\":1}}],[\"已经把链表分成后两部分\",{\"1\":{\"177\":1}}],[\"已按\",{\"1\":{\"340\":1}}],[\"非递减\",{\"1\":{\"344\":1}}],[\"非递减顺序\",{\"1\":{\"340\":3}}],[\"非字母异位词\",{\"1\":{\"226\":2}}],[\"哨兵节点\",{\"1\":{\"333\":2}}],[\"除了存储答案的数组以外\",{\"1\":{\"344\":1}}],[\"除此之外\",{\"1\":{\"333\":1}}],[\"除去开头和末尾的空白字符\",{\"1\":{\"104\":1}}],[\"消耗\",{\"1\":{\"332\":3,\"335\":4}}],[\"头插节点\",{\"0\":{\"428\":1}}],[\"头尾比较\",{\"1\":{\"344\":1}}],[\"头节点\",{\"1\":{\"332\":1,\"428\":1}}],[\"头结点要特殊处理\",{\"1\":{\"162\":1}}],[\"插入元素的过程\",{\"1\":{\"438\":1}}],[\"插入和删除元素\",{\"1\":{\"365\":1}}],[\"插入\",{\"1\":{\"331\":1,\"432\":1}}],[\"插入哈希表\",{\"1\":{\"15\":1}}],[\"调用次数之和\",{\"1\":{\"332\":1,\"335\":1}}],[\"调用\",{\"1\":{\"328\":1}}],[\"调用你的实现\",{\"1\":{\"233\":1}}],[\"库\",{\"1\":{\"328\":1}}],[\"现在头节点是新节点\",{\"1\":{\"428\":1}}],[\"现在\",{\"1\":{\"328\":1}}],[\"等于链表的长度\",{\"1\":{\"328\":1}}],[\"等到再\",{\"1\":{\"291\":1}}],[\"新节点\",{\"1\":{\"428\":3}}],[\"新节点的\",{\"1\":{\"428\":1}}],[\"新节点的头节点为null\",{\"1\":{\"428\":1}}],[\"新节点为白色\",{\"1\":{\"396\":1,\"400\":1}}],[\"新节点会成为链表的第一个节点\",{\"1\":{\"328\":1}}],[\"新的头节点\",{\"1\":{\"160\":1}}],[\"设树的高度为\",{\"1\":{\"383\":1}}],[\"设计时间复杂度为\",{\"1\":{\"340\":1}}],[\"设计并实现自己的链表\",{\"1\":{\"328\":1}}],[\"设计链表\",{\"0\":{\"326\":1,\"327\":1},\"1\":{\"415\":1}}],[\"设置一个虚拟头节点\",{\"1\":{\"220\":1}}],[\"设置\",{\"1\":{\"4\":2}}],[\"剩下的就是答案\",{\"1\":{\"322\":1}}],[\"至少大于等于\",{\"1\":{\"319\":1}}],[\"至少存在一个\",{\"1\":{\"101\":1}}],[\"写一个函数搜索\",{\"1\":{\"317\":1}}],[\"整个链式结构中不存在环\",{\"1\":{\"443\":1}}],[\"整型数组\",{\"1\":{\"317\":1}}],[\"整数\",{\"1\":{\"13\":1}}],[\"升序\",{\"1\":{\"317\":1}}],[\"二叉堆\",{\"1\":{\"438\":2}}],[\"二叉堆插入\",{\"1\":{\"438\":1}}],[\"二叉\",{\"1\":{\"405\":1}}],[\"二叉数的遍历主要有前中后遍历和层次遍历\",{\"1\":{\"387\":1}}],[\"二叉搜索树\",{\"0\":{\"386\":1}}],[\"二叉树节点类\",{\"1\":{\"381\":1}}],[\"二叉树退化成一条链\",{\"1\":{\"137\":1}}],[\"二叉树退化为链表\",{\"1\":{\"25\":1,\"201\":1}}],[\"二叉树定义如下\",{\"1\":{\"64\":1}}],[\"二叉树的层平均值\",{\"1\":{\"408\":1}}],[\"二叉树的层次遍历ii\",{\"1\":{\"408\":1}}],[\"二叉树的层序遍历\",{\"1\":{\"408\":1}}],[\"二叉树的高度\",{\"1\":{\"381\":1}}],[\"二叉树的遍历中每个节点会被访问一次且只会被访问一次\",{\"1\":{\"293\":1,\"295\":1}}],[\"二叉树的节点个数的范围是\",{\"1\":{\"131\":1,\"289\":1}}],[\"二叉树的右视图\",{\"0\":{\"129\":1,\"130\":1},\"1\":{\"408\":1}}],[\"二叉树的最小深度\",{\"0\":{\"53\":1,\"54\":1},\"1\":{\"381\":1,\"408\":1}}],[\"二叉树的最大深度其实跟二叉的高度的定义是一致\",{\"1\":{\"381\":1}}],[\"二叉树的最大深度\",{\"0\":{\"30\":1,\"31\":1},\"1\":{\"34\":1,\"35\":1,\"381\":1,\"408\":1}}],[\"二叉树的\",{\"1\":{\"32\":1}}],[\"二叉树\",{\"1\":{\"33\":1,\"56\":1,\"65\":1,\"73\":1,\"132\":1,\"290\":1},\"2\":{\"29\":1,\"40\":1,\"61\":1,\"70\":1,\"80\":1,\"139\":1,\"205\":1,\"297\":1,\"410\":1}}],[\"二分法\",{\"0\":{\"366\":1}}],[\"二分查找模版\",{\"0\":{\"368\":1,\"369\":1}}],[\"二分查找模板\",{\"0\":{\"367\":1}}],[\"二分查找\",{\"0\":{\"315\":1,\"316\":1},\"2\":{\"325\":1,\"346\":1}}],[\"缩小\",{\"1\":{\"368\":1}}],[\"缩小左边界\",{\"1\":{\"313\":1}}],[\"缩小下边界\",{\"1\":{\"313\":1}}],[\"缩小右边界\",{\"1\":{\"313\":1}}],[\"缩小上边界\",{\"1\":{\"313\":1}}],[\"区间为空\",{\"1\":{\"368\":1}}],[\"区间不存在\",{\"1\":{\"367\":1}}],[\"区间不为空\",{\"1\":{\"319\":1}}],[\"区间定义\",{\"1\":{\"319\":1}}],[\"区间\",{\"1\":{\"313\":4}}],[\"区间内\",{\"1\":{\"32\":1}}],[\"矩阵中心数字无法在迭代过程中被填充的问题\",{\"1\":{\"311\":1}}],[\"作为尾节点\",{\"1\":{\"333\":1}}],[\"作为头节点\",{\"1\":{\"333\":1}}],[\"作为迭代条件\",{\"1\":{\"311\":1}}],[\"作为主要的队列\",{\"1\":{\"194\":1}}],[\"上的\",{\"1\":{\"364\":1}}],[\"上边界缩减\",{\"1\":{\"311\":1}}],[\"上反复执行重复项删除操作\",{\"1\":{\"43\":1}}],[\"模拟类的题目在数组中很常见\",{\"1\":{\"372\":1}}],[\"模拟行为\",{\"0\":{\"372\":1}}],[\"模拟\",{\"1\":{\"310\":1}}],[\"模拟链表串联\",{\"0\":{\"77\":1}}],[\"正方形矩阵\",{\"1\":{\"309\":1}}],[\"正则匹配连续的空白字符作为分隔符分割\",{\"1\":{\"104\":1}}],[\"生成一个包含\",{\"1\":{\"309\":1}}],[\"螺旋矩阵\",{\"0\":{\"307\":1,\"308\":1}}],[\"极端的情况是\",{\"1\":{\"304\":1}}],[\"范围\",{\"1\":{\"302\":1}}],[\"范围内\",{\"1\":{\"64\":1}}],[\"维护该层的最大值\",{\"1\":{\"294\":1}}],[\"到链表中\",{\"1\":{\"328\":1}}],[\"到\",{\"1\":{\"309\":1}}],[\"到同层节点时\",{\"1\":{\"291\":1}}],[\"到达尾节点\",{\"1\":{\"126\":1}}],[\"默认该节点是该层的最大值\",{\"1\":{\"291\":1}}],[\"−\",{\"1\":{\"283\":2}}],[\"−1\",{\"1\":{\"226\":1}}],[\"四数相加\",{\"0\":{\"279\":1,\"280\":1}}],[\"四数之和\",{\"0\":{\"111\":1,\"112\":1}}],[\"过程中也按\",{\"1\":{\"273\":1}}],[\"过去又发生了什么\",{\"1\":{\"9\":1}}],[\"参考垃圾回收算法中的三色标记\",{\"1\":{\"400\":1}}],[\"参考垃圾回收算法中标记法\",{\"1\":{\"396\":1}}],[\"参见示例\",{\"1\":{\"270\":1}}],[\"参数\",{\"1\":{\"360\":1}}],[\"参数根据情况而定\",{\"1\":{\"360\":1}}],[\"参数及返回值\",{\"1\":{\"201\":1}}],[\"参数与返回值\",{\"1\":{\"23\":1}}],[\"值分隔\",{\"1\":{\"270\":1}}],[\"叉树\",{\"1\":{\"270\":1,\"272\":2}}],[\"叉树的层序遍历\",{\"0\":{\"268\":1,\"269\":1}}],[\"固定长度的子数组\",{\"1\":{\"371\":2}}],[\"固定长度\",{\"1\":{\"265\":1}}],[\"字母总数为\",{\"1\":{\"264\":1}}],[\"字符中的前\",{\"1\":{\"300\":1}}],[\"字符数组尾元素\",{\"1\":{\"244\":1}}],[\"字符怎么办\",{\"1\":{\"224\":1}}],[\"字符串模式匹配问题\",{\"1\":{\"371\":1}}],[\"字符串不为空\",{\"1\":{\"48\":1}}],[\"字符串\",{\"0\":{\"103\":1},\"1\":{\"44\":1,\"102\":1,\"143\":1,\"243\":1,\"301\":1},\"2\":{\"52\":1,\"110\":1,\"148\":1,\"248\":1,\"306\":1}}],[\"多个线程访问有限资源\",{\"1\":{\"438\":1}}],[\"多个输入对应相同输出\",{\"1\":{\"352\":1}}],[\"多\",{\"1\":{\"263\":1}}],[\"针对该字母的数量比\",{\"1\":{\"263\":1}}],[\"出栈顺序\",{\"1\":{\"399\":1}}],[\"出栈一个元素\",{\"1\":{\"397\":1}}],[\"出现在\",{\"1\":{\"317\":1}}],[\"出现数量\",{\"1\":{\"263\":1}}],[\"出队节点\",{\"1\":{\"202\":1}}],[\"出队列一次\",{\"1\":{\"135\":1,\"137\":1}}],[\"出队\",{\"1\":{\"75\":1,\"76\":1}}],[\"出队串联\",{\"0\":{\"74\":1}}],[\"里面的字符构成\",{\"1\":{\"261\":1}}],[\"能满足\",{\"1\":{\"281\":1}}],[\"能不能由\",{\"1\":{\"261\":1}}],[\"能写一写自己的所思所想\",{\"1\":{\"8\":1}}],[\"赎金信\",{\"0\":{\"259\":1,\"260\":1}}],[\"转换成数组\",{\"1\":{\"256\":1}}],[\"转化为字符串并返回\",{\"1\":{\"106\":1}}],[\"计数器\",{\"1\":{\"438\":1}}],[\"计数\",{\"1\":{\"256\":1}}],[\"计算滑动窗口的总和\",{\"1\":{\"185\":1}}],[\"计算每一位的平方和\",{\"1\":{\"155\":1}}],[\"计算树的深度需要遍历所有节点\",{\"1\":{\"36\":1,\"38\":1}}],[\"计算节点\",{\"1\":{\"34\":2}}],[\"暂无\",{\"1\":{\"253\":1}}],[\"暂存节点\",{\"1\":{\"199\":1}}],[\"唯一\",{\"1\":{\"251\":1}}],[\"唯一可能的三元组和为\",{\"1\":{\"92\":1}}],[\"唯一可能的三元组和不为\",{\"1\":{\"92\":1}}],[\"常数的空间\",{\"1\":{\"246\":1}}],[\"与值\",{\"1\":{\"350\":1}}],[\"与\",{\"1\":{\"245\":1}}],[\"码表中的可打印字符\",{\"1\":{\"242\":1}}],[\"拷贝覆盖\",{\"1\":{\"236\":1}}],[\"题意\",{\"1\":{\"235\":1}}],[\"题目数据\",{\"1\":{\"443\":1}}],[\"题目\",{\"0\":{\"408\":1,\"438\":1}}],[\"题目要求不重复\",{\"1\":{\"96\":1}}],[\"题目描述\",{\"0\":{\"13\":1,\"22\":1,\"32\":1,\"43\":1,\"55\":1,\"64\":1,\"73\":1,\"83\":1,\"92\":1,\"101\":1,\"113\":1,\"122\":1,\"131\":1,\"142\":1,\"151\":1,\"160\":1,\"171\":1,\"183\":1,\"191\":1,\"199\":1,\"208\":1,\"216\":1,\"224\":1,\"233\":1,\"242\":1,\"251\":1,\"261\":1,\"270\":1,\"281\":1,\"289\":1,\"300\":1,\"309\":1,\"317\":1,\"328\":1,\"340\":1,\"443\":1}}],[\"题目地址\",{\"0\":{\"12\":1,\"21\":1,\"31\":1,\"42\":1,\"54\":1,\"63\":1,\"72\":1,\"82\":1,\"91\":1,\"100\":1,\"112\":1,\"121\":1,\"130\":1,\"141\":1,\"150\":1,\"159\":1,\"170\":1,\"182\":1,\"190\":1,\"198\":1,\"207\":1,\"215\":1,\"223\":1,\"232\":1,\"241\":1,\"250\":1,\"260\":1,\"269\":1,\"280\":1,\"288\":1,\"299\":1,\"308\":1,\"316\":1,\"327\":1,\"339\":1,\"442\":1}}],[\"评测机将使用以下代码测试您的解决方案\",{\"1\":{\"233\":1}}],[\"评测系统内部使用整数\",{\"1\":{\"83\":1}}],[\"使得区间不断向右收缩\",{\"1\":{\"369\":1}}],[\"使\",{\"1\":{\"233\":1}}],[\"使用的是单向链表\",{\"1\":{\"433\":1}}],[\"使用颜色标记节点的状态\",{\"1\":{\"396\":1,\"400\":1}}],[\"使用双重循环进行遍历求和\",{\"1\":{\"284\":1}}],[\"使用双指针\",{\"1\":{\"85\":1,\"105\":1,\"126\":1}}],[\"使用同样的遍历方式\",{\"1\":{\"283\":1}}],[\"使用字母的特性\",{\"1\":{\"228\":1}}],[\"使用哈希表进行记录不同字母出现的次数\",{\"1\":{\"227\":1}}],[\"使用变量\",{\"1\":{\"218\":1}}],[\"使用标准的栈操作\",{\"1\":{\"208\":1}}],[\"使用两个集合分别存储两个数组中的元素需要\",{\"1\":{\"256\":1}}],[\"使用两个指针分别指向位置\",{\"1\":{\"342\":1}}],[\"使用两个指针\",{\"1\":{\"244\":1}}],[\"使用两个指针来判断遍历情况\",{\"1\":{\"48\":1}}],[\"使用两个变量\",{\"1\":{\"218\":1}}],[\"使用两个队列\",{\"1\":{\"193\":1}}],[\"使用两重循环分别枚举前两个数\",{\"1\":{\"115\":1,\"116\":1}}],[\"使用\",{\"1\":{\"78\":1,\"103\":2,\"242\":1,\"294\":1,\"302\":1,\"311\":1,\"390\":1,\"395\":1}}],[\"使用递归解题也符合要求\",{\"1\":{\"64\":1,\"73\":1}}],[\"使用一个哈希表map存储\",{\"1\":{\"283\":1}}],[\"使用一个队列存储每一层的遍历结果\",{\"1\":{\"202\":1}}],[\"使用一个队列存储每一层的节点\",{\"1\":{\"133\":1}}],[\"使用一个队列维护节点\",{\"1\":{\"27\":1}}],[\"使用一个集合\",{\"1\":{\"45\":1}}],[\"使用队列存储遍历过程中的每一对节点\",{\"1\":{\"26\":1}}],[\"更改\",{\"1\":{\"233\":1}}],[\"更新\",{\"1\":{\"304\":1}}],[\"更新start\",{\"1\":{\"108\":1}}],[\"更新为\",{\"1\":{\"78\":1}}],[\"您需要执行以下操作\",{\"1\":{\"233\":1}}],[\"各字符时\",{\"1\":{\"226\":1}}],[\"各字符时执行\",{\"1\":{\"226\":1}}],[\"统计\",{\"1\":{\"226\":2}}],[\"某对应字母数量不同\",{\"1\":{\"226\":1}}],[\"某个章节学习到了泰勒公式\",{\"1\":{\"6\":1}}],[\"互为字母异位词\",{\"1\":{\"224\":1}}],[\"若两链表\",{\"1\":{\"445\":2}}],[\"若两字符串互为字母异位词\",{\"1\":{\"226\":1}}],[\"若两个四元组元素一一对应\",{\"1\":{\"113\":1}}],[\"若\",{\"1\":{\"224\":1,\"226\":2}}],[\"编写一个函数\",{\"1\":{\"242\":1}}],[\"编写一个函数来判断\",{\"1\":{\"224\":1}}],[\"编写一个算法来判断一个数\",{\"1\":{\"151\":1}}],[\"待交换的节点\",{\"1\":{\"218\":1}}],[\"故空间复杂度为\",{\"1\":{\"211\":1}}],[\"放进\",{\"1\":{\"210\":1}}],[\"放进队列中\",{\"1\":{\"45\":1}}],[\"或根结点\",{\"1\":{\"381\":1}}],[\"或\",{\"1\":{\"210\":1}}],[\"或者\",{\"1\":{\"191\":1,\"208\":2,\"367\":1,\"387\":1}}],[\"或者链表中的一个有效索引\",{\"1\":{\"83\":1}}],[\"元素的顺序可能发生改变\",{\"1\":{\"233\":1}}],[\"元素\",{\"1\":{\"210\":2}}],[\"执行\",{\"1\":{\"208\":1}}],[\"换句话说\",{\"1\":{\"208\":1}}],[\"推到队列的末尾\",{\"1\":{\"208\":1}}],[\"额外空间\",{\"1\":{\"203\":1}}],[\"额外空间复杂度的\",{\"1\":{\"101\":1}}],[\"退出循环\",{\"1\":{\"202\":1,\"344\":1,\"367\":2}}],[\"循环链表\",{\"0\":{\"425\":1},\"1\":{\"425\":1}}],[\"循环不变量原则\",{\"1\":{\"372\":1}}],[\"循环的工作\",{\"1\":{\"370\":1}}],[\"循环下完成两个\",{\"1\":{\"370\":1}}],[\"循环停止条件\",{\"1\":{\"367\":1,\"368\":1}}],[\"循环就终止\",{\"1\":{\"319\":1}}],[\"循环终止条件\",{\"1\":{\"312\":1,\"319\":1,\"447\":1}}],[\"循环条件是当前链表还有2个以上的节点\",{\"1\":{\"219\":1}}],[\"循环遍历\",{\"1\":{\"202\":1}}],[\"循环至单词的末尾\",{\"1\":{\"108\":1}}],[\"节点的高度\",{\"1\":{\"381\":1}}],[\"节点的深度\",{\"1\":{\"381\":1}}],[\"节点的子节点的数量\",{\"1\":{\"381\":1}}],[\"节点的度\",{\"1\":{\"381\":1}}],[\"节点所在的层\",{\"1\":{\"381\":1}}],[\"节点值\",{\"1\":{\"381\":1,\"426\":1}}],[\"节点之间的链接\",{\"1\":{\"381\":1}}],[\"节点入队\",{\"1\":{\"202\":1}}],[\"节点是这一行的第一个\",{\"1\":{\"75\":1,\"76\":1}}],[\"提前将\",{\"1\":{\"202\":1}}],[\"提示\",{\"1\":{\"13\":1,\"22\":1,\"32\":1,\"43\":1,\"55\":1,\"64\":1,\"73\":1,\"83\":1,\"92\":1,\"101\":1,\"113\":1,\"122\":1,\"131\":1,\"142\":1,\"151\":1,\"160\":1,\"171\":1,\"183\":1,\"191\":1,\"199\":1,\"208\":1,\"216\":1,\"224\":1,\"233\":1,\"242\":1,\"251\":1,\"261\":1,\"270\":1,\"281\":1,\"289\":1,\"300\":1,\"309\":1,\"317\":1,\"328\":1,\"340\":1,\"443\":1}}],[\"交集\",{\"1\":{\"251\":1}}],[\"交换他们的元素\",{\"1\":{\"438\":1}}],[\"交换链表中的节点\",{\"1\":{\"414\":1}}],[\"交换\",{\"1\":{\"202\":1,\"244\":1,\"245\":1}}],[\"交换左右子树\",{\"1\":{\"201\":1}}],[\"交替向中间移动\",{\"1\":{\"94\":1,\"95\":1}}],[\"方法输出\",{\"1\":{\"200\":1}}],[\"旧\",{\"1\":{\"199\":1}}],[\"列队\",{\"2\":{\"196\":1}}],[\"列表中\",{\"1\":{\"391\":1}}],[\"列表中的节点数目在范围\",{\"1\":{\"160\":1}}],[\"列表\",{\"1\":{\"191\":1}}],[\"操作系统的内存栈必然就会溢出\",{\"1\":{\"406\":1}}],[\"操作的场景中\",{\"1\":{\"405\":1}}],[\"操作的情况\",{\"1\":{\"211\":1}}],[\"操作只发生在结构的一端\",{\"1\":{\"375\":1}}],[\"操作都是\",{\"1\":{\"211\":1}}],[\"操作\",{\"1\":{\"208\":1}}],[\"操作是合法的\",{\"1\":{\"208\":1}}],[\"操作为\",{\"1\":{\"194\":4}}],[\"操作视为寻找下一个数\",{\"1\":{\"154\":1}}],[\"次交换\",{\"1\":{\"246\":1}}],[\"次\",{\"1\":{\"191\":1,\"208\":1,\"211\":1}}],[\"否则也不会导致\",{\"1\":{\"369\":1}}],[\"否则返回\",{\"1\":{\"261\":1,\"317\":1}}],[\"否则\",{\"1\":{\"191\":1,\"208\":1}}],[\"否则就让前一个节点指向他\",{\"1\":{\"75\":1}}],[\"否则就将元素放进数组\",{\"1\":{\"48\":1}}],[\"压入栈顶\",{\"1\":{\"191\":1}}],[\"类型\",{\"0\":{\"382\":1}}],[\"类是很粗糙的\",{\"1\":{\"375\":1}}],[\"类似之前算法的处理方式\",{\"1\":{\"368\":1}}],[\"类\",{\"1\":{\"191\":1,\"208\":1,\"328\":1,\"377\":1}}],[\"用于处理具有过期时间\",{\"1\":{\"438\":1}}],[\"用于保存遍历序列\",{\"1\":{\"389\":1}}],[\"用作元素的集合\",{\"1\":{\"375\":1}}],[\"用户评测\",{\"1\":{\"233\":1}}],[\"用一个队列存放\",{\"1\":{\"210\":2}}],[\"用栈实现队列\",{\"0\":{\"206\":1,\"207\":1}}],[\"用队列实现栈\",{\"0\":{\"189\":1,\"190\":1}}],[\"用循环解决\",{\"1\":{\"163\":1}}],[\"滑动串口的指针和右指针\",{\"1\":{\"187\":1}}],[\"滑动窗口\",{\"0\":{\"185\":1,\"371\":1},\"1\":{\"184\":1}}],[\"窗口的长度为子数组的最小长度\",{\"1\":{\"185\":1}}],[\"符合题目时\",{\"1\":{\"185\":1}}],[\"子字符串问题\",{\"1\":{\"371\":2}}],[\"子集问题\",{\"1\":{\"359\":1}}],[\"子数组\",{\"1\":{\"183\":2}}],[\"子模块\",{\"1\":{\"4\":1}}],[\"长度\",{\"1\":{\"447\":2}}],[\"长度为\",{\"1\":{\"445\":2}}],[\"长度为奇数时\",{\"1\":{\"146\":1}}],[\"长度正确的预期答案\",{\"1\":{\"233\":1}}],[\"长度不相等\",{\"1\":{\"226\":1}}],[\"长度最小的子数组\",{\"0\":{\"181\":1,\"182\":1}}],[\"反向\",{\"1\":{\"175\":1}}],[\"反转链表\",{\"0\":{\"169\":1,\"170\":1}}],[\"反转字符串\",{\"0\":{\"240\":1,\"241\":1,\"298\":1,\"299\":1},\"1\":{\"108\":1}}],[\"反转字符串中的单词\",{\"0\":{\"99\":1,\"100\":1}}],[\"反转后的字符串需要将单词间的空格减少到仅有一个\",{\"1\":{\"101\":1}}],[\"反转后的字符串中不能存在前导空格和尾随空格\",{\"1\":{\"101\":1}}],[\"引用\",{\"1\":{\"174\":1,\"328\":1}}],[\"引入一个\",{\"1\":{\"77\":1}}],[\"直接返回\",{\"1\":{\"199\":1,\"319\":1}}],[\"直接删除\",{\"0\":{\"161\":1}}],[\"直到满足最大堆的性质\",{\"1\":{\"438\":1}}],[\"直到查询到不冲突\",{\"1\":{\"354\":1}}],[\"直到不满足\",{\"1\":{\"187\":1}}],[\"直到符合最小窗口的长度\",{\"1\":{\"187\":1}}],[\"直到最后一个节点才进行处理\",{\"1\":{\"133\":1,\"134\":1}}],[\"直到\",{\"1\":{\"78\":1}}],[\"直到无法继续删除\",{\"1\":{\"43\":1}}],[\"直到遍历完成\",{\"1\":{\"37\":1}}],[\"直到现在\",{\"1\":{\"8\":1}}],[\"虚拟节点\",{\"1\":{\"160\":1}}],[\"虚拟头节点\",{\"0\":{\"164\":1,\"218\":1,\"412\":1},\"1\":{\"77\":1,\"78\":1}}],[\"移除所有数值等于\",{\"1\":{\"233\":1}}],[\"移除元素\",{\"0\":{\"231\":1,\"232\":1}}],[\"移除并返回栈顶元素\",{\"1\":{\"191\":1}}],[\"移除链表元素\",{\"0\":{\"158\":1,\"159\":1},\"1\":{\"412\":1}}],[\"移动的时候要注意处理相同元素情况\",{\"1\":{\"94\":2}}],[\"移动\",{\"1\":{\"94\":2}}],[\"假设一种极端情况\",{\"1\":{\"368\":1}}],[\"假设链表中的所有节点下标从\",{\"1\":{\"328\":1}}],[\"假设\",{\"1\":{\"233\":1}}],[\"假设所有操作都是有效的\",{\"1\":{\"208\":1}}],[\"假设循环中有\",{\"1\":{\"155\":1}}],[\"假如这个重复元素是解\",{\"1\":{\"15\":1}}],[\"成本是\",{\"1\":{\"155\":1}}],[\"快慢指针法\",{\"1\":{\"370\":1}}],[\"快慢指针\",{\"0\":{\"413\":1},\"1\":{\"155\":1}}],[\"快乐数\",{\"0\":{\"149\":1,\"150\":1},\"1\":{\"151\":2,\"154\":1}}],[\"即树退化为链表时\",{\"1\":{\"395\":1}}],[\"即满二叉树时\",{\"1\":{\"390\":1}}],[\"即不断向左收缩\",{\"1\":{\"368\":1}}],[\"即每个节点要存储本身的值\",{\"1\":{\"333\":1}}],[\"即从左到右\",{\"1\":{\"270\":1}}],[\"即为新的数组长度\",{\"1\":{\"235\":1}}],[\"即\",{\"1\":{\"216\":1,\"218\":1,\"367\":1,\"368\":1,\"445\":2,\"447\":1}}],[\"即使其中一个操作可能花费较长时间\",{\"1\":{\"208\":1}}],[\"即看成一个链表\",{\"1\":{\"154\":1}}],[\"即第\",{\"1\":{\"66\":1}}],[\"检测一个链表是否有环\",{\"1\":{\"153\":1}}],[\"检查它是否轴对称\",{\"1\":{\"22\":1}}],[\"链长度为\",{\"1\":{\"447\":2}}],[\"链接在内存中各个节点\",{\"1\":{\"426\":1}}],[\"链中的所有其他数字都是节点\",{\"1\":{\"153\":1}}],[\"链表必须\",{\"1\":{\"443\":1}}],[\"链表性能分析\",{\"0\":{\"432\":1}}],[\"链表操作\",{\"0\":{\"427\":1}}],[\"链表节点类\",{\"1\":{\"426\":1}}],[\"链表节点交换的指针变动\",{\"1\":{\"219\":1}}],[\"链表的组成单位是\",{\"1\":{\"426\":1}}],[\"链表的基本操作\",{\"0\":{\"415\":1}}],[\"链表在内存中可不是连续分布的\",{\"1\":{\"426\":1}}],[\"链表存储方式\",{\"0\":{\"426\":1}}],[\"链表类型\",{\"0\":{\"422\":1}}],[\"链表是通过\",{\"1\":{\"426\":1}}],[\"链表是一种通过指针串联在一起的线性结构\",{\"1\":{\"421\":1}}],[\"链表是什么\",{\"0\":{\"421\":1}}],[\"链表理论基础\",{\"0\":{\"420\":1}}],[\"链表相交\",{\"0\":{\"416\":1,\"441\":1,\"442\":1},\"1\":{\"416\":1}}],[\"链表总结篇\",{\"0\":{\"411\":1}}],[\"链表基本操作\",{\"1\":{\"329\":1}}],[\"链表结果\",{\"1\":{\"329\":1}}],[\"链表变为\",{\"1\":{\"328\":2}}],[\"链表可以选用迭代或递归方式完成反转\",{\"1\":{\"171\":1}}],[\"链表中数据的插入\",{\"1\":{\"433\":1}}],[\"链表中节点的数目在范围\",{\"1\":{\"216\":1}}],[\"链表中节点的数目范围是\",{\"1\":{\"171\":1}}],[\"链表中节点的数目范围在范围\",{\"1\":{\"83\":1}}],[\"链表中结点的数目为\",{\"1\":{\"122\":1}}],[\"链表中没有环\",{\"1\":{\"83\":1}}],[\"链表中有一个环\",{\"1\":{\"83\":2}}],[\"链表\",{\"1\":{\"83\":1,\"84\":1,\"123\":1,\"160\":1,\"172\":1,\"217\":1,\"350\":1,\"443\":6,\"444\":1},\"2\":{\"89\":1,\"128\":1,\"168\":1,\"180\":1,\"337\":1,\"419\":1,\"435\":1,\"449\":1}}],[\"组成的新数组\",{\"1\":{\"340\":1}}],[\"组成\",{\"1\":{\"142\":1}}],[\"组合问题\",{\"1\":{\"359\":1}}],[\"组合\",{\"1\":{\"94\":1}}],[\"按照通常的思维\",{\"1\":{\"313\":1}}],[\"按照题目进行模拟\",{\"1\":{\"311\":1}}],[\"按照从顶部到底部的顺序\",{\"1\":{\"131\":1}}],[\"按照层序遍历的方式\",{\"1\":{\"74\":1}}],[\"想象自己站在它的右侧\",{\"1\":{\"131\":1}}],[\"刚好指向倒数第\",{\"1\":{\"126\":1}}],[\"刚好走好倒数第\",{\"1\":{\"124\":1}}],[\"怎么知道是倒数第\",{\"1\":{\"126\":1}}],[\"怎么能靠单纯的思考就能的出来呢\",{\"1\":{\"6\":1}}],[\"先将根结点入栈\",{\"1\":{\"397\":1}}],[\"先记录队列中的结点数量\",{\"1\":{\"390\":1}}],[\"先进先出\",{\"1\":{\"388\":1}}],[\"先判断长度一致\",{\"1\":{\"228\":1}}],[\"先判断头结点的情况\",{\"1\":{\"161\":1}}],[\"先存储\",{\"1\":{\"174\":1}}],[\"先递归右子树\",{\"1\":{\"136\":1,\"137\":1}}],[\"先走\",{\"1\":{\"124\":1,\"126\":1}}],[\"先翻转整个字符串\",{\"1\":{\"107\":1}}],[\"枚举四元组的时间复杂度是\",{\"1\":{\"117\":1}}],[\"枚举第二个数\",{\"1\":{\"117\":1}}],[\"枚举第一个数\",{\"1\":{\"117\":1}}],[\"跳过重复数字\",{\"1\":{\"117\":1}}],[\"跳过单词间空格\",{\"1\":{\"106\":1}}],[\"81\",{\"1\":{\"155\":4}}],[\"82\",{\"1\":{\"151\":3}}],[\"8\",{\"1\":{\"113\":1,\"251\":1,\"270\":2,\"309\":1,\"368\":1,\"443\":7}}],[\"任意二叉树\",{\"0\":{\"404\":1}}],[\"任意放一个进入结果数组即可\",{\"1\":{\"343\":1}}],[\"任意顺序\",{\"1\":{\"113\":1}}],[\"任何时候都要去寻找反馈\",{\"1\":{\"9\":1}}],[\"翻转链表\",{\"1\":{\"413\":1}}],[\"翻转这棵二叉树\",{\"1\":{\"199\":1}}],[\"翻转二叉树是改变树\",{\"1\":{\"200\":1}}],[\"翻转二叉树\",{\"0\":{\"197\":1,\"198\":1}}],[\"翻转单词\",{\"1\":{\"108\":1}}],[\"翻转每一个单词\",{\"1\":{\"108\":1}}],[\"翻转每个单词\",{\"1\":{\"108\":1}}],[\"翻转字符串\",{\"1\":{\"108\":1}}],[\"去替代\",{\"1\":{\"375\":1}}],[\"去找下一个单词\",{\"1\":{\"108\":1}}],[\"去掉字符串末尾的空白字符\",{\"1\":{\"108\":1}}],[\"去掉字符串开头的空白字符\",{\"1\":{\"108\":1}}],[\"去掉多余空格\",{\"1\":{\"108\":1}}],[\"去除空格\",{\"1\":{\"107\":1}}],[\"去串联\",{\"1\":{\"78\":1}}],[\"手写字符串api\",{\"0\":{\"107\":1}}],[\"添加一个元素在数组末尾\",{\"1\":{\"438\":1}}],[\"添加中节点\",{\"1\":{\"401\":3}}],[\"添加左节点\",{\"1\":{\"401\":3}}],[\"添加右节点\",{\"1\":{\"401\":3}}],[\"添加单词\",{\"1\":{\"106\":1}}],[\"添加元素\",{\"1\":{\"50\":2,\"350\":1}}],[\"删除\",{\"1\":{\"433\":1}}],[\"删除为\",{\"1\":{\"432\":1}}],[\"删除链表的第\",{\"1\":{\"415\":1}}],[\"删除链表的中间节点\",{\"1\":{\"414\":1}}],[\"删除链表的倒数第\",{\"0\":{\"121\":1},\"1\":{\"122\":1}}],[\"删除链表的倒数第n个结点\",{\"0\":{\"120\":1}}],[\"删除链表\",{\"1\":{\"414\":1}}],[\"删除倒数第\",{\"0\":{\"414\":1},\"1\":{\"414\":1}}],[\"删除最近添加但尚未删除的元素\",{\"1\":{\"375\":1}}],[\"删除元素\",{\"1\":{\"350\":1}}],[\"删除方式一样\",{\"1\":{\"165\":1}}],[\"删除值相同的头结点后\",{\"1\":{\"163\":1}}],[\"删除节点\",{\"0\":{\"431\":1},\"1\":{\"160\":1,\"331\":1}}],[\"删除首尾空格\",{\"1\":{\"106\":1}}],[\"删除字符串中的所有相邻重复项\",{\"0\":{\"41\":1,\"42\":1}}],[\"倒数第\",{\"1\":{\"125\":1}}],[\"倒序遍历字符串\",{\"1\":{\"105\":1}}],[\"倒序遍历+双指针\",{\"0\":{\"105\":1}}],[\"倒排字符串列表\",{\"1\":{\"103\":1}}],[\"大小的额外空间\",{\"1\":{\"104\":1,\"106\":1}}],[\"大多数情况并非如此\",{\"1\":{\"7\":1}}],[\"占用\",{\"1\":{\"104\":1,\"106\":1,\"203\":1,\"390\":1}}],[\"解数独等等\",{\"1\":{\"359\":1}}],[\"解决什么问题\",{\"0\":{\"359\":1}}],[\"解决\",{\"1\":{\"144\":1}}],[\"解法也相似\",{\"1\":{\"115\":1}}],[\"解法\",{\"1\":{\"101\":1}}],[\"解释\",{\"1\":{\"13\":1,\"43\":1,\"64\":1,\"73\":1,\"83\":3,\"92\":3,\"101\":2,\"151\":1,\"183\":1,\"191\":1,\"208\":1,\"233\":2,\"251\":1,\"281\":1,\"317\":2,\"328\":1,\"340\":1,\"443\":3}}],[\"包含英文大小写字母\",{\"1\":{\"101\":1}}],[\"顺序颠倒且\",{\"1\":{\"101\":1}}],[\"单端队列遵循先进先出\",{\"1\":{\"438\":1}}],[\"单端队列和双端队列\",{\"1\":{\"438\":1}}],[\"单向链表\",{\"1\":{\"332\":1}}],[\"单链表\",{\"0\":{\"423\":1}}],[\"单链表实现\",{\"0\":{\"330\":1}}],[\"单链表中的节点应该具备两个属性\",{\"1\":{\"328\":1}}],[\"单层的最后一个元素就是最右元素\",{\"1\":{\"135\":1}}],[\"单层递归逻辑\",{\"1\":{\"23\":1,\"34\":1,\"36\":1,\"199\":1,\"201\":1}}],[\"单词间应当仅用单个空格分隔\",{\"1\":{\"101\":1}}],[\"单词\",{\"1\":{\"101\":6}}],[\"忽略答案的存储空间\",{\"1\":{\"96\":1}}],[\"往后的查找不满足\",{\"1\":{\"96\":1}}],[\"往中间靠拢\",{\"1\":{\"96\":1}}],[\"此时需遍历\",{\"1\":{\"447\":1}}],[\"此时不需要翻转\",{\"1\":{\"304\":1}}],[\"此时应该是最后一次\",{\"1\":{\"304\":1}}],[\"此时树的高度与节点个数一样\",{\"1\":{\"276\":1}}],[\"此时\",{\"1\":{\"187\":1,\"293\":1,\"311\":1,\"367\":1}}],[\"此时剩余两个元素都\",{\"1\":{\"96\":1}}],[\"此时将队列尾部元素删除\",{\"1\":{\"45\":1}}],[\"排列问题\",{\"1\":{\"359\":1}}],[\"排除重复答案\",{\"1\":{\"96\":1}}],[\"排序后\",{\"1\":{\"340\":1}}],[\"排序的整数数组\",{\"1\":{\"340\":1}}],[\"排序的时间复杂度是\",{\"1\":{\"117\":1}}],[\"排序的时间复杂度为\",{\"1\":{\"94\":1,\"96\":1}}],[\"排序解决重复问题\",{\"1\":{\"116\":1}}],[\"排序\",{\"1\":{\"115\":1,\"233\":1,\"340\":2}}],[\"排序+双指针\",{\"0\":{\"94\":1}}],[\"随后继续交替移动\",{\"1\":{\"96\":1}}],[\"减小总和\",{\"1\":{\"96\":1}}],[\"三重循环枚举\",{\"1\":{\"96\":1}}],[\"三数之和\",{\"0\":{\"90\":1,\"91\":1},\"1\":{\"114\":1,\"115\":1}}],[\"右\",{\"1\":{\"397\":1,\"399\":3}}],[\"右子树\",{\"1\":{\"393\":1,\"394\":1,\"395\":1}}],[\"右子树的所有节点的值\",{\"1\":{\"386\":1}}],[\"右子树的深度\",{\"1\":{\"34\":1}}],[\"右子树的最大深度\",{\"1\":{\"34\":1,\"35\":1,\"36\":1}}],[\"右子节点入队\",{\"1\":{\"389\":1}}],[\"右子节点引用\",{\"1\":{\"381\":1}}],[\"右边界缩减\",{\"1\":{\"311\":1}}],[\"右边\",{\"1\":{\"94\":1}}],[\"有\",{\"1\":{\"445\":1}}],[\"有两个变量\",{\"1\":{\"445\":1}}],[\"有两道题\",{\"1\":{\"381\":1}}],[\"有交点\",{\"1\":{\"443\":1}}],[\"有几种排列方式\",{\"1\":{\"359\":1}}],[\"有序数组的平方\",{\"0\":{\"338\":1,\"339\":1}}],[\"有可能两个指针都指向\",{\"1\":{\"446\":1}}],[\"有可能是\",{\"1\":{\"369\":1}}],[\"有可能是重复答案\",{\"1\":{\"94\":1}}],[\"有可能越界\",{\"1\":{\"303\":1}}],[\"有效的字母异位词\",{\"0\":{\"222\":1,\"223\":1},\"1\":{\"264\":1}}],[\"有效的括号\",{\"0\":{\"140\":1,\"141\":1}}],[\"有效字符串需满足\",{\"1\":{\"142\":1}}],[\"有这么一个问题\",{\"1\":{\"8\":1}}],[\"终止循环\",{\"1\":{\"94\":1}}],[\"终止条件\",{\"1\":{\"23\":1,\"34\":1,\"199\":1,\"201\":1,\"360\":2}}],[\"又是最小\",{\"1\":{\"94\":1}}],[\"记录头节点\",{\"1\":{\"428\":1}}],[\"记录\",{\"1\":{\"263\":1}}],[\"记录对于每个固定指针\",{\"1\":{\"94\":1}}],[\"记得建立\",{\"1\":{\"4\":1}}],[\"处理根节点\",{\"1\":{\"393\":1}}],[\"处理节点\",{\"1\":{\"360\":1}}],[\"处理后变成根节点的右子树\",{\"1\":{\"201\":1}}],[\"处理左子树\",{\"1\":{\"201\":1}}],[\"处理右子树后\",{\"1\":{\"201\":1}}],[\"处理一次即可\",{\"1\":{\"94\":1}}],[\"处\",{\"1\":{\"94\":1}}],[\"暴力枚举\",{\"1\":{\"94\":1}}],[\"答案中不可以包含重复的三元组\",{\"1\":{\"92\":1}}],[\"答案保证唯一\",{\"1\":{\"43\":1}}],[\"请不要使用内置的\",{\"1\":{\"328\":1}}],[\"请找出该二叉树中每一层的最大值\",{\"1\":{\"289\":1}}],[\"请尝试设计一个\",{\"1\":{\"183\":1}}],[\"请尝试使用\",{\"1\":{\"101\":1}}],[\"请你找出并返回两个单链表相交的起始节点\",{\"1\":{\"443\":1}}],[\"请你找出并返回满足下述全部条件且不重复的四元组\",{\"1\":{\"113\":1}}],[\"请你\",{\"1\":{\"340\":1}}],[\"请你计算有多少个元组\",{\"1\":{\"281\":1}}],[\"请你仅使用两个栈实现先入先出队列\",{\"1\":{\"208\":1}}],[\"请你仅使用两个队列实现一个后入先出\",{\"1\":{\"191\":1}}],[\"请你反转链表\",{\"1\":{\"171\":1}}],[\"请你反转字符串中\",{\"1\":{\"101\":1}}],[\"请你删除链表中所有满足\",{\"1\":{\"160\":1}}],[\"请你在该数组中找出\",{\"1\":{\"13\":1}}],[\"请\",{\"1\":{\"92\":1}}],[\"且元素按顺时针顺序螺旋排列的\",{\"1\":{\"309\":1}}],[\"且在同一重循环中不能多次枚举到相同的元素\",{\"1\":{\"115\":1}}],[\"且不包含任何额外的空格\",{\"1\":{\"101\":1}}],[\"且不重复的三元组\",{\"1\":{\"92\":1}}],[\"且\",{\"1\":{\"92\":1}}],[\"k−1\",{\"1\":{\"155\":2}}],[\"k++\",{\"1\":{\"96\":1}}],[\"k\",{\"1\":{\"92\":4,\"94\":9,\"96\":9,\"155\":1,\"233\":11,\"235\":1,\"281\":3,\"300\":8,\"302\":2,\"304\":4,\"417\":1}}],[\"key上\",{\"1\":{\"351\":1}}],[\"key\",{\"1\":{\"16\":1,\"283\":1,\"350\":1,\"351\":1}}],[\"第一次\",{\"1\":{\"446\":1}}],[\"第一次循环后的情况如下\",{\"1\":{\"202\":1}}],[\"第一次符合条件为窗口长度\",{\"1\":{\"187\":1}}],[\"第一次相遇时\",{\"1\":{\"87\":1}}],[\"第一次相遇\",{\"1\":{\"87\":1}}],[\"第三个元素导致的三数之和有可能导致\",{\"1\":{\"96\":1}}],[\"第三个元素会导致和为\",{\"1\":{\"94\":1}}],[\"第三重循环枚举到的元素不小于当前第二重循环枚举到的元素\",{\"1\":{\"96\":1}}],[\"第二个枚举元素的下标要右边移动\",{\"1\":{\"96\":1}}],[\"第二重循环枚举到的元素不小于当前第一重循环枚举到的元素\",{\"1\":{\"96\":1}}],[\"第二次相遇\",{\"1\":{\"87\":1}}],[\"要求也按\",{\"1\":{\"340\":1}}],[\"要注意\",{\"1\":{\"304\":1}}],[\"要更新\",{\"1\":{\"302\":1}}],[\"要移除的值\",{\"1\":{\"233\":1}}],[\"要通过此题\",{\"1\":{\"233\":1}}],[\"要将\",{\"1\":{\"186\":1}}],[\"要删除一个节点\",{\"1\":{\"165\":1}}],[\"要走\",{\"1\":{\"87\":2}}],[\"要时不时接受市场的检验\",{\"1\":{\"9\":1}}],[\"判断条件\",{\"1\":{\"319\":1}}],[\"判断\",{\"1\":{\"261\":1}}],[\"判断字符串是否有效\",{\"1\":{\"142\":1}}],[\"判断是否存在三元组\",{\"1\":{\"92\":1}}],[\"判断链表是否环\",{\"1\":{\"86\":1}}],[\"判断两节点\",{\"1\":{\"23\":2}}],[\"恰好等于\",{\"1\":{\"85\":1}}],[\"圈的环长度\",{\"1\":{\"85\":1}}],[\"走完\",{\"1\":{\"445\":2}}],[\"走两步\",{\"1\":{\"155\":1}}],[\"走一步\",{\"1\":{\"155\":1}}],[\"走了\",{\"1\":{\"87\":2}}],[\"走过的节点数为\",{\"1\":{\"85\":2}}],[\"走到空节点时时\",{\"1\":{\"124\":1}}],[\"走到\",{\"1\":{\"85\":1}}],[\"z\",{\"1\":{\"85\":1,\"87\":1}}],[\"再将\",{\"1\":{\"194\":1}}],[\"再翻转每个单词\",{\"1\":{\"107\":1}}],[\"再到环形入口节点节点数为\",{\"1\":{\"85\":1}}],[\"再建立第\",{\"1\":{\"66\":1}}],[\"your\",{\"1\":{\"211\":1,\"332\":1}}],[\"y+z\",{\"1\":{\"85\":3}}],[\"y\",{\"1\":{\"85\":1,\"117\":6}}],[\"yml\",{\"1\":{\"4\":2}}],[\"步骤1\",{\"1\":{\"428\":2}}],[\"步骤二\",{\"1\":{\"220\":1}}],[\"步骤三\",{\"1\":{\"220\":1}}],[\"步骤一\",{\"1\":{\"220\":1}}],[\"步才能到达慢跑者\",{\"1\":{\"155\":1}}],[\"步\",{\"1\":{\"85\":1,\"87\":2,\"124\":1,\"126\":1}}],[\"分钟或\",{\"1\":{\"438\":1}}],[\"分析如下\",{\"1\":{\"367\":1}}],[\"分隔开\",{\"1\":{\"101\":1}}],[\"分别出发\",{\"1\":{\"445\":1}}],[\"分别从\",{\"1\":{\"445\":1}}],[\"分别对应的实现类是哪个\",{\"1\":{\"438\":1}}],[\"分别指向待反转的范围\",{\"1\":{\"304\":1}}],[\"分别指向字符数组首元素\",{\"1\":{\"244\":1}}],[\"分别指向滑动窗口的开始位置和结束位置\",{\"1\":{\"185\":1}}],[\"分别在数组索引\",{\"1\":{\"94\":1}}],[\"分别定义为\",{\"1\":{\"85\":1}}],[\"分支\",{\"1\":{\"4\":1}}],[\"环形入口节点到\",{\"1\":{\"85\":1}}],[\"环形证明\",{\"1\":{\"84\":1}}],[\"环形链表\",{\"0\":{\"81\":1,\"82\":1,\"417\":1},\"1\":{\"417\":1}}],[\"仅用\",{\"1\":{\"443\":1}}],[\"仅包含小写字母\",{\"1\":{\"224\":1}}],[\"仅作为临时放置\",{\"1\":{\"194\":1}}],[\"仅由小写英文组成\",{\"1\":{\"300\":1}}],[\"仅由小写英文字母组成\",{\"1\":{\"43\":1}}],[\"仅由括号\",{\"1\":{\"142\":1}}],[\"仅仅是为了标识链表的实际情况\",{\"1\":{\"83\":1}}],[\"开始相交\",{\"1\":{\"443\":1}}],[\"开始\",{\"1\":{\"83\":1,\"328\":1,\"365\":1}}],[\"索引从\",{\"1\":{\"83\":1,\"365\":1}}],[\"来存储元素\",{\"1\":{\"438\":1}}],[\"来作为\",{\"1\":{\"438\":1}}],[\"来说是两个关键点\",{\"1\":{\"387\":1}}],[\"来简化操作\",{\"1\":{\"387\":1}}],[\"来实现这一功能\",{\"1\":{\"438\":1}}],[\"来实现\",{\"1\":{\"387\":1,\"388\":1}}],[\"来定义左边界\",{\"1\":{\"319\":1}}],[\"来模拟一个栈\",{\"1\":{\"208\":1}}],[\"来模拟一个队列\",{\"1\":{\"191\":1}}],[\"来表示链表尾连接到链表中的位置\",{\"1\":{\"83\":1}}],[\"来到大学以后\",{\"1\":{\"6\":1}}],[\"没有交点\",{\"1\":{\"443\":1}}],[\"没有键值相等的节点\",{\"1\":{\"386\":1}}],[\"没有链接到其他子节点的节点\",{\"1\":{\"381\":1}}],[\"没有的字母\",{\"1\":{\"263\":1}}],[\"没有额外的空间\",{\"1\":{\"78\":1}}],[\"没有前一个节点指向他\",{\"1\":{\"75\":1}}],[\"让一个指针先走\",{\"1\":{\"126\":1}}],[\"让\",{\"1\":{\"87\":1,\"124\":1,\"126\":2}}],[\"让他赋值给\",{\"1\":{\"78\":1}}],[\"让这个指针指向其下一个右侧节点\",{\"1\":{\"64\":1,\"73\":1}}],[\"继续走\",{\"1\":{\"445\":2}}],[\"继续比较其节点和其父节点\",{\"1\":{\"438\":1}}],[\"继续更新子数组的最小长度\",{\"1\":{\"185\":1}}],[\"继续往右移\",{\"1\":{\"185\":1,\"186\":1}}],[\"继续访问这一行的下一个节点\",{\"1\":{\"78\":1}}],[\"继续右边遍历\",{\"1\":{\"68\":1}}],[\"进行层序遍历\",{\"1\":{\"294\":1}}],[\"进行\",{\"1\":{\"273\":1}}],[\"进行下一轮的判断并且交换\",{\"1\":{\"218\":1}}],[\"进行遍历\",{\"1\":{\"124\":1}}],[\"进行遍历时\",{\"1\":{\"78\":1}}],[\"进阶\",{\"1\":{\"13\":1,\"22\":1,\"64\":1,\"73\":1,\"83\":1,\"101\":1,\"122\":1,\"171\":1,\"183\":1,\"191\":1,\"208\":1,\"224\":1,\"340\":1,\"443\":1}}],[\"左\",{\"1\":{\"397\":1,\"399\":3}}],[\"左子节点依次入栈\",{\"1\":{\"396\":1,\"400\":1}}],[\"左子节点入队\",{\"1\":{\"389\":1}}],[\"左子节点引用\",{\"1\":{\"381\":1}}],[\"左子树\",{\"1\":{\"393\":1,\"394\":1,\"395\":1}}],[\"左子树和右子树都要满足以上两点\",{\"1\":{\"386\":1}}],[\"左子树已经发生变化\",{\"1\":{\"201\":1}}],[\"左子树的所有节点的值\",{\"1\":{\"386\":1}}],[\"左子树的深度\",{\"1\":{\"34\":1}}],[\"左子树的最大深度\",{\"1\":{\"34\":1,\"35\":1,\"36\":1}}],[\"左元素还是右元素最终有一个没做判断\",{\"1\":{\"367\":1}}],[\"左闭右必区间\",{\"0\":{\"323\":1}}],[\"左闭右开\",{\"1\":{\"319\":1,\"368\":1}}],[\"左右区间的比较\",{\"1\":{\"320\":1}}],[\"左右区间的闭合\",{\"1\":{\"320\":1}}],[\"左右子节点交换\",{\"1\":{\"199\":1}}],[\"左右子节点如果不为空就入队\",{\"1\":{\"76\":1}}],[\"左括号必须以正确的顺序闭合\",{\"1\":{\"142\":1}}],[\"左括号必须用相同类型的右括号闭合\",{\"1\":{\"142\":1}}],[\"左边\",{\"1\":{\"94\":1}}],[\"层次遍历则可以使用\",{\"1\":{\"387\":1}}],[\"层\",{\"1\":{\"178\":1,\"273\":2}}],[\"层序遍历题目\",{\"1\":{\"408\":1}}],[\"层序遍历要求我们区分每一层\",{\"1\":{\"390\":1}}],[\"层序遍历要求的输入结果和\",{\"1\":{\"390\":1}}],[\"层序遍历\",{\"0\":{\"133\":1,\"136\":1,\"202\":1,\"388\":1,\"390\":1,\"391\":1},\"1\":{\"73\":1,\"132\":1,\"135\":1,\"200\":1,\"203\":1,\"270\":1,\"388\":1,\"389\":1}}],[\"层节点的\",{\"1\":{\"66\":1}}],[\"层节点之间建立\",{\"1\":{\"66\":1}}],[\"表示函数返回\",{\"1\":{\"395\":1}}],[\"表示开启新方法\",{\"1\":{\"395\":1}}],[\"表示\",{\"0\":{\"402\":1},\"1\":{\"368\":1}}],[\"表示树的高度\",{\"1\":{\"293\":1}}],[\"表示访下一层节点的前一个节点\",{\"1\":{\"78\":1}}],[\"表示每层的末尾\",{\"1\":{\"73\":1}}],[\"表现出来的是一种固执\",{\"1\":{\"6\":1}}],[\"由小写英文字母组成\",{\"1\":{\"261\":1}}],[\"由于这两个链表不相交\",{\"1\":{\"443\":1}}],[\"由于我们更新\",{\"1\":{\"369\":1}}],[\"由于需要根据索引来查找节点\",{\"1\":{\"330\":1}}],[\"由于要进行删除操作\",{\"1\":{\"125\":1}}],[\"由于\",{\"1\":{\"85\":1,\"322\":1}}],[\"由于两字母相邻且相同\",{\"1\":{\"43\":1}}],[\"由\",{\"1\":{\"73\":1}}],[\"序列化输出按层序遍历顺序\",{\"1\":{\"73\":1}}],[\"序列化的输出按层序遍历排列\",{\"1\":{\"64\":1}}],[\"遍历到最底层之前\",{\"1\":{\"390\":1}}],[\"遍历改造成了层序遍历\",{\"1\":{\"390\":1}}],[\"遍历时\",{\"1\":{\"334\":1}}],[\"遍历找到最后一个节点\",{\"1\":{\"332\":1}}],[\"遍历的长度为字符串长度n\",{\"1\":{\"304\":1}}],[\"遍历\",{\"0\":{\"387\":1},\"1\":{\"283\":1}}],[\"遍历数组\",{\"1\":{\"235\":1}}],[\"遍历完\",{\"1\":{\"78\":1}}],[\"遍历这一层节点组织成的链表\",{\"1\":{\"68\":1}}],[\"遍历字符串所需要的时间复杂度\",{\"1\":{\"265\":1}}],[\"遍历字符串\",{\"1\":{\"45\":1}}],[\"从各自的表头开始算起\",{\"1\":{\"443\":3}}],[\"从而维持系统的稳定运行\",{\"1\":{\"438\":1}}],[\"从而将\",{\"1\":{\"371\":1}}],[\"从宏观上表现为\",{\"1\":{\"397\":1}}],[\"从顶部到底部逐层遍历二叉树\",{\"1\":{\"388\":1}}],[\"从顶至底递增\",{\"1\":{\"381\":1}}],[\"从距离该节点最远的叶节点到该节点所经过的\",{\"1\":{\"381\":1}}],[\"从根节点到该节点所经过的\",{\"1\":{\"381\":1}}],[\"从根节点到最远叶节点所经过的\",{\"1\":{\"381\":1}}],[\"从根节点开始\",{\"1\":{\"68\":1}}],[\"从前往后遍历\",{\"1\":{\"334\":1}}],[\"从右向左填充\",{\"1\":{\"313\":2}}],[\"从右到左\",{\"1\":{\"135\":1,\"311\":1}}],[\"从上向下我们可以直接递归访问即可\",{\"1\":{\"397\":1}}],[\"从上向下填充\",{\"1\":{\"313\":2}}],[\"从上到下\",{\"1\":{\"311\":1}}],[\"从左向右填充\",{\"1\":{\"313\":1}}],[\"从左到右填充\",{\"1\":{\"313\":1}}],[\"从左到右\",{\"1\":{\"275\":1,\"311\":1}}],[\"从左到右出队将其串联起来\",{\"1\":{\"74\":1}}],[\"从下向上我们只需要借助栈也可以轻易做到\",{\"1\":{\"397\":1}}],[\"从下向上填充\",{\"1\":{\"313\":2}}],[\"从下到上\",{\"1\":{\"311\":1}}],[\"从下一层的最左边开始遍历\",{\"1\":{\"68\":1}}],[\"从字符串开头算起\",{\"1\":{\"300\":1}}],[\"从队列的开头移除并返回元素\",{\"1\":{\"208\":1}}],[\"从当前节点的后驱节点进行遍历\",{\"1\":{\"161\":1}}],[\"从链表头部到入环点的距离\",{\"1\":{\"85\":1}}],[\"从\",{\"1\":{\"85\":1,\"445\":2}}],[\"从相遇节点\",{\"1\":{\"85\":1}}],[\"从头节点到环形入口节点的节点数为\",{\"1\":{\"85\":1}}],[\"从头节点出发\",{\"1\":{\"85\":1}}],[\"从小到大\",{\"1\":{\"6\":1}}],[\"找满足条件的最右侧的值\",{\"0\":{\"369\":1}}],[\"找满足条件的最左侧的值\",{\"0\":{\"368\":1}}],[\"找出该数组中满足其总和大于等于target的长度最小的\",{\"1\":{\"183\":1}}],[\"找出其最小深度\",{\"1\":{\"55\":1}}],[\"找到map是否存在\",{\"1\":{\"283\":1}}],[\"找到更小的窗口长度\",{\"1\":{\"185\":1,\"186\":1}}],[\"找到重复答案\",{\"1\":{\"96\":1}}],[\"找到邻居\",{\"1\":{\"66\":1}}],[\"本层集合中元素\",{\"1\":{\"360\":1}}],[\"本质上是不变的\",{\"1\":{\"272\":1}}],[\"本题与\",{\"1\":{\"115\":1}}],[\"本题中递归程序的隐式栈空间不计入额外空间复杂度\",{\"1\":{\"73\":1}}],[\"本题中递归程序占用的栈空间不算做额外的空间复杂度\",{\"1\":{\"64\":1}}],[\"本人经历过两次考研\",{\"1\":{\"7\":1}}],[\"标志着每一层的结束\",{\"1\":{\"64\":1}}],[\"如调整队列参数\",{\"1\":{\"438\":1}}],[\"如定期发送报告\",{\"1\":{\"438\":1}}],[\"如何理解以及模板\",{\"0\":{\"360\":1}}],[\"如何找到这个环的入口\",{\"1\":{\"86\":1}}],[\"如图\",{\"1\":{\"64\":1,\"73\":1}}],[\"如果队列某些操作\",{\"1\":{\"438\":1}}],[\"如果队列为空\",{\"1\":{\"208\":1}}],[\"如果订单在\",{\"1\":{\"438\":1}}],[\"如果之前的头节点为null\",{\"1\":{\"428\":1}}],[\"如果递归没有终止\",{\"1\":{\"406\":1}}],[\"如果遇到的节点为灰色\",{\"1\":{\"396\":1,\"400\":1}}],[\"如果遇到的节点为白色\",{\"1\":{\"396\":1,\"400\":1}}],[\"如果把边的数量换成节点数量\",{\"1\":{\"381\":1}}],[\"如果非要用\",{\"1\":{\"367\":1}}],[\"如果没有找到的情况下\",{\"1\":{\"367\":1}}],[\"如果没有循环\",{\"1\":{\"155\":1}}],[\"如果遍历结束没有找到\",{\"1\":{\"334\":1}}],[\"如果下标有效\",{\"1\":{\"328\":1}}],[\"如果下标无效\",{\"1\":{\"328\":1}}],[\"如果是双向链表\",{\"1\":{\"328\":1}}],[\"如果是快乐数\",{\"1\":{\"155\":1}}],[\"如果超过了这个条件\",{\"1\":{\"319\":1}}],[\"如果目标值存在返回下标\",{\"1\":{\"317\":1}}],[\"如果剩余字符小于\",{\"1\":{\"300\":1}}],[\"如果剩余字符少于\",{\"1\":{\"300\":1}}],[\"如果当前节点是新的一层\",{\"1\":{\"291\":1}}],[\"如果当前层的左子节点不为空\",{\"1\":{\"78\":1}}],[\"如果某个字符数量检查情况中\",{\"1\":{\"263\":1}}],[\"如果两个链表相交则不能为\",{\"1\":{\"443\":2}}],[\"如果两个链表没有交点\",{\"1\":{\"443\":1}}],[\"如果两个字符串的长度不相等\",{\"1\":{\"263\":1}}],[\"如果两个单词间有多余的空格\",{\"1\":{\"101\":1}}],[\"如果可以\",{\"1\":{\"261\":1}}],[\"如果可以还想创新\",{\"1\":{\"7\":1}}],[\"如果相同的时候\",{\"1\":{\"235\":1}}],[\"如果相遇\",{\"1\":{\"155\":1}}],[\"如果所有的断言都通过\",{\"1\":{\"233\":1}}],[\"如果输入字符串包含\",{\"1\":{\"224\":1}}],[\"如果栈是空的\",{\"1\":{\"191\":1}}],[\"如果栈为空或者栈顶元素与\",{\"1\":{\"144\":1}}],[\"如果你已经实现o\",{\"1\":{\"183\":1}}],[\"如果你文档需要\",{\"1\":{\"4\":1}}],[\"如果不存在符合条件的子数组\",{\"1\":{\"183\":1}}],[\"如果不存在环\",{\"1\":{\"85\":1}}],[\"如果他们的起点是相隔\",{\"1\":{\"155\":1}}],[\"如果这个过程\",{\"1\":{\"151\":1}}],[\"如果与栈顶元素一样\",{\"1\":{\"144\":1}}],[\"如果字符串在你使用的编程语言中是一种可变数据类型\",{\"1\":{\"101\":1}}],[\"如果和\",{\"1\":{\"94\":3}}],[\"如果使用\",{\"1\":{\"94\":1}}],[\"如果存在环\",{\"1\":{\"85\":1}}],[\"如果链表中有某个节点\",{\"1\":{\"83\":1}}],[\"如果链表无环\",{\"1\":{\"83\":1}}],[\"如果\",{\"1\":{\"75\":1,\"76\":1,\"83\":1,\"94\":2,\"151\":1,\"153\":2,\"263\":1,\"319\":1,\"328\":2,\"368\":2,\"443\":2}}],[\"如果上一层已经完成串联\",{\"1\":{\"68\":1}}],[\"如果找不到下一个右侧节点\",{\"1\":{\"64\":1,\"73\":1}}],[\"如果左子树为空\",{\"1\":{\"59\":1}}],[\"如果只有根节点\",{\"1\":{\"59\":1}}],[\"如果只有两个重复元素\",{\"1\":{\"15\":1}}],[\"如果树是空\",{\"1\":{\"59\":1}}],[\"如果数组尾元素\",{\"1\":{\"48\":1}}],[\"如果以节点来说明\",{\"1\":{\"24\":1}}],[\"如果都为空\",{\"1\":{\"23\":1}}],[\"如果其中一个为空\",{\"1\":{\"23\":1}}],[\"如果节点值不同\",{\"1\":{\"23\":1}}],[\"如果有环\",{\"1\":{\"86\":1}}],[\"如果有\",{\"1\":{\"15\":1}}],[\"初始化一个列表\",{\"1\":{\"389\":1}}],[\"初始化队列\",{\"1\":{\"389\":1}}],[\"初始化条件\",{\"1\":{\"367\":1,\"368\":1}}],[\"初始化消耗\",{\"1\":{\"332\":1,\"335\":1}}],[\"初始化\",{\"1\":{\"328\":1}}],[\"初始化为\",{\"1\":{\"218\":1}}],[\"初始化项目并上传到github\",{\"1\":{\"4\":1}}],[\"初始状态下\",{\"1\":{\"64\":1,\"73\":1}}],[\"指的都是一个函数\",{\"1\":{\"358\":1}}],[\"指针域的指针\",{\"1\":{\"426\":1}}],[\"指针域\",{\"1\":{\"421\":1}}],[\"指针使用常数大小的额外空间\",{\"1\":{\"96\":1}}],[\"指针相遇节点节点数为\",{\"1\":{\"85\":1}}],[\"指针与\",{\"1\":{\"85\":1}}],[\"指针再次到达\",{\"1\":{\"83\":1}}],[\"指针后\",{\"1\":{\"66\":1}}],[\"指针只有两种类型\",{\"1\":{\"66\":1}}],[\"指针连接\",{\"1\":{\"64\":1,\"73\":1}}],[\"指针都被设置为\",{\"1\":{\"64\":1,\"73\":1}}],[\"指针设置为\",{\"1\":{\"64\":1,\"73\":1}}],[\"指针\",{\"1\":{\"64\":2,\"66\":1,\"68\":1,\"73\":2,\"445\":2}}],[\"指向下一节点的引用\",{\"1\":{\"426\":1}}],[\"指向下一个\",{\"1\":{\"302\":1}}],[\"指向下个单词的尾字符\",{\"1\":{\"106\":1}}],[\"指向的元素\",{\"1\":{\"244\":1}}],[\"指向头节点\",{\"1\":{\"173\":1}}],[\"指向虚拟节点\",{\"1\":{\"173\":1}}],[\"指向单词的范围\",{\"1\":{\"105\":1}}],[\"指向最左的元素\",{\"1\":{\"94\":1}}],[\"指向最后的数组末尾指针\",{\"1\":{\"50\":1}}],[\"指向上一个元素\",{\"1\":{\"48\":1}}],[\"填充的行肯定在\",{\"1\":{\"313\":2}}],[\"填充的列肯定在\",{\"1\":{\"313\":2}}],[\"填充到8时\",{\"1\":{\"311\":1}}],[\"填充它的每个\",{\"1\":{\"64\":1,\"73\":1}}],[\"填充每个节点的下一个右侧节点指针ii\",{\"1\":{\"408\":1}}],[\"填充每个节点的下一个右侧节点指针\",{\"0\":{\"62\":1,\"63\":1,\"71\":1,\"72\":1},\"1\":{\"408\":1}}],[\"完全二叉树中\",{\"1\":{\"404\":1}}],[\"完全二叉树\",{\"0\":{\"384\":1}}],[\"完成处理\",{\"1\":{\"66\":1}}],[\"完美二叉树\",{\"0\":{\"403\":1},\"1\":{\"64\":1}}],[\"完善\",{\"1\":{\"4\":2}}],[\"深度\",{\"1\":{\"381\":1}}],[\"深度优先搜索\",{\"1\":{\"271\":1}}],[\"深度遍历\",{\"1\":{\"132\":1}}],[\"深度为1\",{\"1\":{\"57\":1}}],[\"深度概念\",{\"1\":{\"33\":1}}],[\"只出现在最底层且靠右的位置\",{\"1\":{\"404\":1}}],[\"只有遇到空节点的时候\",{\"1\":{\"401\":3}}],[\"只有这样做\",{\"1\":{\"368\":1}}],[\"只有\",{\"1\":{\"228\":1}}],[\"只有根节点时\",{\"1\":{\"57\":1}}],[\"只要是标准的栈操作即可\",{\"1\":{\"208\":1}}],[\"只要是标准的队列操作即可\",{\"1\":{\"191\":1}}],[\"只能进行节点交换\",{\"1\":{\"216\":1}}],[\"只能\",{\"1\":{\"208\":1}}],[\"只能让第三个枚举元素的下标向左移动\",{\"1\":{\"96\":1}}],[\"只会存在一个有效答案\",{\"1\":{\"13\":1}}],[\"59\",{\"0\":{\"307\":1,\"308\":1}}],[\"541\",{\"0\":{\"298\":1,\"299\":1}}],[\"515\",{\"0\":{\"287\":1,\"288\":1},\"1\":{\"408\":1}}],[\"5000\",{\"1\":{\"171\":3}}],[\"50\",{\"1\":{\"160\":2,\"233\":1}}],[\"5\",{\"1\":{\"55\":2,\"64\":2,\"73\":2,\"83\":2,\"92\":2,\"122\":2,\"131\":1,\"160\":2,\"171\":2,\"224\":1,\"233\":2,\"242\":1,\"251\":1,\"261\":1,\"270\":4,\"289\":1,\"309\":1,\"317\":2,\"368\":1,\"393\":1,\"394\":1,\"395\":1,\"407\":1,\"443\":9}}],[\"双向链表还是循环链表\",{\"1\":{\"433\":1}}],[\"双链表\",{\"0\":{\"424\":1}}],[\"双链表实现\",{\"0\":{\"333\":1}}],[\"双重循环的时间复杂度为\",{\"1\":{\"96\":1}}],[\"双指针遍历各自所在链表后\",{\"1\":{\"446\":1}}],[\"双指针法来移除链表倒数第\",{\"1\":{\"414\":1}}],[\"双指针法\",{\"0\":{\"370\":1},\"1\":{\"370\":1}}],[\"双指针指向相等时\",{\"1\":{\"343\":1}}],[\"双指针移动的更新\",{\"1\":{\"303\":1}}],[\"双指针为什么要交替移动\",{\"1\":{\"96\":1}}],[\"双指针使用常数大小的额外空间\",{\"1\":{\"87\":1}}],[\"双指针\",{\"0\":{\"124\":1,\"173\":1},\"1\":{\"50\":1,\"93\":1,\"94\":3,\"95\":1,\"102\":1,\"123\":1,\"172\":1,\"243\":1,\"301\":1,\"341\":1,\"444\":1},\"2\":{\"98\":1,\"119\":1,\"306\":1}}],[\"双端队列的直接实现类是\",{\"1\":{\"438\":1}}],[\"双端队列\",{\"0\":{\"45\":1},\"1\":{\"191\":1,\"208\":1,\"438\":1}}],[\"修改输入数组\",{\"1\":{\"242\":1}}],[\"修改节点指向\",{\"1\":{\"173\":1}}],[\"修改\",{\"1\":{\"48\":1}}],[\"时就是相交节点\",{\"1\":{\"445\":1}}],[\"时间\",{\"1\":{\"390\":1,\"395\":1}}],[\"时间复杂度是多少\",{\"1\":{\"433\":1}}],[\"时间复杂度保持在\",{\"1\":{\"405\":1}}],[\"时间复杂度的解法\",{\"1\":{\"183\":2}}],[\"时间复杂度为\",{\"1\":{\"94\":1,\"390\":1,\"391\":1,\"395\":1}}],[\"时间复杂度\",{\"1\":{\"17\":1,\"25\":1,\"27\":1,\"36\":1,\"38\":1,\"47\":1,\"50\":1,\"59\":1,\"68\":1,\"76\":1,\"78\":1,\"87\":1,\"96\":1,\"104\":1,\"106\":1,\"108\":1,\"117\":1,\"126\":1,\"135\":1,\"137\":1,\"146\":1,\"155\":1,\"163\":1,\"166\":1,\"175\":1,\"178\":1,\"187\":1,\"194\":1,\"201\":1,\"203\":1,\"211\":1,\"220\":1,\"228\":1,\"237\":1,\"246\":1,\"256\":1,\"265\":1,\"274\":1,\"276\":1,\"284\":1,\"293\":1,\"295\":1,\"304\":1,\"313\":1,\"321\":1,\"332\":1,\"335\":1,\"344\":1,\"447\":1}}],[\"时\",{\"1\":{\"96\":2,\"210\":1,\"235\":1,\"244\":2,\"311\":1,\"322\":1,\"334\":1,\"369\":1,\"438\":1,\"445\":2}}],[\"时叫做叶子节点\",{\"1\":{\"57\":1}}],[\"时说明\",{\"1\":{\"48\":1}}],[\"把当前元素添加进去\",{\"1\":{\"187\":1}}],[\"把下一层串联成一个链表之后\",{\"1\":{\"78\":1}}],[\"把每一层当成一个链表进行遍历\",{\"1\":{\"67\":1}}],[\"把数组当成一个队列使用\",{\"1\":{\"48\":1}}],[\"把这门技术的祖宗十八代都挖出来\",{\"1\":{\"7\":1}}],[\"需要独占访问\",{\"1\":{\"438\":1}}],[\"需要将层次顺序遍历结果存储在一个2d\",{\"1\":{\"391\":1}}],[\"需要将元素从\",{\"1\":{\"210\":1}}],[\"需要一个\",{\"1\":{\"333\":1}}],[\"需要同时更新\",{\"1\":{\"331\":1}}],[\"需要开辟\",{\"1\":{\"201\":1}}],[\"需要遍历树的所有节点\",{\"1\":{\"201\":1,\"203\":1}}],[\"需要使用两个队列存储栈内的元素\",{\"1\":{\"194\":1}}],[\"需要往\",{\"1\":{\"94\":2}}],[\"需要创建一个长度为\",{\"1\":{\"50\":1}}],[\"需要创建一个队列来存储情况\",{\"1\":{\"47\":1}}],[\"需要递归一次\",{\"1\":{\"25\":1,\"27\":1}}],[\"equals\",{\"1\":{\"431\":1}}],[\"edge\",{\"1\":{\"381\":1}}],[\"e\",{\"1\":{\"242\":2,\"428\":3,\"429\":3,\"430\":2}}],[\"expectednums\",{\"1\":{\"233\":3}}],[\"example\",{\"1\":{\"101\":2}}],[\"empty\",{\"1\":{\"191\":6,\"194\":2,\"208\":6,\"211\":3,\"401\":3}}],[\"element\",{\"1\":{\"232\":1,\"430\":2,\"438\":2}}],[\"elements\",{\"1\":{\"159\":1}}],[\"else\",{\"1\":{\"47\":1,\"50\":1,\"96\":2,\"108\":1,\"117\":2,\"146\":3,\"163\":1,\"166\":1,\"293\":1,\"321\":2,\"322\":1,\"323\":2,\"332\":2,\"335\":2,\"344\":2,\"367\":2,\"368\":2,\"369\":2,\"398\":1,\"401\":3,\"407\":1,\"428\":1,\"429\":1,\"430\":2,\"431\":1}}],[\"each\",{\"1\":{\"63\":1,\"72\":1,\"288\":1}}],[\"ended\",{\"1\":{\"438\":1}}],[\"end++\",{\"1\":{\"187\":1}}],[\"end−start+1\",{\"1\":{\"185\":1}}],[\"end\",{\"1\":{\"108\":5,\"121\":1,\"185\":1,\"187\":6,\"367\":1}}],[\"env\",{\"1\":{\"4\":1}}],[\"environment\",{\"1\":{\"4\":1}}],[\"enable\",{\"1\":{\"4\":1}}],[\"利用栈的思想来判断匹配情况\",{\"1\":{\"46\":1}}],[\"存放结果\",{\"1\":{\"360\":1}}],[\"存储头节点\",{\"1\":{\"124\":1}}],[\"存储虚拟头节点\",{\"1\":{\"124\":2}}],[\"存储遍历的情况\",{\"1\":{\"45\":1}}],[\"存在\",{\"1\":{\"15\":1,\"263\":1,\"367\":1}}],[\"数据同步\",{\"1\":{\"438\":1}}],[\"数据域\",{\"1\":{\"421\":1}}],[\"数据结构使用过程叙述\",{\"1\":{\"377\":1}}],[\"数字和空格\",{\"1\":{\"101\":1}}],[\"数字或者队列\",{\"1\":{\"45\":1}}],[\"数组的特点\",{\"0\":{\"365\":1}}],[\"数组是存放在\",{\"1\":{\"364\":1}}],[\"数组总结篇\",{\"0\":{\"363\":1}}],[\"数组元素则是对应的value\",{\"1\":{\"351\":1}}],[\"数组变为\",{\"1\":{\"340\":2}}],[\"数组可以通过索引的方式进行重新设置值\",{\"1\":{\"292\":1}}],[\"数组中小于\",{\"1\":{\"368\":2}}],[\"数组中每个元素之和都不相同\",{\"1\":{\"284\":1}}],[\"数组中同一个元素在答案里不能重复出现\",{\"1\":{\"13\":1}}],[\"数组长度都是\",{\"1\":{\"281\":1}}],[\"数组长度为常数\",{\"1\":{\"228\":1}}],[\"数组为空时\",{\"1\":{\"50\":1}}],[\"数组\",{\"0\":{\"48\":1},\"1\":{\"44\":1,\"233\":1,\"234\":1,\"310\":1,\"318\":1,\"350\":1},\"2\":{\"98\":1,\"119\":1,\"239\":1,\"258\":1,\"286\":1,\"325\":1,\"346\":1}}],[\"都可以使用\",{\"1\":{\"387\":1}}],[\"都会改变\",{\"1\":{\"368\":1}}],[\"都会将该层所有节点入队\",{\"1\":{\"294\":1}}],[\"都是\",{\"1\":{\"242\":1}}],[\"都保证栈不为空\",{\"1\":{\"191\":1}}],[\"都不会影响最终的结果\",{\"1\":{\"45\":1}}],[\"都失败了\",{\"1\":{\"7\":1}}],[\"栈帧空间\",{\"1\":{\"395\":1}}],[\"栈是一种\",{\"1\":{\"375\":1}}],[\"栈是后进先出\",{\"1\":{\"193\":1}}],[\"栈理论基础篇\",{\"0\":{\"374\":1}}],[\"栈\",{\"1\":{\"44\":1,\"143\":1,\"192\":1,\"387\":2},\"2\":{\"148\":1,\"196\":1,\"213\":1,\"379\":1}}],[\"所谓的翻转就是将二叉树上的每个节点的\",{\"1\":{\"199\":1}}],[\"所以要进行\",{\"1\":{\"369\":1}}],[\"所以才有\",{\"1\":{\"367\":2}}],[\"所以\",{\"1\":{\"319\":1,\"443\":1}}],[\"所以不能通过\",{\"1\":{\"200\":1}}],[\"所以也是\",{\"1\":{\"155\":1}}],[\"所以这里的空间代价为\",{\"1\":{\"135\":1}}],[\"所以队列长度最大不不超过\",{\"1\":{\"135\":1}}],[\"所以和肯定\",{\"1\":{\"94\":1}}],[\"所以最后的字符串为\",{\"1\":{\"43\":1}}],[\"所示\",{\"1\":{\"64\":2,\"73\":2}}],[\"所有节点被访问一次\",{\"1\":{\"390\":1,\"395\":1}}],[\"所有函数单次调用的空间复杂度均为\",{\"1\":{\"335\":1}}],[\"所有函数的单次调用空间复杂度均为\",{\"1\":{\"332\":1}}],[\"所有元素\",{\"1\":{\"309\":1}}],[\"所有和sumab的情况\",{\"1\":{\"283\":1}}],[\"所有\",{\"1\":{\"64\":1,\"73\":1}}],[\"所返给你的一些反作用力\",{\"1\":{\"8\":1}}],[\"可能等于答案\",{\"1\":{\"322\":1}}],[\"可能会\",{\"1\":{\"304\":1}}],[\"可能新的头结点也值相等\",{\"1\":{\"163\":1}}],[\"可以是任意值\",{\"1\":{\"443\":1}}],[\"可以实现流量控制\",{\"1\":{\"438\":1}}],[\"可以很方便进行删除操作\",{\"1\":{\"412\":1}}],[\"可以看成使用了一个额外的数组存储了数组\",{\"1\":{\"117\":1}}],[\"可以通过连续跟踪\",{\"1\":{\"83\":1}}],[\"可以执行重复项删除操作\",{\"1\":{\"43\":1}}],[\"可那个人他忘了得先完成作业啊\",{\"1\":{\"6\":1}}],[\"其子节点的优先级\",{\"1\":{\"438\":1}}],[\"其核心思想如下\",{\"1\":{\"400\":1}}],[\"其余节点度为\",{\"1\":{\"383\":1}}],[\"其余字符保持原样\",{\"1\":{\"300\":1}}],[\"其实这也是写程序中的重要原则\",{\"1\":{\"372\":1}}],[\"其实相当于告诉我们\",{\"1\":{\"368\":1}}],[\"其实外面都充满着答案\",{\"1\":{\"7\":1}}],[\"其作用是将输入的字符串反转过来\",{\"1\":{\"242\":1}}],[\"其元素排列顺序和出栈顺序相同\",{\"1\":{\"194\":1}}],[\"其尾部连接到第一个节点\",{\"1\":{\"83\":1}}],[\"其尾部连接到第二个节点\",{\"1\":{\"83\":1}}],[\"其所有叶子节点都在同一层\",{\"1\":{\"64\":1}}],[\"其中哈希表操作都是\",{\"1\":{\"284\":1}}],[\"其中\",{\"1\":{\"59\":1,\"85\":1,\"94\":1,\"108\":1,\"137\":1,\"194\":1,\"283\":1,\"293\":2,\"295\":1,\"332\":1,\"335\":1,\"381\":1,\"390\":1}}],[\"其中又只有\",{\"1\":{\"43\":1}}],[\"之间的头节点的前驱节点是新节点\",{\"1\":{\"428\":1}}],[\"之间的映射\",{\"1\":{\"350\":1}}],[\"之间\",{\"1\":{\"270\":1,\"317\":2}}],[\"之间用单个空格连接的结果字符串\",{\"1\":{\"101\":1}}],[\"之后我们得到字符串\",{\"1\":{\"43\":1}}],[\"之所以这么说\",{\"1\":{\"7\":1}}],[\"中节点数目为\",{\"1\":{\"443\":2}}],[\"中节点访问过\",{\"1\":{\"401\":3}}],[\"中序遍历\",{\"0\":{\"394\":1,\"398\":1},\"1\":{\"394\":1,\"401\":1,\"407\":1}}],[\"中继续搜索\",{\"1\":{\"368\":1}}],[\"中因此返回\",{\"1\":{\"317\":1}}],[\"中并且下标为\",{\"1\":{\"317\":1}}],[\"中心数字无法在迭代过程中被填充\",{\"1\":{\"311\":1}}],[\"中使用一次\",{\"1\":{\"261\":1}}],[\"中使用至少一个空格将字符串中的\",{\"1\":{\"101\":1}}],[\"中不等于\",{\"1\":{\"233\":1}}],[\"中与\",{\"1\":{\"233\":1}}],[\"中每个字符出现的次数都相同\",{\"1\":{\"224\":1}}],[\"中进行\",{\"1\":{\"210\":1}}],[\"中的所有元素是不重复的\",{\"1\":{\"317\":1}}],[\"中的\",{\"1\":{\"317\":1}}],[\"中的每个字符只能在\",{\"1\":{\"261\":1}}],[\"中的前五个元素为\",{\"1\":{\"233\":1}}],[\"中的前两个元素均为\",{\"1\":{\"233\":1}}],[\"中的元素依次出栈压入\",{\"1\":{\"194\":2}}],[\"中的元素总长度\",{\"1\":{\"104\":1}}],[\"中的字符串总长度\",{\"1\":{\"106\":1}}],[\"中可能会存在前导空格\",{\"1\":{\"101\":1}}],[\"中\",{\"0\":{\"392\":1},\"1\":{\"43\":1,\"101\":1,\"375\":1,\"392\":1,\"399\":3,\"405\":1,\"433\":1,\"437\":2,\"443\":4}}],[\"例如寻找距离尾部第\",{\"1\":{\"417\":1}}],[\"例如\",{\"1\":{\"43\":1,\"208\":1}}],[\"会实现一个\",{\"1\":{\"438\":1}}],[\"会将所有的key能映射到数组上对应的索引\",{\"1\":{\"351\":1}}],[\"会获取对应该层的答案\",{\"1\":{\"275\":1}}],[\"会相遇\",{\"1\":{\"155\":1}}],[\"会先到\",{\"1\":{\"153\":1}}],[\"会先于\",{\"1\":{\"85\":1}}],[\"会选择两个相邻且相同的字母\",{\"1\":{\"43\":1}}],[\"会让人学的更加透彻\",{\"1\":{\"6\":1}}],[\"同层的节点不会连续被处理\",{\"1\":{\"275\":1}}],[\"同样的题目还有\",{\"1\":{\"264\":1}}],[\"同样的道理\",{\"1\":{\"15\":1}}],[\"同时指向\",{\"1\":{\"445\":1}}],[\"同时指向第一个相交节点\",{\"1\":{\"445\":1}}],[\"同时设置一个下标\",{\"1\":{\"235\":1}}],[\"同时往中间移动的时候处理相同元素的情况\",{\"1\":{\"94\":1}}],[\"同时还满足\",{\"1\":{\"92\":1}}],[\"同时存储\",{\"1\":{\"38\":1}}],[\"同理参照左子树\",{\"1\":{\"78\":1}}],[\"同一个父节点下的串联\",{\"1\":{\"68\":1}}],[\"同一个父节点的两个子节点\",{\"1\":{\"66\":1}}],[\"同一层节点由\",{\"1\":{\"64\":1}}],[\"实现的\",{\"1\":{\"438\":1}}],[\"实现高效的元素查询\",{\"1\":{\"350\":1}}],[\"实现双向链表\",{\"1\":{\"333\":1}}],[\"实现\",{\"1\":{\"37\":1,\"191\":1,\"208\":1,\"328\":1}}],[\"队列里面的元素实现了\",{\"1\":{\"438\":1}}],[\"队列既可以是数组实现也可以是链表实现\",{\"1\":{\"437\":1}}],[\"队列理论基础篇\",{\"0\":{\"436\":1}}],[\"队列出队\",{\"1\":{\"389\":1}}],[\"队列遵循\",{\"1\":{\"388\":1}}],[\"队列所需要的空间最多不超过\",{\"1\":{\"295\":1}}],[\"队列所需要用到的空间是\",{\"1\":{\"274\":1}}],[\"队列中最多同时存在\",{\"1\":{\"390\":1}}],[\"队列中最多不会超过\",{\"1\":{\"27\":1}}],[\"队列中会有\",{\"1\":{\"211\":1}}],[\"队列应当支持一般队列支持的所有操作\",{\"1\":{\"208\":1}}],[\"队列最多同时存储\",{\"1\":{\"203\":1}}],[\"队列是先进先出\",{\"1\":{\"193\":1}}],[\"队列存放节点所需要的空间不超过\",{\"1\":{\"76\":1}}],[\"队列\",{\"1\":{\"37\":1,\"38\":1,\"192\":1,\"209\":1,\"388\":1,\"437\":1},\"2\":{\"440\":1}}],[\"树能始终保持高效的数据操作性能\",{\"1\":{\"405\":1}}],[\"树是\",{\"1\":{\"405\":1}}],[\"树结构的开端\",{\"1\":{\"381\":1}}],[\"树结构的基本单位是节点\",{\"1\":{\"381\":1}}],[\"树专题\",{\"0\":{\"380\":1}}],[\"树形结构\",{\"1\":{\"360\":1}}],[\"树形\",{\"1\":{\"358\":1}}],[\"树退化成一个链表\",{\"1\":{\"293\":1}}],[\"树退化成链表\",{\"1\":{\"276\":1}}],[\"树只有两层\",{\"1\":{\"274\":1}}],[\"树\",{\"1\":{\"271\":1},\"2\":{\"278\":1}}],[\"树中的节点数在范围\",{\"1\":{\"73\":1}}],[\"树中节点孩子的数量就是集合的大小\",{\"1\":{\"360\":1}}],[\"树中节点数目范围在\",{\"1\":{\"199\":1}}],[\"树中节点数目在范围\",{\"1\":{\"22\":1}}],[\"树中节点数的范围在\",{\"1\":{\"55\":1}}],[\"树中节点的数量在\",{\"1\":{\"32\":1,\"64\":1}}],[\"树呈现链状\",{\"1\":{\"59\":1}}],[\"树的节点总数在\",{\"1\":{\"270\":1}}],[\"树的高度不会超过\",{\"1\":{\"270\":1}}],[\"树的序列化输入是用层序遍历\",{\"1\":{\"270\":1}}],[\"树的层序遍历\",{\"1\":{\"37\":1}}],[\"树的最大深度\",{\"1\":{\"36\":1}}],[\"求树的大深度\",{\"1\":{\"36\":1}}],[\"因此返回\",{\"1\":{\"443\":1}}],[\"因此所有\",{\"1\":{\"404\":1}}],[\"因此\",{\"1\":{\"387\":1}}],[\"因此下次\",{\"1\":{\"367\":1}}],[\"因此提供查询节点的方法\",{\"1\":{\"330\":1}}],[\"因此我们不能跳过这个\",{\"1\":{\"322\":1}}],[\"因此我们更新左边界的时候\",{\"1\":{\"319\":1}}],[\"因此我们需要\",{\"1\":{\"115\":1}}],[\"因此右边界我们是判断不到的\",{\"1\":{\"319\":1}}],[\"因此对于某个节点来说\",{\"1\":{\"275\":1}}],[\"因此在单次\",{\"1\":{\"273\":1}}],[\"因此它们并不计入评测\",{\"1\":{\"233\":2}}],[\"因此空间复杂度为常数\",{\"1\":{\"228\":1}}],[\"因此要找到\",{\"1\":{\"125\":1}}],[\"因此总时间复杂度为\",{\"1\":{\"117\":1}}],[\"因此需要先排序\",{\"1\":{\"96\":1}}],[\"因此深度是\",{\"1\":{\"34\":1}}],[\"因为java语言不需要申请长度为n的数组来存储字符\",{\"1\":{\"304\":1}}],[\"因为要取\",{\"1\":{\"303\":1}}],[\"因为左子节点在翻转后会发生变化\",{\"1\":{\"199\":1}}],[\"因为\",{\"1\":{\"13\":1}}],[\"说法\",{\"1\":{\"381\":1}}],[\"说明找到了目标节点并返回\",{\"1\":{\"334\":1}}],[\"说明\",{\"1\":{\"48\":1,\"55\":1,\"94\":2,\"208\":1,\"263\":1}}],[\"说明不是重复项\",{\"1\":{\"45\":1}}],[\"说明不是叶节点\",{\"1\":{\"34\":1}}],[\"说明此时是重复项已经出现\",{\"1\":{\"45\":1}}],[\"说的更简单一点\",{\"1\":{\"8\":1}}],[\"最左的下标为\",{\"1\":{\"368\":1}}],[\"最小\",{\"1\":{\"371\":1}}],[\"最小窗口长度右移\",{\"1\":{\"187\":1}}],[\"最小深度是从根节点到最近叶子节点的最短路径上的节点数量\",{\"1\":{\"55\":1}}],[\"最多调用\",{\"1\":{\"191\":1,\"208\":1}}],[\"最多为\",{\"1\":{\"178\":1}}],[\"最多是1\",{\"1\":{\"146\":1}}],[\"最大堆\",{\"1\":{\"438\":1}}],[\"最大堆的特点是父节点的优先级总是\",{\"1\":{\"438\":1}}],[\"最大子数组问题\",{\"1\":{\"371\":1}}],[\"最大的平方和为\",{\"1\":{\"155\":2}}],[\"最大深度\",{\"1\":{\"32\":1}}],[\"最后翻转结果\",{\"1\":{\"399\":1}}],[\"最后返回\",{\"1\":{\"368\":1}}],[\"最后返回的结果\",{\"1\":{\"368\":1}}],[\"最后返回的时候是\",{\"1\":{\"165\":1}}],[\"最后循环\",{\"1\":{\"368\":1}}],[\"最后一个节点的指针域指向\",{\"1\":{\"421\":1}}],[\"最后一个节点的后驱节点是新节点\",{\"1\":{\"332\":1}}],[\"最后一次翻转\",{\"1\":{\"303\":1}}],[\"最后\",{\"1\":{\"235\":1}}],[\"最后会返回1\",{\"1\":{\"155\":1}}],[\"最后再判断栈是不是为空\",{\"1\":{\"144\":1}}],[\"最后将所有单词拼接起来\",{\"1\":{\"105\":1}}],[\"最后还要通过哈希表进行去重\",{\"1\":{\"94\":1}}],[\"最终\",{\"1\":{\"85\":1,\"368\":1}}],[\"最坏情况\",{\"1\":{\"276\":1}}],[\"最坏情况下\",{\"1\":{\"59\":1,\"137\":1,\"274\":1,\"284\":1,\"293\":1}}],[\"最坏的情况是字符串中不存在相邻重复项\",{\"1\":{\"47\":1,\"50\":1}}],[\"最差情况下\",{\"1\":{\"36\":1,\"38\":1,\"201\":1,\"203\":1,\"447\":1}}],[\"最差情况\",{\"1\":{\"25\":1}}],[\"q2\",{\"1\":{\"194\":7}}],[\"q1\",{\"1\":{\"194\":12}}],[\"queue<integer>\",{\"1\":{\"194\":2}}],[\"queue<treenode>\",{\"1\":{\"27\":1,\"389\":1,\"390\":1}}],[\"queues\",{\"1\":{\"190\":1}}],[\"queue\",{\"1\":{\"38\":5,\"47\":7,\"75\":1,\"76\":7,\"135\":7,\"146\":7,\"207\":1,\"208\":4,\"295\":7,\"389\":6,\"390\":7,\"437\":2,\"438\":4}}],[\"q\",{\"1\":{\"27\":10}}],[\"相等\",{\"1\":{\"446\":2}}],[\"相交的位置在\",{\"1\":{\"447\":2}}],[\"相交部分长度为\",{\"1\":{\"445\":1}}],[\"相交节点前有\",{\"1\":{\"443\":4}}],[\"相交节点的值为\",{\"1\":{\"443\":2}}],[\"相同类型数据\",{\"1\":{\"364\":1}}],[\"相当于闭区间\",{\"1\":{\"367\":1}}],[\"相当于缩小左边界\",{\"1\":{\"313\":1}}],[\"相当于缩小下边界\",{\"1\":{\"313\":1}}],[\"相当于缩小右边界\",{\"1\":{\"313\":1}}],[\"相当于缩小上边界\",{\"1\":{\"313\":1}}],[\"相当于处理这一对节点\",{\"1\":{\"26\":1}}],[\"相似\",{\"1\":{\"115\":1}}],[\"相遇点到入环点的距离\",{\"1\":{\"85\":1}}],[\"相遇时\",{\"1\":{\"85\":1}}],[\"相关配置文档请见\",{\"1\":{\"1\":1}}],[\"入栈顺序\",{\"1\":{\"399\":1}}],[\"入栈是右括号\",{\"1\":{\"145\":1}}],[\"入队一次\",{\"1\":{\"274\":1,\"276\":1}}],[\"入队\",{\"1\":{\"26\":2}}],[\"入队两次\",{\"1\":{\"26\":1}}],[\"入参是左子节点与右子节点\",{\"1\":{\"23\":1}}],[\"将数组尾元素替换根元素\",{\"1\":{\"438\":1}}],[\"将空节点弹出\",{\"1\":{\"401\":3}}],[\"将该节点弹出\",{\"1\":{\"401\":3}}],[\"将右节点和左节点依次入栈\",{\"1\":{\"397\":1}}],[\"将其右子节点\",{\"1\":{\"396\":1}}],[\"将一个值为\",{\"1\":{\"328\":3}}],[\"将在\",{\"1\":{\"317\":1}}],[\"将二叉树的层序遍历扩展到\",{\"1\":{\"272\":1}}],[\"将虚拟头结点指向head\",{\"1\":{\"220\":1}}],[\"将元素添加到集合\",{\"1\":{\"375\":1}}],[\"将元素\",{\"1\":{\"191\":1,\"208\":1}}],[\"将\",{\"1\":{\"154\":1,\"176\":1,\"185\":1,\"202\":1,\"283\":1}}],[\"将栈顶元素出栈\",{\"1\":{\"144\":1}}],[\"将字符串间多余的空白字符去除\",{\"1\":{\"108\":1}}],[\"将单词添加到结果中\",{\"1\":{\"105\":1}}],[\"将每一行看成一个链表进行处理\",{\"1\":{\"78\":1}}],[\"将每一层想象成一条链表\",{\"1\":{\"74\":1}}],[\"将队列去掉\",{\"1\":{\"77\":1}}],[\"将这种情况视为\",{\"1\":{\"352\":1}}],[\"将这一层的上一层串联好\",{\"1\":{\"66\":1}}],[\"将这个二叉树看成是两个\",{\"1\":{\"26\":1}}],[\"将递归逻辑写成迭代的形式\",{\"1\":{\"26\":1}}],[\"迭代遍历统一法\",{\"0\":{\"400\":1}}],[\"迭代遍历\",{\"0\":{\"396\":1}}],[\"迭代写法\",{\"0\":{\"390\":1}}],[\"迭代\",{\"0\":{\"26\":1}}],[\"个字符\",{\"1\":{\"300\":3}}],[\"个元素有序的\",{\"1\":{\"317\":1}}],[\"个元素不等于\",{\"1\":{\"235\":1}}],[\"个元素之外留下了什么并不重要\",{\"1\":{\"233\":2}}],[\"个元素包含不等于\",{\"1\":{\"233\":1}}],[\"个元素\",{\"1\":{\"211\":1,\"233\":1,\"391\":1}}],[\"个操作的总时间复杂度为\",{\"1\":{\"208\":1}}],[\"个数字\",{\"1\":{\"155\":1}}],[\"个结点\",{\"0\":{\"121\":1},\"1\":{\"122\":1,\"390\":1}}],[\"个整数组成的数组\",{\"1\":{\"113\":1}}],[\"个环\",{\"1\":{\"87\":2}}],[\"个节点前面插入一个节点\",{\"1\":{\"415\":1}}],[\"个节点的数值\",{\"1\":{\"415\":2}}],[\"个节点的存放\",{\"1\":{\"295\":1}}],[\"个节点之后的\",{\"1\":{\"414\":1}}],[\"个节点组成的第二层\",{\"1\":{\"274\":1}}],[\"个节点位置\",{\"1\":{\"125\":1}}],[\"个节点\",{\"0\":{\"414\":1},\"1\":{\"27\":1,\"38\":1,\"76\":1,\"153\":2,\"203\":1,\"390\":1,\"414\":3,\"417\":1,\"443\":4,\"447\":1}}],[\"个\",{\"1\":{\"25\":1,\"124\":1,\"126\":2,\"194\":1,\"228\":1,\"264\":1,\"300\":2,\"368\":2}}],[\"个或者以上的重复元素\",{\"1\":{\"15\":1}}],[\"a+b\",{\"1\":{\"447\":3}}],[\"a+\",{\"1\":{\"445\":1}}],[\"a++\",{\"1\":{\"117\":1}}],[\"at\",{\"1\":{\"443\":2}}],[\"avl\",{\"1\":{\"405\":2}}],[\"avl树\",{\"0\":{\"405\":1}}],[\"algo\",{\"1\":{\"351\":1,\"383\":1,\"384\":1,\"385\":1,\"386\":1,\"403\":1,\"404\":2,\"407\":1}}],[\"allroot\",{\"1\":{\"407\":5}}],[\"all\",{\"1\":{\"42\":1}}],[\"ary\",{\"1\":{\"269\":1}}],[\"arraydeque\",{\"0\":{\"376\":1},\"1\":{\"375\":1,\"376\":1,\"377\":3,\"438\":1}}],[\"arraydeque<integer>\",{\"1\":{\"211\":2}}],[\"arraydeque<>\",{\"1\":{\"47\":1,\"76\":1,\"135\":1,\"146\":1,\"194\":2,\"203\":1,\"274\":1,\"295\":1}}],[\"array\",{\"1\":{\"339\":1,\"403\":1,\"404\":2}}],[\"arraylist<list<integer>>\",{\"1\":{\"391\":1}}],[\"arraylist<integer>\",{\"1\":{\"96\":1}}],[\"arraylist<>\",{\"1\":{\"96\":1,\"117\":1,\"135\":1,\"137\":1,\"256\":1,\"274\":2,\"276\":2,\"293\":1,\"295\":1,\"389\":1,\"390\":2,\"391\":1,\"397\":1,\"398\":1,\"399\":1}}],[\"arrays\",{\"1\":{\"96\":2,\"104\":1,\"117\":2,\"250\":1}}],[\"about\",{\"0\":{\"451\":1}}],[\"abs\",{\"1\":{\"344\":6}}],[\"abcd\",{\"1\":{\"300\":1}}],[\"abcdefg\",{\"1\":{\"300\":1}}],[\"ab\",{\"1\":{\"261\":1}}],[\"abbaca\",{\"1\":{\"43\":2}}],[\"actuallength\",{\"1\":{\"233\":1}}],[\"action\",{\"1\":{\"4\":2}}],[\"actions\",{\"1\":{\"4\":2}}],[\"ascii\",{\"1\":{\"242\":1}}],[\"assert\",{\"1\":{\"233\":2}}],[\"as\",{\"1\":{\"211\":1,\"332\":1}}],[\"aslist\",{\"1\":{\"96\":1,\"104\":1,\"117\":1}}],[\"anagram\",{\"1\":{\"223\":1,\"224\":1}}],[\"and\",{\"1\":{\"211\":1,\"332\":1,\"438\":1}}],[\"ans++\",{\"1\":{\"237\":1}}],[\"ans\",{\"1\":{\"59\":6,\"117\":3,\"137\":8,\"187\":6,\"235\":4,\"237\":3,\"274\":3,\"276\":6,\"284\":3}}],[\"api\",{\"0\":{\"103\":1}}],[\"append\",{\"1\":{\"47\":1,\"106\":1,\"108\":2}}],[\"aab\",{\"1\":{\"261\":1}}],[\"aa\",{\"1\":{\"43\":1,\"261\":2}}],[\"aaca\",{\"1\":{\"43\":1}}],[\"adjacent\",{\"1\":{\"42\":1}}],[\"addatindex\",{\"1\":{\"328\":4,\"332\":3,\"335\":3}}],[\"addattail\",{\"1\":{\"328\":4,\"332\":5,\"335\":4}}],[\"addathead\",{\"1\":{\"328\":4,\"332\":4,\"335\":4}}],[\"addlast\",{\"1\":{\"76\":1,\"274\":2,\"295\":3}}],[\"add\",{\"1\":{\"38\":3,\"76\":2,\"96\":1,\"117\":1,\"135\":1,\"137\":1,\"256\":1,\"274\":2,\"276\":2,\"293\":1,\"295\":1,\"389\":1,\"390\":2,\"391\":2,\"393\":1,\"394\":1,\"395\":1,\"397\":1,\"398\":1,\"399\":1,\"401\":3,\"438\":1}}],[\"a\",{\"1\":{\"25\":1,\"64\":1,\"68\":1,\"73\":1,\"76\":1,\"100\":1,\"101\":2,\"113\":4,\"117\":10,\"201\":1,\"203\":1,\"228\":2,\"242\":4,\"261\":1,\"265\":3,\"283\":1,\"284\":3,\"339\":1,\"443\":5,\"445\":4,\"447\":5}}],[\"每移动一次就减小\",{\"1\":{\"334\":1}}],[\"每计数至\",{\"1\":{\"300\":1}}],[\"每组子节点都由\",{\"1\":{\"270\":1}}],[\"每一个节点有两个指针域\",{\"1\":{\"424\":1}}],[\"每一个节点由两部分组成\",{\"1\":{\"421\":1}}],[\"每一层递归的操作都是o\",{\"1\":{\"391\":1}}],[\"每一层从左到右遍历时\",{\"1\":{\"134\":1}}],[\"每一次将该数替换为它每个位置上的数字的平方和\",{\"1\":{\"151\":1}}],[\"每次循环的\",{\"1\":{\"368\":1}}],[\"每次比较两个指针对应的数\",{\"1\":{\"342\":1}}],[\"每次翻转完\",{\"1\":{\"302\":1}}],[\"每次的\",{\"1\":{\"294\":1}}],[\"每次取出的数字变量为\",{\"1\":{\"235\":1}}],[\"每次调用\",{\"1\":{\"191\":1}}],[\"每次走一步\",{\"1\":{\"85\":1}}],[\"每次走\",{\"1\":{\"85\":1}}],[\"每次走两步\",{\"1\":{\"85\":2}}],[\"每次判断一对节点是否对称\",{\"1\":{\"25\":1,\"27\":1}}],[\"每遍历一层\",{\"1\":{\"37\":1}}],[\"每个数字的平方\",{\"1\":{\"340\":1}}],[\"每个字符的情况\",{\"1\":{\"263\":1}}],[\"每个右括号都有一个对应的相同类型的左括号\",{\"1\":{\"142\":1}}],[\"每个节点存放着下一个节点的内存地址\",{\"1\":{\"426\":1}}],[\"每个节点最多出队一次\",{\"1\":{\"274\":1,\"276\":1}}],[\"每个节点最多出队和入队一次\",{\"1\":{\"76\":1,\"78\":1}}],[\"每个节点最多进队列一次\",{\"1\":{\"135\":2,\"137\":1}}],[\"每个节点只访问一次\",{\"1\":{\"68\":1}}],[\"每个节点都会遍历一次\",{\"1\":{\"59\":1}}],[\"每个父节点都有两个子节点\",{\"1\":{\"64\":1}}],[\"每个几点最多进队一次\",{\"1\":{\"27\":1}}],[\"每个二叉树的右子树与另一个树的左子树互为镜像\",{\"1\":{\"24\":1}}],[\"每种输入只会对应一个答案\",{\"1\":{\"16\":1}}],[\"则自动取消订单并释放锁定的库存\",{\"1\":{\"438\":1}}],[\"则节点数量为\",{\"1\":{\"383\":1}}],[\"则删除链表中下标为\",{\"1\":{\"328\":1}}],[\"则还需要属性\",{\"1\":{\"328\":1}}],[\"则反转前\",{\"1\":{\"300\":1}}],[\"则不是正确答案\",{\"1\":{\"263\":2}}],[\"则跳过该数字不进行拷贝覆盖\",{\"1\":{\"235\":1}}],[\"则进行拷贝覆盖\",{\"1\":{\"235\":1}}],[\"则最终哈希表中所有字符统计数值都应为\",{\"1\":{\"226\":1}}],[\"则\",{\"1\":{\"226\":2}}],[\"则称\",{\"1\":{\"224\":1}}],[\"则说明不是快乐数\",{\"1\":{\"155\":1}}],[\"则就说明没有循环\",{\"1\":{\"153\":1}}],[\"则需要保证每一重循环枚举到的元素不小于其上一重循环枚举到的元素\",{\"1\":{\"115\":1}}],[\"则认为两个四元组重复\",{\"1\":{\"113\":1}}],[\"则在该链表中没有环\",{\"1\":{\"83\":1}}],[\"则链表中存在环\",{\"1\":{\"83\":1}}],[\"则返回\",{\"1\":{\"83\":1,\"151\":1,\"328\":1,\"334\":1}}],[\"则可得到树的深度\",{\"1\":{\"37\":1}}],[\"则计数器\",{\"1\":{\"37\":1}}],[\"则为\",{\"1\":{\"23\":3}}],[\"则将节点的值输出\",{\"1\":{\"396\":1,\"400\":1}}],[\"则将其标记为灰色\",{\"1\":{\"396\":1,\"400\":1}}],[\"则将剩余字符全部反转\",{\"1\":{\"300\":1}}],[\"则将\",{\"1\":{\"15\":1,\"64\":1,\"73\":1}}],[\"内存的解决方案\",{\"1\":{\"443\":1}}],[\"内存地址是连续\",{\"1\":{\"365\":1}}],[\"内部使用一个\",{\"1\":{\"438\":1}}],[\"内部定义一个\",{\"1\":{\"330\":1}}],[\"内\",{\"1\":{\"22\":1,\"55\":1,\"73\":1,\"83\":1,\"160\":1,\"199\":1,\"216\":1}}],[\"给你两个单链表的头节点\",{\"1\":{\"443\":1}}],[\"给你两个字符串\",{\"1\":{\"261\":1}}],[\"给你四个整数数组\",{\"1\":{\"281\":1}}],[\"给你一棵二叉树的根节点\",{\"1\":{\"199\":1}}],[\"给你一个按\",{\"1\":{\"340\":1}}],[\"给你一个正整数\",{\"1\":{\"309\":1}}],[\"给你一个数组\",{\"1\":{\"233\":1}}],[\"给你一个链表的头节点\",{\"1\":{\"160\":1}}],[\"给你一个链表\",{\"1\":{\"122\":1,\"216\":1}}],[\"给你一个由\",{\"1\":{\"113\":1}}],[\"给你一个字符串\",{\"1\":{\"101\":1}}],[\"给你一个整数数组\",{\"1\":{\"92\":1}}],[\"给你一个二叉树的根节点\",{\"1\":{\"22\":1}}],[\"给你单链表的头节点\",{\"1\":{\"171\":1}}],[\"给定一棵二叉树的根节点\",{\"1\":{\"289\":1}}],[\"给定一个字符串\",{\"1\":{\"300\":1}}],[\"给定一个含有\",{\"1\":{\"183\":1}}],[\"给定一个只包括\",{\"1\":{\"142\":1}}],[\"给定一个链表的头节点\",{\"1\":{\"83\":1}}],[\"给定一个\",{\"1\":{\"64\":1,\"270\":1,\"317\":1}}],[\"给定一个二叉树的\",{\"1\":{\"131\":1}}],[\"给定一个二叉树\",{\"1\":{\"32\":1,\"55\":1,\"73\":1}}],[\"给定一个整数数组\",{\"1\":{\"13\":1}}],[\"给定两个数组\",{\"1\":{\"251\":1}}],[\"给定两个字符串\",{\"1\":{\"224\":1}}],[\"给定二叉树如图\",{\"1\":{\"64\":1,\"73\":1}}],[\"给出由小写字母组成的字符串\",{\"1\":{\"43\":1}}],[\"对书中的每个节点都进行递归调用函数\",{\"1\":{\"391\":1}}],[\"对象当成链表中的节点\",{\"1\":{\"330\":1}}],[\"对象\",{\"1\":{\"328\":1,\"426\":1}}],[\"对应的值累加起来\",{\"1\":{\"283\":1}}],[\"对\",{\"1\":{\"153\":1}}],[\"对称二叉树\",{\"0\":{\"20\":1,\"21\":1}}],[\"对于\",{\"1\":{\"387\":1}}],[\"对于变量的边界怎么定义\",{\"1\":{\"313\":1}}],[\"对于有\",{\"1\":{\"211\":1}}],[\"对于一个四位数来说\",{\"1\":{\"155\":1}}],[\"对于一个三位数来说\",{\"1\":{\"155\":1}}],[\"对于一个正整数\",{\"1\":{\"151\":1}}],[\"对于其他的一对节点\",{\"1\":{\"26\":1}}],[\"对于根节点而已\",{\"1\":{\"26\":1}}],[\"对于每个\",{\"1\":{\"15\":1}}],[\"对于某个题型\",{\"1\":{\"7\":1}}],[\"令\",{\"1\":{\"17\":1,\"25\":1,\"27\":1,\"36\":1,\"38\":1,\"47\":1,\"50\":1,\"59\":1,\"68\":1,\"76\":1,\"78\":1,\"96\":1,\"104\":1,\"106\":1,\"117\":1,\"126\":1,\"135\":1,\"137\":1,\"146\":1,\"163\":1,\"166\":1,\"175\":1,\"178\":1,\"187\":1,\"194\":1,\"201\":1,\"203\":1,\"211\":1,\"220\":1,\"228\":1,\"237\":1,\"246\":1,\"256\":1,\"265\":1,\"274\":1,\"276\":1,\"284\":1,\"293\":1,\"295\":1,\"304\":1,\"313\":1,\"321\":1,\"332\":1,\"335\":1,\"344\":1,\"447\":1}}],[\"复杂度分析\",{\"1\":{\"17\":1,\"25\":1,\"27\":1,\"36\":1,\"38\":1,\"47\":1,\"50\":1,\"59\":1,\"68\":1,\"76\":1,\"78\":1,\"87\":1,\"96\":1,\"104\":1,\"106\":1,\"108\":1,\"117\":1,\"126\":1,\"135\":1,\"137\":1,\"146\":1,\"155\":1,\"163\":1,\"166\":1,\"175\":1,\"178\":1,\"187\":1,\"194\":1,\"201\":1,\"203\":1,\"211\":1,\"220\":1,\"228\":1,\"237\":1,\"246\":1,\"256\":1,\"265\":1,\"274\":1,\"276\":1,\"284\":1,\"293\":1,\"295\":1,\"304\":1,\"313\":1,\"321\":1,\"332\":1,\"335\":1,\"344\":1,\"390\":1,\"391\":1,\"395\":1,\"447\":1}}],[\"复盘总结并不是流水账日记\",{\"1\":{\"9\":1}}],[\"row\",{\"1\":{\"288\":1}}],[\"root\",{\"1\":{\"22\":3,\"25\":4,\"27\":3,\"32\":3,\"34\":3,\"36\":4,\"38\":3,\"55\":2,\"59\":8,\"64\":2,\"66\":2,\"67\":2,\"68\":5,\"73\":2,\"76\":5,\"78\":5,\"131\":1,\"135\":3,\"137\":7,\"199\":11,\"201\":11,\"202\":1,\"203\":10,\"270\":2,\"272\":2,\"274\":3,\"276\":3,\"289\":3,\"293\":11,\"295\":3,\"381\":1,\"389\":2,\"390\":3,\"391\":2,\"393\":5,\"394\":5,\"395\":5,\"397\":3,\"398\":3,\"399\":3,\"401\":9,\"407\":16}}],[\"ransomnote\",{\"1\":{\"261\":8,\"263\":3,\"265\":3}}],[\"ransom\",{\"1\":{\"260\":1}}],[\"rat\",{\"1\":{\"224\":1}}],[\"r\",{\"1\":{\"117\":11,\"244\":4,\"302\":1,\"303\":2,\"304\":10}}],[\"representation\",{\"1\":{\"403\":1,\"404\":2}}],[\"ret\",{\"1\":{\"332\":3,\"344\":6}}],[\"return\",{\"1\":{\"17\":2,\"25\":4,\"27\":3,\"36\":2,\"38\":2,\"47\":2,\"50\":2,\"59\":3,\"68\":2,\"76\":2,\"78\":2,\"87\":3,\"96\":2,\"104\":1,\"106\":1,\"108\":2,\"117\":1,\"126\":2,\"135\":2,\"137\":2,\"146\":4,\"155\":3,\"163\":2,\"166\":1,\"175\":1,\"178\":2,\"187\":2,\"194\":3,\"201\":2,\"203\":2,\"208\":3,\"211\":3,\"220\":2,\"228\":3,\"237\":1,\"256\":1,\"265\":3,\"274\":1,\"276\":2,\"284\":1,\"293\":3,\"295\":2,\"304\":1,\"313\":1,\"321\":2,\"322\":2,\"323\":2,\"332\":6,\"335\":5,\"344\":1,\"360\":1,\"367\":3,\"368\":6,\"369\":2,\"389\":1,\"390\":2,\"391\":2,\"393\":1,\"394\":1,\"395\":1,\"397\":2,\"398\":2,\"399\":2,\"401\":3,\"407\":7,\"430\":1,\"431\":3,\"438\":1,\"447\":2}}],[\"reversestr\",{\"1\":{\"304\":1}}],[\"reversestring\",{\"1\":{\"246\":1}}],[\"reverselist\",{\"1\":{\"175\":1,\"178\":2}}],[\"reverseeachword\",{\"1\":{\"107\":1,\"108\":2}}],[\"reversewords\",{\"1\":{\"104\":1,\"106\":1,\"108\":1}}],[\"reverse\",{\"1\":{\"100\":1,\"103\":1,\"104\":1,\"107\":1,\"108\":3,\"170\":1,\"241\":1,\"299\":1,\"304\":2,\"399\":1,\"407\":1}}],[\"removeelement\",{\"1\":{\"233\":1,\"237\":1}}],[\"removeelements\",{\"1\":{\"163\":1,\"166\":1}}],[\"removenthfromend\",{\"1\":{\"126\":1}}],[\"removeduplicates\",{\"1\":{\"47\":1,\"50\":1}}],[\"remove\",{\"1\":{\"42\":1,\"121\":1,\"159\":1,\"232\":1,\"431\":1,\"438\":1}}],[\"restored\",{\"1\":{\"438\":1}}],[\"result\",{\"1\":{\"390\":4,\"391\":6,\"397\":4,\"398\":4,\"399\":5,\"401\":9}}],[\"reslist\",{\"1\":{\"256\":4,\"391\":1}}],[\"res++\",{\"1\":{\"38\":1}}],[\"res\",{\"1\":{\"38\":2,\"96\":4,\"106\":3,\"135\":4,\"256\":3,\"293\":7,\"295\":4,\"313\":6}}],[\"recur\",{\"1\":{\"25\":4}}],[\"rightchildindex\",{\"1\":{\"438\":5}}],[\"right+1\",{\"1\":{\"367\":1}}],[\"right时\",{\"1\":{\"344\":1}}],[\"right=mid−1\",{\"1\":{\"319\":1}}],[\"right=mid\",{\"1\":{\"319\":1}}],[\"rightsideview\",{\"1\":{\"135\":1,\"137\":1}}],[\"right\",{\"1\":{\"23\":4,\"24\":7,\"25\":13,\"26\":2,\"27\":2,\"36\":1,\"38\":2,\"59\":3,\"63\":1,\"64\":1,\"66\":2,\"67\":1,\"68\":6,\"72\":1,\"73\":1,\"76\":6,\"78\":2,\"108\":10,\"130\":1,\"135\":2,\"137\":1,\"187\":1,\"201\":6,\"203\":8,\"246\":5,\"272\":1,\"293\":2,\"295\":2,\"302\":2,\"311\":1,\"313\":7,\"319\":2,\"321\":4,\"322\":4,\"323\":4,\"344\":12,\"367\":17,\"368\":12,\"369\":5,\"381\":1,\"389\":2,\"390\":2,\"391\":1,\"393\":1,\"394\":1,\"395\":1,\"397\":2,\"398\":1,\"399\":2,\"401\":6,\"407\":6}}],[\"run\",{\"1\":{\"4\":3}}],[\"runs\",{\"1\":{\"4\":1}}],[\"<target\",{\"1\":{\"319\":1,\"322\":1}}],[\"<3\",{\"1\":{\"96\":1}}],[\"<0>0=0\",{\"1\":{\"94\":1}}],[\"<\",{\"1\":{\"17\":1,\"76\":1,\"94\":1,\"96\":9,\"108\":3,\"113\":1,\"117\":8,\"126\":1,\"135\":1,\"187\":1,\"228\":2,\"233\":1,\"244\":1,\"246\":1,\"256\":1,\"263\":1,\"265\":1,\"281\":1,\"304\":2,\"321\":2,\"322\":1,\"323\":1,\"335\":1,\"344\":2,\"367\":3,\"368\":3,\"369\":2,\"386\":1,\"390\":1,\"438\":3}}],[\"<=bottom\",{\"1\":{\"313\":1}}],[\"<=\",{\"1\":{\"13\":6,\"22\":2,\"32\":2,\"43\":2,\"48\":1,\"50\":1,\"55\":2,\"64\":2,\"73\":2,\"83\":2,\"92\":4,\"101\":2,\"108\":3,\"113\":7,\"122\":6,\"131\":2,\"142\":2,\"151\":2,\"160\":4,\"171\":2,\"183\":6,\"191\":2,\"199\":2,\"208\":2,\"216\":2,\"224\":2,\"233\":6,\"242\":2,\"251\":4,\"261\":2,\"265\":1,\"281\":5,\"289\":2,\"300\":4,\"309\":2,\"313\":2,\"323\":1,\"328\":2,\"332\":1,\"335\":1,\"340\":4,\"367\":1,\"391\":1,\"443\":8}}],[\"h=n\",{\"1\":{\"293\":1}}],[\"h为树的高度\",{\"1\":{\"276\":1}}],[\"hash\",{\"1\":{\"351\":1}}],[\"hashmap<integer\",{\"1\":{\"284\":1}}],[\"hashmap<>\",{\"1\":{\"17\":1}}],[\"hash2\",{\"1\":{\"256\":3}}],[\"hash1\",{\"1\":{\"256\":3}}],[\"happy\",{\"1\":{\"150\":1}}],[\"heaparray\",{\"1\":{\"438\":8}}],[\"heap\",{\"1\":{\"438\":10}}],[\"headb\",{\"1\":{\"443\":1,\"445\":5,\"447\":4}}],[\"heada\",{\"1\":{\"443\":1,\"445\":5,\"447\":4}}],[\"head\",{\"1\":{\"83\":4,\"87\":6,\"122\":3,\"126\":4,\"160\":4,\"161\":2,\"163\":9,\"166\":1,\"171\":4,\"175\":2,\"176\":2,\"178\":8,\"216\":3,\"220\":5,\"332\":18,\"333\":1,\"335\":9}}],[\"height\",{\"1\":{\"381\":2}}],[\"hello\",{\"1\":{\"101\":2,\"351\":1,\"383\":1,\"384\":1,\"385\":1,\"386\":1,\"403\":1,\"404\":2}}],[\"h\",{\"1\":{\"59\":2,\"137\":3,\"242\":6,\"276\":1,\"293\":2,\"383\":1}}],[\"hh\",{\"1\":{\"48\":1,\"50\":2}}],[\"https\",{\"1\":{\"12\":1,\"21\":1,\"31\":1,\"42\":1,\"54\":1,\"63\":1,\"72\":1,\"82\":1,\"91\":1,\"100\":1,\"112\":1,\"121\":1,\"130\":1,\"141\":1,\"150\":1,\"159\":1,\"170\":1,\"182\":1,\"190\":1,\"198\":1,\"207\":1,\"215\":1,\"223\":1,\"232\":1,\"241\":1,\"250\":1,\"260\":1,\"269\":1,\"280\":1,\"288\":1,\"299\":1,\"308\":1,\"316\":1,\"327\":1,\"339\":1,\"383\":1,\"384\":1,\"385\":1,\"386\":1,\"403\":1,\"404\":2,\"407\":1,\"442\":1}}],[\"语言支持\",{\"1\":{\"17\":1,\"47\":1,\"87\":1,\"96\":1,\"117\":1,\"126\":1,\"146\":1,\"155\":1,\"163\":1,\"175\":1,\"187\":1,\"194\":1,\"211\":1,\"220\":1,\"228\":1,\"237\":1,\"246\":1,\"256\":1,\"265\":1,\"284\":1,\"304\":1,\"313\":1,\"332\":1,\"344\":1,\"447\":1}}],[\"代表当前节点已经访问完毕\",{\"1\":{\"395\":1}}],[\"代表当前节点\",{\"1\":{\"218\":1}}],[\"代表这个重复元素不可能是解\",{\"1\":{\"15\":1}}],[\"代码随想录\",{\"1\":{\"173\":1}}],[\"代码\",{\"0\":{\"17\":1,\"25\":1,\"27\":1,\"36\":1,\"38\":1,\"47\":1,\"50\":1,\"59\":1,\"68\":1,\"76\":1,\"78\":1,\"87\":1,\"96\":1,\"104\":1,\"106\":1,\"108\":1,\"117\":1,\"126\":1,\"135\":1,\"137\":1,\"146\":1,\"155\":1,\"163\":1,\"166\":1,\"175\":1,\"178\":1,\"187\":1,\"194\":1,\"201\":1,\"203\":1,\"211\":1,\"220\":1,\"228\":1,\"237\":1,\"246\":1,\"256\":1,\"265\":1,\"274\":1,\"276\":1,\"284\":1,\"293\":1,\"295\":1,\"304\":1,\"313\":1,\"321\":1,\"332\":1,\"335\":1,\"344\":1,\"447\":1}}],[\"关键点\",{\"0\":{\"16\":1,\"24\":1,\"35\":1,\"46\":1,\"49\":1,\"58\":1,\"67\":1,\"75\":1,\"86\":1,\"95\":1,\"116\":1,\"125\":1,\"134\":1,\"145\":1,\"154\":1,\"162\":1,\"165\":1,\"174\":1,\"177\":1,\"186\":1,\"200\":1,\"219\":1,\"227\":1,\"236\":1,\"245\":1,\"255\":1,\"264\":1,\"273\":1,\"292\":1,\"303\":1,\"312\":1,\"320\":1,\"331\":1,\"334\":1,\"343\":1,\"446\":1},\"1\":{\"37\":1}}],[\"关于本站\",{\"0\":{\"4\":1}}],[\"关于我\",{\"0\":{\"2\":1,\"3\":1}}],[\"是双端队列接口\",{\"1\":{\"437\":1}}],[\"是单端队列接口\",{\"1\":{\"437\":1}}],[\"是不同的\",{\"1\":{\"390\":1}}],[\"是不是快乐数\",{\"1\":{\"151\":1}}],[\"是一种特殊类型的优先队列\",{\"1\":{\"438\":1}}],[\"是一种特殊类型的抽象数据类型或集合\",{\"1\":{\"437\":1}}],[\"是一种允许在其两端进行插入和删除的线性数据结构\",{\"1\":{\"438\":1}}],[\"是一种搜索方法\",{\"1\":{\"358\":1}}],[\"是一样的\",{\"1\":{\"390\":1}}],[\"是基于什么实现的\",{\"1\":{\"377\":1}}],[\"是什么\",{\"0\":{\"358\":1}}],[\"是指向下一个节点的指针\",{\"1\":{\"328\":1}}],[\"是指从根节点到最远叶子节点的最长路径上的节点数\",{\"1\":{\"32\":1}}],[\"是当前节点的值\",{\"1\":{\"328\":1}}],[\"是可以合并起来的\",{\"1\":{\"322\":1}}],[\"是为了解决当\",{\"1\":{\"311\":1}}],[\"是和\",{\"1\":{\"283\":1}}],[\"是栈内的元素个数\",{\"1\":{\"194\":1}}],[\"是该条件下的长度最小的子数组\",{\"1\":{\"183\":1}}],[\"是快乐数\",{\"1\":{\"153\":1}}],[\"是二叉树的高度\",{\"1\":{\"137\":1}}],[\"是由非空格字符组成的字符串\",{\"1\":{\"101\":1}}],[\"是下一行的头\",{\"1\":{\"78\":1}}],[\"是某一行的节点\",{\"1\":{\"78\":1}}],[\"是树的高度\",{\"1\":{\"59\":1}}],[\"是否是\",{\"1\":{\"224\":1}}],[\"是否对称\",{\"1\":{\"23\":2}}],[\"是否存在于哈希表中\",{\"1\":{\"15\":1}}],[\"是\",{\"1\":{\"16\":1,\"83\":1,\"151\":1,\"368\":1,\"369\":1}}],[\"是因为我不足够擅长才痛苦\",{\"1\":{\"8\":1}}],[\"是因为就目前而来\",{\"1\":{\"7\":1}}],[\"x+y+n\",{\"1\":{\"85\":2}}],[\"x+y\",{\"1\":{\"85\":2,\"87\":1}}],[\"x\",{\"1\":{\"15\":5,\"16\":2,\"85\":2,\"87\":2,\"117\":8,\"191\":3,\"194\":2,\"208\":3,\"211\":3,\"309\":1,\"381\":2,\"426\":2,\"430\":7,\"431\":12,\"447\":2}}],[\"思路是\",{\"1\":{\"397\":1}}],[\"思路改进\",{\"0\":{\"322\":1}}],[\"思路2\",{\"0\":{\"136\":1,\"164\":1,\"176\":1}}],[\"思路1\",{\"0\":{\"133\":1,\"161\":1,\"173\":1,\"185\":1,\"218\":1}}],[\"思路3\",{\"0\":{\"107\":1}}],[\"思路\",{\"0\":{\"15\":1,\"23\":1,\"26\":1,\"34\":1,\"37\":1,\"45\":1,\"48\":1,\"57\":1,\"66\":1,\"74\":1,\"77\":1,\"85\":1,\"94\":1,\"103\":1,\"105\":1,\"115\":1,\"124\":1,\"144\":1,\"153\":1,\"193\":1,\"202\":1,\"210\":1,\"226\":1,\"235\":1,\"244\":1,\"254\":1,\"263\":1,\"272\":1,\"275\":1,\"283\":1,\"291\":1,\"294\":1,\"302\":1,\"311\":1,\"319\":1,\"330\":1,\"333\":1,\"342\":1,\"445\":1},\"1\":{\"199\":1}}],[\"思考了一下原因\",{\"1\":{\"6\":1}}],[\"前序遍历的顺序是\",{\"1\":{\"397\":1}}],[\"前序遍历\",{\"0\":{\"393\":1,\"397\":1,\"401\":1},\"1\":{\"393\":1,\"407\":1}}],[\"前中后属于\",{\"1\":{\"387\":1}}],[\"前\",{\"0\":{\"392\":1},\"1\":{\"235\":1,\"392\":1}}],[\"前缀和+二分查找\",{\"1\":{\"184\":1}}],[\"前驱节点\",{\"1\":{\"175\":1,\"333\":1}}],[\"前置知识\",{\"0\":{\"14\":1,\"33\":1,\"44\":1,\"56\":1,\"65\":1,\"84\":1,\"93\":1,\"102\":1,\"114\":1,\"123\":1,\"132\":1,\"143\":1,\"152\":1,\"172\":1,\"184\":1,\"192\":1,\"209\":1,\"217\":1,\"225\":1,\"234\":1,\"243\":1,\"252\":1,\"262\":1,\"271\":1,\"282\":1,\"290\":1,\"301\":1,\"310\":1,\"318\":1,\"329\":1,\"341\":1,\"444\":1},\"1\":{\"73\":1,\"160\":1}}],[\"前者是为了解决\",{\"1\":{\"7\":1}}],[\"637\",{\"1\":{\"408\":1}}],[\"62\",{\"1\":{\"151\":1}}],[\"68\",{\"1\":{\"151\":1}}],[\"6000\",{\"1\":{\"73\":1}}],[\"6\",{\"1\":{\"13\":2,\"55\":1,\"64\":2,\"160\":3,\"199\":2,\"270\":4,\"309\":1,\"393\":1,\"394\":1,\"395\":1,\"407\":1,\"443\":2}}],[\"404\",{\"1\":{\"450\":1}}],[\"49\",{\"1\":{\"340\":1}}],[\"454\",{\"0\":{\"279\":1,\"280\":1}}],[\"429\",{\"0\":{\"268\":1,\"269\":1},\"1\":{\"408\":1}}],[\"4位数只会降到3位数\",{\"1\":{\"155\":1}}],[\"4sum\",{\"1\":{\"112\":1,\"280\":1}}],[\"4\",{\"1\":{\"13\":2,\"22\":2,\"32\":1,\"55\":1,\"64\":2,\"73\":2,\"83\":2,\"92\":3,\"101\":1,\"122\":1,\"131\":2,\"160\":3,\"171\":2,\"183\":5,\"199\":2,\"211\":1,\"216\":2,\"224\":1,\"233\":3,\"251\":5,\"270\":5,\"289\":1,\"300\":2,\"309\":1,\"317\":2,\"340\":5,\"443\":13}}],[\"31\",{\"1\":{\"289\":2}}],[\"383\",{\"0\":{\"259\":1,\"260\":1}}],[\"349\",{\"0\":{\"249\":1,\"250\":1}}],[\"344\",{\"0\":{\"240\":1,\"241\":1}}],[\"324\",{\"1\":{\"155\":1}}],[\"30\",{\"1\":{\"122\":1,\"438\":1}}],[\"3000\",{\"1\":{\"92\":1}}],[\"3sum\",{\"1\":{\"91\":1}}],[\"3\",{\"0\":{\"369\":1},\"1\":{\"13\":4,\"15\":1,\"22\":4,\"32\":2,\"55\":2,\"64\":2,\"73\":2,\"83\":2,\"92\":3,\"101\":1,\"117\":3,\"122\":3,\"131\":5,\"142\":1,\"160\":3,\"171\":3,\"183\":4,\"199\":5,\"201\":1,\"211\":1,\"216\":3,\"233\":6,\"261\":1,\"270\":4,\"289\":5,\"309\":2,\"311\":1,\"317\":2,\"323\":1,\"328\":6,\"340\":3,\"385\":1,\"393\":1,\"394\":1,\"395\":1,\"407\":1,\"443\":9}}],[\"返回其节点值的\",{\"1\":{\"270\":1}}],[\"返回其最大深度\",{\"1\":{\"32\":1}}],[\"返回队列开头的元素\",{\"1\":{\"208\":1}}],[\"返回栈顶元素\",{\"1\":{\"191\":1}}],[\"返回反转之后的头节点\",{\"1\":{\"176\":1}}],[\"返回从右侧所能看到的节点值\",{\"1\":{\"131\":1}}],[\"返回答案\",{\"1\":{\"113\":1}}],[\"返回的结果字符串中\",{\"1\":{\"101\":1}}],[\"返回索引为\",{\"1\":{\"83\":2}}],[\"返回链表开始入环的第一个节点\",{\"1\":{\"83\":1}}],[\"返回左右孩子较小深度的节点值\",{\"1\":{\"57\":1}}],[\"返回不为空的孩子节点的深度\",{\"1\":{\"57\":1}}],[\"返回树的深度\",{\"1\":{\"34\":1}}],[\"返回值\",{\"1\":{\"34\":1,\"199\":1}}],[\"返回值是对称标志\",{\"1\":{\"23\":1}}],[\"返回\",{\"1\":{\"13\":1,\"83\":1,\"101\":1,\"183\":1,\"191\":5,\"201\":1,\"208\":2,\"233\":1,\"251\":1,\"261\":1,\"328\":2,\"340\":1,\"443\":1}}],[\"+=\",{\"1\":{\"155\":1,\"187\":1,\"284\":1}}],[\"+z\",{\"1\":{\"85\":1}}],[\"++\",{\"1\":{\"228\":1,\"256\":2,\"265\":1}}],[\"++end\",{\"1\":{\"108\":2}}],[\"++left\",{\"1\":{\"108\":2}}],[\"++tt\",{\"1\":{\"50\":1}}],[\"++i\",{\"1\":{\"17\":1,\"96\":2}}],[\"+1\",{\"1\":{\"36\":1,\"37\":1,\"226\":1,\"321\":1}}],[\"+\",{\"1\":{\"13\":1,\"34\":1,\"35\":1,\"36\":1,\"50\":1,\"59\":1,\"92\":14,\"94\":2,\"96\":3,\"106\":3,\"108\":1,\"113\":3,\"117\":24,\"137\":2,\"151\":5,\"155\":3,\"187\":2,\"276\":1,\"281\":15,\"283\":1,\"284\":3,\"293\":2,\"302\":2,\"304\":2,\"321\":1,\"322\":1,\"323\":2,\"367\":4,\"368\":2,\"369\":5,\"391\":2,\"438\":4,\"443\":2}}],[\"07\",{\"0\":{\"441\":1,\"442\":1},\"1\":{\"416\":1}}],[\"02\",{\"0\":{\"442\":1},\"1\":{\"151\":2,\"416\":1}}],[\"0\",{\"1\":{\"13\":4,\"17\":2,\"32\":1,\"34\":1,\"36\":1,\"38\":2,\"47\":1,\"50\":3,\"55\":1,\"59\":1,\"64\":1,\"73\":1,\"76\":1,\"83\":5,\"92\":21,\"94\":6,\"96\":14,\"106\":3,\"108\":4,\"113\":8,\"117\":2,\"122\":1,\"126\":1,\"131\":1,\"135\":1,\"137\":1,\"155\":2,\"160\":2,\"171\":1,\"183\":2,\"187\":6,\"194\":2,\"199\":1,\"216\":2,\"220\":1,\"226\":1,\"228\":3,\"233\":11,\"237\":1,\"246\":1,\"251\":1,\"256\":4,\"263\":1,\"265\":1,\"270\":1,\"274\":1,\"276\":1,\"281\":20,\"284\":2,\"289\":1,\"293\":1,\"295\":1,\"304\":1,\"313\":2,\"317\":2,\"319\":1,\"321\":1,\"322\":1,\"323\":1,\"328\":2,\"332\":4,\"334\":1,\"335\":3,\"340\":4,\"342\":1,\"344\":1,\"365\":1,\"367\":2,\"368\":6,\"369\":2,\"381\":1,\"383\":1,\"390\":1,\"391\":1,\"407\":3,\"438\":4,\"443\":12,\"445\":2}}],[\"06\",{\"1\":{\"4\":3}}],[\"输出结果中的每个元素一定是\",{\"1\":{\"251\":1}}],[\"输出一个节点\",{\"1\":{\"176\":1}}],[\"输出的顺序和三元组的顺序并不重要\",{\"1\":{\"92\":1}}],[\"输出\",{\"1\":{\"13\":3,\"22\":2,\"32\":2,\"43\":1,\"55\":2,\"64\":2,\"73\":2,\"83\":3,\"92\":3,\"101\":3,\"113\":2,\"122\":3,\"131\":3,\"142\":3,\"151\":2,\"160\":3,\"171\":3,\"183\":3,\"191\":1,\"199\":3,\"208\":1,\"216\":3,\"224\":2,\"233\":2,\"242\":2,\"251\":2,\"261\":3,\"270\":2,\"281\":2,\"289\":2,\"300\":2,\"309\":2,\"317\":2,\"328\":1,\"340\":2,\"443\":3}}],[\"输入数组\",{\"1\":{\"233\":1}}],[\"输入字符串以字符数组\",{\"1\":{\"242\":1}}],[\"输入字符串\",{\"1\":{\"101\":1}}],[\"输入\",{\"1\":{\"13\":3,\"22\":2,\"32\":2,\"43\":1,\"55\":2,\"64\":2,\"73\":2,\"83\":3,\"92\":3,\"101\":3,\"113\":2,\"122\":3,\"131\":3,\"142\":3,\"151\":2,\"160\":3,\"171\":3,\"183\":3,\"191\":1,\"199\":3,\"208\":1,\"216\":3,\"224\":2,\"233\":2,\"242\":2,\"251\":2,\"261\":3,\"270\":2,\"281\":2,\"289\":2,\"300\":2,\"309\":2,\"317\":2,\"328\":1,\"340\":2,\"443\":3}}],[\"977\",{\"0\":{\"338\":1,\"339\":1}}],[\"9999\",{\"1\":{\"317\":2}}],[\"9^2+9^2+9^2\",{\"1\":{\"155\":1}}],[\"92\",{\"1\":{\"151\":1}}],[\"9\",{\"1\":{\"13\":6,\"32\":1,\"55\":1,\"191\":1,\"199\":2,\"208\":1,\"251\":5,\"270\":2,\"289\":2,\"309\":1,\"317\":4,\"340\":5,\"443\":2}}],[\"732\",{\"1\":{\"404\":2}}],[\"707\",{\"0\":{\"326\":1,\"327\":1},\"1\":{\"415\":1}}],[\"704\",{\"0\":{\"315\":1,\"316\":1}}],[\"7\",{\"1\":{\"13\":1,\"32\":1,\"55\":1,\"64\":2,\"73\":2,\"160\":5,\"183\":1,\"199\":2,\"270\":2,\"309\":1,\"340\":1,\"368\":1,\"393\":1,\"394\":1,\"395\":1,\"407\":1}}],[\"2h+1−1\",{\"1\":{\"383\":1}}],[\"2k\",{\"1\":{\"300\":3,\"302\":1}}],[\"28\",{\"1\":{\"281\":2}}],[\"27\",{\"0\":{\"231\":1,\"232\":1}}],[\"26\",{\"1\":{\"228\":3,\"263\":1,\"264\":1,\"265\":2}}],[\"242\",{\"0\":{\"222\":1,\"223\":1},\"1\":{\"264\":1}}],[\"24\",{\"0\":{\"214\":1,\"215\":1}}],[\"243\",{\"1\":{\"155\":1}}],[\"232\",{\"0\":{\"206\":1,\"207\":1}}],[\"231\",{\"1\":{\"151\":1}}],[\"2⋅logn\",{\"1\":{\"155\":1}}],[\"226\",{\"0\":{\"197\":1,\"198\":1}}],[\"225\",{\"0\":{\"189\":1,\"190\":1}}],[\"22\",{\"1\":{\"151\":1}}],[\"2n+1\",{\"1\":{\"194\":1}}],[\"2n\",{\"1\":{\"25\":1,\"87\":1}}],[\"2\",{\"0\":{\"26\":1,\"37\":1,\"48\":1,\"77\":1,\"105\":1,\"202\":1,\"275\":1,\"294\":1,\"368\":1},\"1\":{\"13\":6,\"22\":5,\"27\":1,\"32\":3,\"38\":1,\"55\":3,\"64\":4,\"73\":3,\"83\":3,\"85\":1,\"92\":7,\"101\":1,\"113\":16,\"117\":5,\"122\":5,\"126\":2,\"131\":2,\"142\":1,\"146\":2,\"151\":2,\"153\":1,\"160\":3,\"171\":5,\"175\":3,\"183\":4,\"191\":6,\"199\":5,\"201\":1,\"203\":1,\"208\":4,\"211\":1,\"216\":3,\"224\":1,\"233\":12,\"242\":1,\"246\":1,\"251\":6,\"261\":1,\"270\":5,\"281\":12,\"289\":5,\"300\":3,\"302\":1,\"304\":1,\"309\":3,\"317\":3,\"321\":1,\"322\":1,\"323\":2,\"328\":5,\"335\":1,\"340\":2,\"367\":1,\"368\":2,\"369\":1,\"381\":1,\"383\":2,\"390\":1,\"393\":1,\"394\":1,\"395\":1,\"397\":1,\"407\":1,\"438\":8,\"443\":13}}],[\"209\",{\"0\":{\"181\":1,\"182\":1}}],[\"206\",{\"0\":{\"169\":1,\"170\":1},\"1\":{\"413\":1}}],[\"203\",{\"0\":{\"158\":1,\"159\":1},\"1\":{\"412\":1}}],[\"202\",{\"0\":{\"149\":1,\"150\":1}}],[\"2024\",{\"1\":{\"4\":3}}],[\"2000\",{\"1\":{\"328\":1}}],[\"20000\",{\"1\":{\"43\":1}}],[\"200\",{\"1\":{\"113\":1,\"281\":1}}],[\"20\",{\"0\":{\"140\":1,\"141\":1},\"1\":{\"4\":1,\"32\":1,\"55\":1,\"309\":1}}],[\"=num\",{\"1\":{\"235\":1}}],[\"=null\",{\"1\":{\"68\":2,\"161\":1,\"166\":1,\"401\":6}}],[\"=val\",{\"1\":{\"161\":1}}],[\"=o\",{\"1\":{\"117\":1,\"155\":1}}],[\"=>\",{\"1\":{\"66\":1,\"67\":1,\"85\":1,\"367\":1}}],[\"===\",{\"1\":{\"407\":3}}],[\"==target\",{\"1\":{\"319\":1,\"322\":1}}],[\"==null\",{\"1\":{\"201\":1}}],[\"==\",{\"1\":{\"13\":1,\"25\":5,\"27\":4,\"36\":1,\"38\":1,\"47\":2,\"48\":1,\"50\":3,\"59\":3,\"68\":1,\"76\":1,\"78\":1,\"87\":5,\"92\":1,\"94\":2,\"96\":7,\"106\":1,\"108\":2,\"113\":1,\"117\":5,\"126\":2,\"135\":2,\"137\":2,\"146\":4,\"155\":2,\"160\":1,\"163\":3,\"178\":2,\"187\":2,\"203\":1,\"220\":2,\"233\":2,\"244\":1,\"276\":2,\"281\":5,\"293\":3,\"295\":1,\"322\":1,\"323\":1,\"332\":4,\"335\":4,\"344\":2,\"367\":6,\"368\":8,\"369\":3,\"390\":1,\"391\":1,\"393\":1,\"394\":1,\"395\":1,\"397\":1,\"398\":1,\"399\":1,\"407\":4,\"428\":1,\"429\":1,\"430\":2,\"431\":2,\"443\":2,\"445\":1,\"447\":4}}],[\"=\",{\"1\":{\"13\":6,\"17\":4,\"22\":2,\"24\":3,\"25\":5,\"27\":4,\"32\":2,\"34\":1,\"35\":1,\"36\":1,\"38\":6,\"47\":3,\"50\":4,\"55\":2,\"59\":5,\"64\":2,\"66\":1,\"68\":12,\"73\":2,\"75\":3,\"76\":15,\"78\":13,\"83\":6,\"85\":2,\"87\":10,\"92\":12,\"94\":1,\"96\":8,\"101\":3,\"104\":2,\"106\":6,\"108\":13,\"113\":4,\"117\":9,\"122\":6,\"126\":12,\"135\":7,\"137\":1,\"142\":3,\"146\":2,\"151\":6,\"155\":11,\"160\":6,\"163\":9,\"166\":3,\"171\":3,\"175\":12,\"178\":3,\"183\":6,\"187\":8,\"191\":1,\"194\":2,\"199\":3,\"201\":7,\"203\":11,\"208\":1,\"211\":6,\"216\":3,\"218\":4,\"220\":14,\"224\":4,\"228\":5,\"233\":13,\"237\":3,\"242\":2,\"246\":5,\"251\":4,\"256\":7,\"261\":6,\"265\":1,\"270\":2,\"274\":6,\"276\":2,\"281\":12,\"284\":2,\"289\":2,\"293\":3,\"295\":9,\"300\":4,\"302\":2,\"304\":9,\"309\":2,\"311\":1,\"313\":15,\"317\":4,\"321\":5,\"322\":5,\"323\":5,\"328\":1,\"332\":27,\"335\":32,\"340\":2,\"343\":1,\"344\":8,\"351\":1,\"367\":9,\"368\":11,\"369\":11,\"381\":1,\"389\":5,\"390\":8,\"391\":1,\"397\":5,\"398\":8,\"399\":5,\"401\":18,\"407\":16,\"426\":1,\"428\":5,\"429\":5,\"430\":10,\"431\":6,\"438\":13,\"443\":15,\"445\":1,\"447\":7}}],[\"示例\",{\"1\":{\"13\":3,\"22\":2,\"32\":2,\"43\":1,\"55\":2,\"64\":2,\"73\":2,\"83\":3,\"92\":3,\"101\":3,\"113\":2,\"122\":3,\"131\":3,\"142\":3,\"151\":2,\"160\":3,\"171\":3,\"183\":3,\"191\":1,\"199\":3,\"208\":1,\"216\":3,\"224\":2,\"233\":2,\"242\":2,\"251\":2,\"261\":3,\"270\":2,\"281\":2,\"289\":2,\"300\":2,\"309\":2,\"317\":2,\"328\":1,\"340\":2,\"443\":3}}],[\"并删除旧的数组尾元素\",{\"1\":{\"438\":1}}],[\"并删除它们\",{\"1\":{\"43\":1}}],[\"并在每一层按照从左到右的顺序访问节点\",{\"1\":{\"388\":1}}],[\"并且其他请求访问的线程必须等待直到计数器非零\",{\"1\":{\"438\":1}}],[\"并且其实树本身是一种递归的数据结构\",{\"1\":{\"387\":1}}],[\"并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型\",{\"1\":{\"406\":1}}],[\"并且\",{\"1\":{\"233\":2}}],[\"并且返回链表的头结点\",{\"1\":{\"122\":1}}],[\"并交换节点的左右子节点\",{\"1\":{\"202\":1}}],[\"并支持普通栈的全部四种操作\",{\"1\":{\"191\":1}}],[\"并返回交换后链表的头节点\",{\"1\":{\"216\":1}}],[\"并返回其根节点\",{\"1\":{\"199\":1}}],[\"并返回其长度\",{\"1\":{\"183\":1}}],[\"并返回反转后的链表\",{\"1\":{\"171\":1}}],[\"并返回\",{\"1\":{\"160\":1}}],[\"并返回它们的数组下标\",{\"1\":{\"13\":1}}],[\"并将其加入答案中\",{\"1\":{\"294\":1}}],[\"并将当前元素与栈顶元素判断是否相同\",{\"1\":{\"145\":1}}],[\"并将双指针指向新的单词\",{\"1\":{\"105\":1}}],[\"并不是一个东西\",{\"1\":{\"8\":1}}],[\"两者背后的思想是一致的\",{\"1\":{\"388\":1}}],[\"两两交换其中相邻的节点\",{\"1\":{\"216\":1}}],[\"两两交换链表中的节点\",{\"0\":{\"214\":1,\"215\":1}}],[\"两对称节点值相同\",{\"1\":{\"24\":1}}],[\"两个元组如下\",{\"1\":{\"281\":1}}],[\"两个存储数组都是固定长度\",{\"1\":{\"256\":1}}],[\"两个数组的交集\",{\"0\":{\"249\":1,\"250\":1}}],[\"两个指针分别指向待反转的范围\",{\"1\":{\"302\":1}}],[\"两个指针\",{\"1\":{\"246\":1}}],[\"两个二叉树的根节点的值相等\",{\"1\":{\"24\":1}}],[\"两个二叉树互为镜像的定义\",{\"1\":{\"24\":1}}],[\"两个\",{\"1\":{\"13\":1}}],[\"两数之和思路\",{\"1\":{\"282\":1}}],[\"两数之和\",{\"0\":{\"11\":1,\"12\":1}}],[\"和一个\",{\"1\":{\"333\":1}}],[\"和一个值\",{\"1\":{\"233\":1}}],[\"和一个整数\",{\"1\":{\"160\":1,\"300\":1}}],[\"和一个整数目标值\",{\"1\":{\"13\":1}}],[\"和一个目标值\",{\"1\":{\"113\":1,\"317\":1}}],[\"和\",{\"1\":{\"16\":1,\"23\":2,\"26\":2,\"78\":1,\"85\":2,\"87\":1,\"92\":1,\"94\":1,\"108\":1,\"113\":1,\"124\":1,\"153\":1,\"185\":1,\"191\":4,\"208\":2,\"211\":2,\"218\":2,\"224\":4,\"244\":1,\"251\":1,\"261\":2,\"272\":1,\"281\":1,\"283\":1,\"284\":1,\"302\":2,\"304\":2,\"322\":1,\"328\":2,\"332\":1,\"333\":1,\"335\":1,\"342\":1,\"375\":1,\"381\":2,\"387\":1,\"414\":1,\"438\":1,\"443\":4,\"447\":1}}],[\"和为目标值\",{\"1\":{\"13\":1}}],[\"力扣\",{\"0\":{\"12\":1,\"21\":1,\"31\":1,\"42\":1,\"54\":1,\"63\":1,\"72\":1,\"82\":1,\"91\":1,\"100\":1,\"112\":1,\"121\":1,\"130\":1,\"141\":1,\"150\":1,\"159\":1,\"170\":1,\"182\":1,\"190\":1,\"198\":1,\"207\":1,\"215\":1,\"223\":1,\"232\":1,\"241\":1,\"250\":1,\"260\":1,\"269\":1,\"280\":1,\"288\":1,\"299\":1,\"308\":1,\"316\":1,\"327\":1,\"339\":1,\"442\":1}}],[\"乱写一通\",{\"2\":{\"10\":1}}],[\"这两个链表不相交\",{\"1\":{\"443\":1}}],[\"这类链表题目一般都是使用双指针法解决的\",{\"1\":{\"417\":1}}],[\"这些操作\",{\"1\":{\"191\":1}}],[\"这是他们可以开始的最远的距离\",{\"1\":{\"155\":1}}],[\"这是此时唯一可以执行删除操作的重复项\",{\"1\":{\"43\":1}}],[\"这种情况\",{\"1\":{\"144\":1}}],[\"这样出栈的时候才是中左右的顺序\",{\"1\":{\"397\":1}}],[\"这样\",{\"1\":{\"313\":1}}],[\"这样方便后续做删除操作\",{\"1\":{\"220\":1}}],[\"这样就能保证我们每一层循环都可以过滤掉相同的元素\",{\"1\":{\"94\":1}}],[\"这样就完成向下一行的变化\",{\"1\":{\"78\":1}}],[\"这样你才不会成为温水里的青蛙\",{\"1\":{\"9\":1}}],[\"这个遍历顺序和\",{\"1\":{\"390\":1}}],[\"这个深度首次遇到\",{\"1\":{\"137\":1}}],[\"这个地球已经存在这么多年\",{\"1\":{\"9\":1}}],[\"这个事情的原理\",{\"1\":{\"8\":1}}],[\"况且你自己瞎捣鼓的方案还不如外面的好用\",{\"1\":{\"9\":1}}],[\"市面有很多解决方案\",{\"1\":{\"9\":1}}],[\"别自己瞎捣鼓\",{\"1\":{\"9\":1}}],[\"别独自在脑子里面深究\",{\"1\":{\"7\":1}}],[\"很多人都遇到过\",{\"1\":{\"9\":1}}],[\"很喜欢\",{\"1\":{\"6\":1}}],[\"莫要时时刻刻把所有事物的原理搞清楚\",{\"1\":{\"9\":1}}],[\"认清自己就不是搞钻研这一块\",{\"1\":{\"9\":1}}],[\"脑子里面的那篇反思也就消失的无影无踪了\",{\"1\":{\"8\":1}}],[\"累了\",{\"1\":{\"8\":1}}],[\"阅读完博客网站美化以后\",{\"1\":{\"8\":1}}],[\"当用户下单后\",{\"1\":{\"438\":1}}],[\"当子节点小于父节点\",{\"1\":{\"438\":1}}],[\"当空间不足时\",{\"1\":{\"376\":1}}],[\"当退出循环时\",{\"1\":{\"367\":1}}],[\"当left\",{\"1\":{\"344\":1}}],[\"当索引小于链表长度的一半时\",{\"1\":{\"334\":1}}],[\"当区间长度为\",{\"1\":{\"322\":1}}],[\"当我们使用数组实现哈希表时\",{\"1\":{\"351\":1}}],[\"当我们选择\",{\"1\":{\"319\":1}}],[\"当我们遇到一个右括号时\",{\"1\":{\"144\":1}}],[\"当我们遇到一个左括号时\",{\"1\":{\"144\":1}}],[\"当链表还剩下两个节点时\",{\"1\":{\"218\":1}}],[\"当队列为空时\",{\"1\":{\"202\":1}}],[\"当节点为空时\",{\"1\":{\"201\":1}}],[\"当节点\",{\"1\":{\"199\":1,\"392\":1}}],[\"当窗口符合条件时\",{\"1\":{\"186\":1}}],[\"当第一次递归时\",{\"1\":{\"177\":1}}],[\"当对\",{\"1\":{\"78\":1}}],[\"当遍历到一层时\",{\"1\":{\"74\":1}}],[\"当根节点左右孩子都不为空时\",{\"1\":{\"57\":1}}],[\"当根节点左右孩子有一个为空时\",{\"1\":{\"57\":1}}],[\"当前节点的父节点位置\",{\"1\":{\"438\":1}}],[\"当前节点位置\",{\"1\":{\"438\":1}}],[\"当前节点\",{\"1\":{\"175\":1}}],[\"当前的右括号\",{\"1\":{\"144\":1}}],[\"当前字符与末尾元素不相同时\",{\"1\":{\"50\":1}}],[\"当前字符与队列尾部不同时\",{\"1\":{\"45\":1}}],[\"当前字符与队列尾部相同时\",{\"1\":{\"45\":1}}],[\"当前是相邻重复项\",{\"1\":{\"48\":1}}],[\"当字符串中同时有多组相邻重复项时\",{\"1\":{\"45\":1}}],[\"当树退化为链表时\",{\"1\":{\"36\":1}}],[\"当\",{\"1\":{\"34\":1,\"78\":1,\"124\":1,\"185\":1,\"244\":2,\"311\":1,\"334\":1,\"367\":1,\"369\":1,\"445\":2}}],[\"当花费一番经历\",{\"1\":{\"8\":1}}],[\"当时归咎的原因无非就是做题做少了\",{\"1\":{\"7\":1}}],[\"还没把博客搭建起来时\",{\"1\":{\"8\":1}}],[\"还是从后往前遍历来优化查找效率\",{\"1\":{\"334\":1}}],[\"还是会在索引范围内\",{\"1\":{\"304\":1}}],[\"还是会先查攻略\",{\"1\":{\"8\":1}}],[\"还是本身就不合适\",{\"1\":{\"8\":1}}],[\"还是你走偏了\",{\"0\":{\"8\":1}}],[\"那就是都+1\",{\"1\":{\"381\":1}}],[\"那就出现一种情况\",{\"1\":{\"369\":1}}],[\"那问题就直接转换为\",{\"1\":{\"153\":1}}],[\"那么现在头节点和尾节点都是\",{\"1\":{\"428\":1}}],[\"那么就在递归函数里加上这个参数\",{\"1\":{\"406\":1}}],[\"那么迭代遍历\",{\"1\":{\"400\":1}}],[\"那么该节点会被追加到链表的末尾\",{\"1\":{\"328\":1}}],[\"那么快跑者需要\",{\"1\":{\"155\":1}}],[\"那么fast将先到达\",{\"1\":{\"155\":1}}],[\"那么存在一个环使得算法无限循环\",{\"1\":{\"155\":1}}],[\"那么这个数就是快乐数\",{\"1\":{\"151\":1}}],[\"那么字符串就是无效的\",{\"1\":{\"144\":1}}],[\"那么求右子树的最小深度\",{\"1\":{\"59\":1}}],[\"那么最小深度就是1\",{\"1\":{\"59\":1}}],[\"那么最小深度就是0\",{\"1\":{\"59\":1}}],[\"那么必定是两个重复元素的和等于\",{\"1\":{\"15\":1}}],[\"那你打开一个游戏\",{\"1\":{\"8\":1}}],[\"那为了让自己不要那么纠结\",{\"1\":{\"6\":1}}],[\"懂或者不懂\",{\"1\":{\"8\":1}}],[\"准确来说\",{\"1\":{\"8\":1}}],[\"它通过维护一个\",{\"1\":{\"438\":1}}],[\"它基于优先队列\",{\"1\":{\"438\":1}}],[\"它根据元素的延迟时间来决定元素的优先级\",{\"1\":{\"438\":1}}],[\"它可以被用作栈\",{\"1\":{\"438\":1}}],[\"它可以用作栈\",{\"1\":{\"376\":1}}],[\"它会自动进行扩容操作\",{\"1\":{\"376\":1}}],[\"它们的\",{\"1\":{\"251\":1}}],[\"它以不等于\",{\"1\":{\"233\":1}}],[\"它并不以你的主观感受为主\",{\"1\":{\"8\":1}}],[\"它并非是你给予事物一定的作用力之后\",{\"1\":{\"8\":1}}],[\"它更像一种客观存在\",{\"1\":{\"8\":1}}],[\"它与问题中的\",{\"1\":{\"8\":1}}],[\"痛苦它只是一种感觉\",{\"1\":{\"8\":1}}],[\"痛苦\",{\"1\":{\"8\":1}}],[\"依然还有这个疑问\",{\"1\":{\"8\":1}}],[\"我该怎么办\",{\"1\":{\"367\":1}}],[\"我们才能不断地\",{\"1\":{\"368\":1}}],[\"我们的目标是刷穿leetcode\",{\"0\":{\"348\":1}}],[\"我们只需要维护常量空间\",{\"1\":{\"344\":1}}],[\"我们只需要遍历该字符串一次\",{\"1\":{\"47\":1,\"50\":1}}],[\"我们应往左边的区间找\",{\"1\":{\"319\":1}}],[\"我们应往右边的区间继续寻找\",{\"1\":{\"319\":1}}],[\"我们应该使用一个循环进行处理\",{\"1\":{\"272\":1}}],[\"我们是单独处理\",{\"1\":{\"272\":1}}],[\"我们先要排序\",{\"1\":{\"94\":1}}],[\"我们可以直接用\",{\"1\":{\"390\":1}}],[\"我们可以用一个标识位来表式当前层的结束\",{\"1\":{\"387\":1}}],[\"我们可以\",{\"1\":{\"251\":1,\"319\":1}}],[\"我们可以把它看做是每一层的链表\",{\"1\":{\"78\":1}}],[\"我们可以删除\",{\"1\":{\"43\":1}}],[\"我们无论是先删除哪一个\",{\"1\":{\"45\":1}}],[\"我就先跑去查看博客的美化功能了\",{\"1\":{\"8\":1}}],[\"我能想到的一些解决方式是寻找正确的反馈\",{\"1\":{\"8\":1}}],[\"我现在做事很痛苦\",{\"1\":{\"8\":1}}],[\"我这里说的不是粘贴复制\",{\"1\":{\"7\":1}}],[\"而常用的实现类是\",{\"1\":{\"438\":1}}],[\"而广度优先遍历则遵循\",{\"1\":{\"388\":1}}],[\"而这个区间就是我们的\",{\"1\":{\"367\":1}}],[\"而右开所指向的位置本身就不在我们的候选区间里\",{\"1\":{\"319\":1}}],[\"而以数组的长度来定义右边界\",{\"1\":{\"319\":1}}],[\"而对于\",{\"1\":{\"272\":1}}],[\"而不会无穷大\",{\"1\":{\"155\":1}}],[\"而不是\",{\"1\":{\"311\":1,\"319\":1}}],[\"而不是单纯的输出树节点\",{\"1\":{\"200\":1}}],[\"而不是要钻研这个工具\",{\"1\":{\"8\":1}}],[\"而不是从头到尾\",{\"1\":{\"7\":1}}],[\"而\",{\"1\":{\"94\":1,\"96\":2,\"304\":1,\"319\":1,\"368\":1,\"390\":1,\"443\":1}}],[\"而两个元素的交替移动也能达到这个效果\",{\"1\":{\"94\":1}}],[\"而且能快速做出剪枝\",{\"1\":{\"94\":1}}],[\"而你又学到了什么\",{\"1\":{\"9\":1}}],[\"而并非痛苦或者不痛苦\",{\"1\":{\"8\":1}}],[\"而是在用户操作后的几分钟或更长时间后再发送\",{\"1\":{\"438\":1}}],[\"而是\",{\"1\":{\"369\":1}}],[\"而是从具体的某件事中\",{\"1\":{\"9\":1}}],[\"而是因为人家解决问题的方式跟钻研的方式是不一样的\",{\"1\":{\"7\":1}}],[\"而是采取先\",{\"1\":{\"7\":1}}],[\"突然让你使用它来完成甲方需求\",{\"1\":{\"7\":1}}],[\"一部分是\",{\"1\":{\"421\":2}}],[\"一定出现在层序遍历序列的末尾\",{\"1\":{\"404\":1}}],[\"一定不等于\",{\"1\":{\"369\":1}}],[\"一定会在循环中\",{\"1\":{\"153\":1}}],[\"一定会在环中相遇\",{\"1\":{\"85\":1}}],[\"一直进行到已发现从源节点可达的所有节点为止\",{\"1\":{\"392\":1}}],[\"一直向左边靠近\",{\"1\":{\"368\":1}}],[\"一直保持不变\",{\"1\":{\"368\":1}}],[\"一般可以解决如下几种问题\",{\"1\":{\"359\":1}}],[\"一共执行了\",{\"1\":{\"246\":1}}],[\"一个\",{\"1\":{\"437\":1}}],[\"一个指向上一个节点\",{\"1\":{\"424\":1}}],[\"一个指向下一个节点\",{\"1\":{\"424\":1}}],[\"一个算边的数量\",{\"1\":{\"381\":1}}],[\"一个n个数的集合里有多少符合条件的子集\",{\"1\":{\"359\":1}}],[\"一个字符串按一定规则有几种切割方式\",{\"1\":{\"359\":1}}],[\"一个空的队列不会调用\",{\"1\":{\"208\":1}}],[\"一个辅助备份\",{\"1\":{\"193\":1}}],[\"一个当成主要的\",{\"1\":{\"193\":1}}],[\"一个从来没使用过的技术\",{\"1\":{\"7\":1}}],[\"一旦两个指针都在循环中\",{\"1\":{\"155\":1}}],[\"一起走\",{\"1\":{\"124\":1}}],[\"一起同时\",{\"1\":{\"87\":1}}],[\"一颗自以为是\",{\"1\":{\"6\":1}}],[\"工作上也是如此\",{\"1\":{\"7\":1}}],[\"为节点数量\",{\"1\":{\"390\":1}}],[\"为\",{\"1\":{\"332\":1,\"334\":1,\"335\":1,\"428\":1,\"443\":7,\"447\":2}}],[\"为奇数时\",{\"1\":{\"311\":1}}],[\"为树的节点个数\",{\"1\":{\"274\":1,\"276\":1}}],[\"为单位构建答案\",{\"1\":{\"273\":1}}],[\"为nums1数组长度\",{\"1\":{\"256\":1}}],[\"为均摊\",{\"1\":{\"211\":1}}],[\"为操作数\",{\"1\":{\"211\":1}}],[\"为栈内元素个数\",{\"1\":{\"194\":1}}],[\"为起点的链表进行反转\",{\"1\":{\"176\":1}}],[\"为链表长度\",{\"1\":{\"175\":1,\"178\":1,\"220\":1,\"332\":1,\"335\":1}}],[\"为输入字符串的长度\",{\"1\":{\"108\":1}}],[\"为走过的环的圈数\",{\"1\":{\"85\":1}}],[\"为了支持优先级的比较\",{\"1\":{\"438\":1}}],[\"为了避免枚举到重复四元组\",{\"1\":{\"115\":1}}],[\"为了更有效的找到有效解\",{\"1\":{\"95\":1}}],[\"为了\",{\"1\":{\"94\":1,\"95\":1}}],[\"为了表示给定链表中的环\",{\"1\":{\"83\":1}}],[\"为了得分\",{\"1\":{\"7\":1}}],[\"为空为止\",{\"1\":{\"78\":1}}],[\"为空就表示\",{\"1\":{\"75\":1,\"76\":1}}],[\"为空时\",{\"1\":{\"34\":1,\"199\":1}}],[\"为下一层的节点更新\",{\"1\":{\"68\":1}}],[\"为字符串长度\",{\"1\":{\"47\":1,\"50\":1,\"104\":1,\"106\":1,\"146\":1,\"265\":1,\"304\":1}}],[\"为二叉树节点个数\",{\"1\":{\"25\":1,\"27\":1,\"36\":1,\"38\":1,\"59\":1,\"68\":1,\"76\":1,\"78\":1,\"135\":1,\"137\":1,\"201\":1,\"203\":1,\"293\":2,\"295\":2}}],[\"为数组长度\",{\"1\":{\"17\":1,\"96\":1,\"117\":1,\"126\":1,\"163\":1,\"166\":1,\"187\":1,\"228\":1,\"237\":1,\"246\":1,\"284\":1,\"313\":1,\"321\":1,\"344\":1}}],[\"为什么要初始化2的n次幂个长度\",{\"1\":{\"377\":1}}],[\"为什么不是用\",{\"1\":{\"377\":1}}],[\"为什么成绩比我好的那么多\",{\"1\":{\"7\":1}}],[\"为什么我说它是固执的\",{\"1\":{\"6\":1}}],[\"明明看这个人木的很\",{\"1\":{\"7\":1}}],[\"就放入对应的索引中\",{\"1\":{\"354\":1}}],[\"就放入一个对应的右括号\",{\"1\":{\"144\":1}}],[\"就像每一个人的身份证对应一个人一样\",{\"1\":{\"350\":1}}],[\"就会导致退出循环\",{\"1\":{\"311\":1}}],[\"就反转这\",{\"1\":{\"300\":1}}],[\"就将同层节点与最大值进行比较\",{\"1\":{\"291\":1}}],[\"就表示反转结束\",{\"1\":{\"244\":1}}],[\"就可以很容易区分出来变化的量应该放在\",{\"1\":{\"313\":1}}],[\"就可以进行更改链表节点的交换\",{\"1\":{\"218\":1}}],[\"就可以通过父节点的\",{\"1\":{\"66\":1}}],[\"就返回\",{\"1\":{\"151\":1}}],[\"就说明括号右效\",{\"1\":{\"144\":1}}],[\"就是相交点\",{\"1\":{\"446\":1}}],[\"就是链表首尾相连\",{\"1\":{\"425\":1}}],[\"就是单纯的模拟\",{\"1\":{\"372\":1}}],[\"就是我们要得到的结果\",{\"1\":{\"319\":1}}],[\"就是答案\",{\"1\":{\"283\":1}}],[\"就是根节点的左子树\",{\"1\":{\"201\":1}}],[\"就是当前答案\",{\"1\":{\"96\":1}}],[\"就是直接用这种方式\",{\"1\":{\"7\":1}}],[\"就下一层的虚拟头节点指向它\",{\"1\":{\"78\":1}}],[\"就够了\",{\"1\":{\"9\":1}}],[\"就算自己瞎玩\",{\"1\":{\"6\":1}}],[\"的任务\",{\"1\":{\"438\":1}}],[\"的底层实现是一个二叉堆\",{\"1\":{\"438\":1}}],[\"的实现模拟单端队列行为\",{\"1\":{\"438\":1}}],[\"的头节点\",{\"1\":{\"428\":1}}],[\"的步骤\",{\"1\":{\"397\":1}}],[\"的步速大于\",{\"1\":{\"85\":1}}],[\"的所在边都己被探寻过\",{\"1\":{\"392\":1}}],[\"的所有满足\",{\"1\":{\"94\":1}}],[\"的遍历结果是一个一维数组\",{\"1\":{\"390\":1}}],[\"的规则\",{\"1\":{\"388\":2}}],[\"的关键点在于如何记录每一层次是否遍历完成\",{\"1\":{\"387\":1}}],[\"的线性的数据结构\",{\"1\":{\"375\":1}}],[\"的暴力解法降为\",{\"1\":{\"371\":1}}],[\"的操作发生\",{\"1\":{\"369\":1}}],[\"的下界\",{\"1\":{\"369\":1}}],[\"的下标就是答案\",{\"1\":{\"15\":1}}],[\"的下标与\",{\"1\":{\"15\":1}}],[\"的上界right\",{\"1\":{\"368\":1}}],[\"的集合\",{\"1\":{\"364\":1}}],[\"的算法解决本问题\",{\"1\":{\"340\":1}}],[\"的算法吗\",{\"1\":{\"13\":1}}],[\"的次数不超过\",{\"1\":{\"328\":1}}],[\"的时候\",{\"1\":{\"319\":1}}],[\"的时间\",{\"1\":{\"256\":1}}],[\"的每个元素都将在\",{\"1\":{\"317\":1}}],[\"的第一个还是第二个\",{\"1\":{\"313\":1}}],[\"的情况\",{\"1\":{\"304\":1,\"352\":1}}],[\"的范围\",{\"1\":{\"302\":1}}],[\"的过程中\",{\"1\":{\"291\":1}}],[\"的数组存放\",{\"1\":{\"263\":1}}],[\"的数组来存储情况\",{\"1\":{\"50\":1}}],[\"的额外空间解决这一问题\",{\"1\":{\"242\":1}}],[\"的形式给出\",{\"1\":{\"242\":1}}],[\"的值都在target的右侧\",{\"1\":{\"368\":1}}],[\"的值\",{\"1\":{\"334\":1,\"368\":1}}],[\"的值排序\",{\"1\":{\"233\":1}}],[\"的值为\",{\"1\":{\"83\":1}}],[\"的大小并不重要\",{\"1\":{\"233\":1}}],[\"的其余元素和\",{\"1\":{\"233\":1}}],[\"的前驱节点为\",{\"1\":{\"428\":1}}],[\"的前\",{\"1\":{\"233\":2}}],[\"的元素有\",{\"1\":{\"368\":2}}],[\"的元素数量为\",{\"1\":{\"233\":1}}],[\"的元素\",{\"1\":{\"233\":2}}],[\"的字母异位词\",{\"1\":{\"224\":1}}],[\"的字符串\",{\"1\":{\"142\":1}}],[\"的队列\",{\"1\":{\"208\":1}}],[\"的左右子节点\",{\"1\":{\"202\":1}}],[\"的左右节点进行入队\",{\"1\":{\"202\":1}}],[\"的左子节点\",{\"1\":{\"199\":2}}],[\"的左子节点相同\",{\"1\":{\"24\":1}}],[\"的左子节点与\",{\"1\":{\"24\":1}}],[\"的新右子节点\",{\"1\":{\"199\":1}}],[\"的新左子节点\",{\"1\":{\"199\":1}}],[\"的栈\",{\"1\":{\"191\":1}}],[\"的栈空间来递归\",{\"1\":{\"201\":1}}],[\"的栈空间\",{\"1\":{\"137\":2}}],[\"的节点之前\",{\"1\":{\"328\":1}}],[\"的节点插入到链表中下标为\",{\"1\":{\"328\":1}}],[\"的节点插入到链表中第一个元素之前\",{\"1\":{\"328\":1}}],[\"的节点追加到链表中作为链表的最后一个元素\",{\"1\":{\"328\":1}}],[\"的节点的值\",{\"1\":{\"328\":1}}],[\"的节点\",{\"1\":{\"160\":1,\"328\":1}}],[\"的位置正好是答案\",{\"1\":{\"319\":1}}],[\"的位置明显不是答案\",{\"1\":{\"319\":1}}],[\"的位置我们是可以取到的\",{\"1\":{\"319\":1}}],[\"的位置\",{\"1\":{\"155\":1,\"322\":1}}],[\"的副本并排序\",{\"1\":{\"117\":1}}],[\"的空间来存储字符串\",{\"1\":{\"108\":1}}],[\"的方法需要\",{\"1\":{\"108\":1}}],[\"的方式\",{\"1\":{\"94\":1}}],[\"的顺序\",{\"1\":{\"101\":1}}],[\"的链表节点\",{\"1\":{\"83\":2}}],[\"的\",{\"1\":{\"34\":2,\"94\":1,\"251\":1}}],[\"的右子节点\",{\"1\":{\"199\":1}}],[\"的右子节点与\",{\"1\":{\"24\":1}}],[\"的右子节点相同\",{\"1\":{\"24\":1}}],[\"的那条边的起始节点\",{\"1\":{\"392\":1}}],[\"的那\",{\"1\":{\"13\":1}}],[\"的行动策略\",{\"1\":{\"7\":1}}],[\"的种子就这么埋下了\",{\"1\":{\"6\":1}}],[\"后都属于深度优先遍历\",{\"1\":{\"392\":1}}],[\"后序遍历顺序\",{\"1\":{\"399\":1}}],[\"后序遍历\",{\"0\":{\"392\":1,\"395\":1,\"399\":1},\"1\":{\"395\":1,\"407\":1}}],[\"后进先出\",{\"1\":{\"375\":1,\"376\":1}}],[\"后处理检查\",{\"1\":{\"369\":1}}],[\"后继节点\",{\"1\":{\"333\":1}}],[\"后驱节点是f\",{\"1\":{\"428\":1}}],[\"后驱节点\",{\"1\":{\"175\":1}}],[\"后续继续循环\",{\"1\":{\"78\":1}}],[\"后者则是为了深挖\",{\"1\":{\"7\":1}}],[\"后\",{\"1\":{\"7\":1}}],[\"运行\",{\"1\":{\"7\":1}}],[\"却未曾去寻找那对应的模板\",{\"1\":{\"7\":1}}],[\"却跑到了推导泰勒公式的道上来\",{\"1\":{\"6\":1}}],[\"形成一种模板\",{\"1\":{\"7\":1}}],[\"也称深度优先搜索\",{\"1\":{\"392\":1}}],[\"也就意味着\",{\"1\":{\"319\":1}}],[\"也就是这一层的结点数量\",{\"1\":{\"390\":1}}],[\"也就是返回一个二维数组\",{\"1\":{\"390\":1}}],[\"也就是只有\",{\"1\":{\"208\":1}}],[\"也就是\",{\"1\":{\"191\":1}}],[\"也就是下一行的头\",{\"1\":{\"78\":1}}],[\"也就是说某种情况对应某个答案\",{\"1\":{\"7\":1}}],[\"也不是正确答案\",{\"1\":{\"263\":1}}],[\"也不是长篇大论\",{\"1\":{\"9\":1}}],[\"也是可通过的\",{\"1\":{\"251\":1}}],[\"也可以用作队列\",{\"1\":{\"438\":1}}],[\"也可以称为边\",{\"1\":{\"381\":1}}],[\"也可以表示\",{\"1\":{\"368\":1}}],[\"也可以使用长度固定的数组记录不同字母出现的次数\",{\"1\":{\"227\":1}}],[\"也可能是\",{\"1\":{\"151\":1}}],[\"也有可能\",{\"1\":{\"96\":1}}],[\"也能考得比那些埋头苦读的人的成绩好\",{\"1\":{\"6\":1}}],[\"铺天盖地都是成熟方案\",{\"1\":{\"7\":1}}],[\"以避免即时发送失败或对用户体验造成干扰\",{\"1\":{\"438\":1}}],[\"以指示链表中的上一个节点\",{\"1\":{\"328\":1}}],[\"以指向其下一个右侧节点\",{\"1\":{\"64\":1,\"73\":1}}],[\"以\",{\"1\":{\"273\":1}}],[\"以一个数组来记录\",{\"1\":{\"228\":1}}],[\"以空格进行分割\",{\"1\":{\"103\":1}}],[\"以前我特别希望有一片小天地\",{\"1\":{\"8\":1}}],[\"以前脑海中总有一个疑问\",{\"1\":{\"8\":1}}],[\"以往听到的解释是人家在你睡着的时候偷偷卷了\",{\"1\":{\"7\":1}}],[\"以结果导向的方式去做事带来的收益会大一些\",{\"1\":{\"7\":1}}],[\"以我现在工作几年的经历\",{\"1\":{\"6\":1}}],[\"身体不舒服之类\",{\"1\":{\"7\":1}}],[\"哪天没睡好\",{\"1\":{\"7\":1}}],[\"心理上很受打击\",{\"1\":{\"7\":1}}],[\"你必须\",{\"1\":{\"242\":1}}],[\"你必须在不修改节点内部的值的情况下完成本题\",{\"1\":{\"216\":1}}],[\"你在返回的\",{\"1\":{\"233\":2}}],[\"你需要\",{\"1\":{\"233\":1}}],[\"你所使用的语言也许不支持栈\",{\"1\":{\"208\":1}}],[\"你所使用的语言也许不支持队列\",{\"1\":{\"191\":1}}],[\"你\",{\"1\":{\"208\":1}}],[\"你只能使用队列的标准操作\",{\"1\":{\"191\":1}}],[\"你只能使用常量级额外空间\",{\"1\":{\"64\":1,\"73\":1}}],[\"你能否设计一个时间复杂度\",{\"1\":{\"443\":1}}],[\"你能否调整你的解法来应对这种情况\",{\"1\":{\"224\":1}}],[\"你能否实现每个操作均摊时间复杂度为\",{\"1\":{\"208\":1}}],[\"你能否仅用一个队列来实现栈\",{\"1\":{\"191\":1}}],[\"你能否用两种方法解决这道题\",{\"1\":{\"171\":1}}],[\"你能尝试使用一趟扫描实现吗\",{\"1\":{\"122\":1}}],[\"你返回所有和为\",{\"1\":{\"92\":1}}],[\"你的函数应该返回\",{\"1\":{\"233\":1}}],[\"你的函数应该填充它的每个\",{\"1\":{\"64\":1,\"73\":1}}],[\"你的函数函数应该返回\",{\"1\":{\"233\":1}}],[\"你的解决方案将会\",{\"1\":{\"233\":1}}],[\"你的成熟方案呢\",{\"0\":{\"7\":1}}],[\"你可以选择使用单链表或者双链表\",{\"1\":{\"328\":1}}],[\"你可以假设\",{\"1\":{\"317\":1}}],[\"你可以假设每种输入只会对应一个答案\",{\"1\":{\"13\":1}}],[\"你可以使用\",{\"1\":{\"191\":1,\"208\":1}}],[\"你可以按\",{\"1\":{\"113\":1}}],[\"你可以按任意顺序返回答案\",{\"1\":{\"13\":1}}],[\"你可以运用递归和迭代两种方法解决这个问题吗\",{\"1\":{\"22\":1}}],[\"你可以想出一个时间复杂度小于\",{\"1\":{\"13\":1}}],[\"你可不可以用上一些工具就能把这个事情做好\",{\"1\":{\"8\":1}}],[\"你看到了什么\",{\"1\":{\"9\":1}}],[\"你遇到的问题\",{\"1\":{\"9\":1}}],[\"你是否可以使用\",{\"1\":{\"83\":1}}],[\"你是会先玩\",{\"1\":{\"8\":1}}],[\"你是不是也有过那种\",{\"1\":{\"7\":1}}],[\"你不够擅长\",{\"0\":{\"8\":1}}],[\"你应该是找市面上存在的成熟方案\",{\"1\":{\"7\":1}}],[\"你到底有没有认真学\",{\"0\":{\"6\":1}}],[\"😗\",{\"1\":{\"6\":1}}],[\"规律掌握\",{\"1\":{\"6\":1}}],[\"自顶向下依次访问左侧链\",{\"1\":{\"397\":1}}],[\"自身\",{\"1\":{\"396\":1,\"400\":1}}],[\"自增\",{\"1\":{\"235\":1}}],[\"自以为自己是科研人才\",{\"1\":{\"6\":1}}],[\"自以为自己能把这原理\",{\"1\":{\"6\":1}}],[\"自己的升学历程很顺利\",{\"1\":{\"6\":1}}],[\"总体空间复杂度为\",{\"1\":{\"332\":1,\"335\":1}}],[\"总体是线性复杂度\",{\"1\":{\"87\":1}}],[\"总结\",{\"0\":{\"9\":1}}],[\"总喜欢往细处扣\",{\"1\":{\"6\":1}}],[\"总是喜欢扎进去深究\",{\"1\":{\"6\":1}}],[\"于是就可以研究起了博客\",{\"1\":{\"8\":1}}],[\"于是就变成了无脑乐观派\",{\"1\":{\"6\":1}}],[\"于是就容易陷于死胡同\",{\"1\":{\"6\":1}}],[\"于是\",{\"1\":{\"6\":1}}],[\"学习成绩也都是属一属二的程度\",{\"1\":{\"6\":1}}],[\"学习的时候\",{\"1\":{\"6\":1}}],[\"老师夸夸神童的程度\",{\"1\":{\"6\":1}}],[\"父母\",{\"1\":{\"6\":1}}],[\"属于当时被家长\",{\"1\":{\"6\":1}}],[\"不过一个是算节点的数量\",{\"1\":{\"381\":1}}],[\"不涉及到什么算法\",{\"1\":{\"372\":1}}],[\"不断调节子序列的起始位置\",{\"1\":{\"371\":1}}],[\"不在数组中\",{\"1\":{\"368\":1}}],[\"不会插入\",{\"1\":{\"328\":1}}],[\"不足\",{\"1\":{\"304\":1}}],[\"不考虑输出结果的顺序\",{\"1\":{\"251\":1}}],[\"不要立即返回\",{\"1\":{\"369\":1}}],[\"不要给另外的数组分配额外的空间\",{\"1\":{\"242\":1}}],[\"不要用\",{\"1\":{\"200\":1}}],[\"不相同\",{\"1\":{\"235\":1}}],[\"不能使用\",{\"1\":{\"201\":1}}],[\"不是快乐数\",{\"1\":{\"153\":1,\"155\":1}}],[\"不是\",{\"1\":{\"151\":1}}],[\"不一样时\",{\"1\":{\"144\":1}}],[\"不判断相同答案的元素\",{\"1\":{\"96\":2}}],[\"不判断相同元素\",{\"1\":{\"96\":2}}],[\"不可以包含重复的三元组\",{\"1\":{\"95\":1}}],[\"不重复则需要\",{\"1\":{\"96\":1}}],[\"不重复\",{\"1\":{\"94\":1}}],[\"不同字母的个数\",{\"1\":{\"263\":1}}],[\"不同的元素的数量\",{\"1\":{\"233\":1}}],[\"不同的三元组是\",{\"1\":{\"92\":1}}],[\"不同父节点的子节点\",{\"1\":{\"66\":1}}],[\"不允许修改\",{\"1\":{\"83\":1}}],[\"不作为参数进行传递\",{\"1\":{\"83\":1}}],[\"不需要存储额外的节点\",{\"1\":{\"68\":1}}],[\"不存在\",{\"1\":{\"15\":1,\"317\":1,\"367\":1}}],[\"不管是因为什么原因导致的\",{\"1\":{\"367\":1}}],[\"不管是工作上还是学习上遇到的障碍\",{\"1\":{\"7\":1}}],[\"不管是工作还是学习\",{\"1\":{\"7\":1}}],[\"不管是学习还是做事\",{\"1\":{\"6\":1}}],[\"不然不还得扣你分嘛\",{\"1\":{\"6\":1}}],[\"不知变通\",{\"1\":{\"6\":1}}],[\"琢磨也没问题\",{\"1\":{\"6\":1}}],[\"瞎琢磨\",{\"1\":{\"6\":1}}],[\"觉得自己能搞懂\",{\"1\":{\"6\":1}}],[\"但回溯却可以解决问题\",{\"1\":{\"359\":1}}],[\"但大于或等于\",{\"1\":{\"300\":1}}],[\"但在处理的时候依然遵循\",{\"1\":{\"275\":1}}],[\"但始终变不到\",{\"1\":{\"151\":1}}],[\"但是还没有处理\",{\"1\":{\"401\":3}}],[\"但是我们选择的是左闭右开区间\",{\"1\":{\"319\":1}}],[\"但是\",{\"1\":{\"13\":1}}],[\"但是在做题时\",{\"1\":{\"6\":1}}],[\"但我们容易把后者误当成前者\",{\"1\":{\"8\":1}}],[\"但唯独没归咎到自身的问题上\",{\"1\":{\"7\":1}}],[\"但其实差了十万八千里的思维方式\",{\"1\":{\"6\":1}}],[\"但这东西可是前人花了好大力气才得出来\",{\"1\":{\"6\":1}}],[\"但你说实在的话\",{\"1\":{\"6\":1}}],[\"但却偏离了最初学习的目的\",{\"1\":{\"6\":1}}],[\"举个简单的例子就是高数课程上\",{\"1\":{\"6\":1}}],[\"遇到问题\",{\"1\":{\"6\":1}}],[\"真心觉得那真是一个傻小子\",{\"1\":{\"6\":1}}],[\"在用户注册\",{\"1\":{\"438\":1}}],[\"在线购物平台中\",{\"1\":{\"438\":1}}],[\"在链表第\",{\"1\":{\"415\":1}}],[\"在链表的最后面插入一个节点\",{\"1\":{\"415\":1}}],[\"在链表的最前面插入一个节点\",{\"1\":{\"415\":1}}],[\"在这里也就会重复调用自己来实现递归的过程\",{\"1\":{\"406\":1}}],[\"在这里它表示是贬义的\",{\"1\":{\"6\":1}}],[\"在需要频繁进行\",{\"1\":{\"405\":1}}],[\"在最差情况下\",{\"1\":{\"390\":1,\"395\":1}}],[\"在leetcode中\",{\"1\":{\"381\":1}}],[\"在二叉树中\",{\"1\":{\"381\":1}}],[\"在二叉树的时候\",{\"1\":{\"272\":1}}],[\"在循环过程中\",{\"1\":{\"368\":1}}],[\"在数组中\",{\"1\":{\"368\":1}}],[\"在区间\",{\"1\":{\"368\":1}}],[\"在上面的\",{\"1\":{\"367\":1}}],[\"在一些问题上通过for循环暴力枚举是不可行的\",{\"1\":{\"359\":1}}],[\"在冲突的地方继续往前查询\",{\"1\":{\"354\":1}}],[\"在负数\",{\"1\":{\"344\":1}}],[\"在正数\",{\"1\":{\"344\":1}}],[\"在插入完成后\",{\"1\":{\"328\":1}}],[\"在左闭右开的情况是找不到这个位置的\",{\"1\":{\"319\":1}}],[\"在左闭右开的情况\",{\"1\":{\"319\":1}}],[\"在出队的时候\",{\"1\":{\"294\":1}}],[\"在进行\",{\"1\":{\"291\":1}}],[\"在每一层遍历开始前\",{\"1\":{\"390\":1}}],[\"在每一次移动过程中\",{\"1\":{\"173\":1}}],[\"在每个树行中找最大值\",{\"0\":{\"287\":1,\"288\":1},\"1\":{\"408\":1}}],[\"在深度优先搜索过程中\",{\"1\":{\"275\":1}}],[\"在遍历对方的链表\",{\"1\":{\"446\":1}}],[\"在遍历过程过程\",{\"1\":{\"334\":1}}],[\"在遍历过程中如果出现数字与需要移除的值\",{\"1\":{\"235\":1}}],[\"在遍历每一层节点时\",{\"1\":{\"133\":1}}],[\"在翻转后子节点会发生变化\",{\"1\":{\"200\":1}}],[\"在加入元素时先将\",{\"1\":{\"194\":1}}],[\"在虚拟头节点下\",{\"1\":{\"165\":1}}],[\"在环中它们由于步速不一致\",{\"1\":{\"155\":1}}],[\"在继续往下后\",{\"1\":{\"155\":1}}],[\"在递归左子树\",{\"1\":{\"136\":1}}],[\"在固定两重循环元素的情况\",{\"1\":{\"96\":1}}],[\"在固定两个元素的情况下\",{\"1\":{\"94\":1}}],[\"在次相遇就是环入口\",{\"1\":{\"87\":1}}],[\"在完成所有重复项删除操作后返回最终的字符串\",{\"1\":{\"43\":1}}],[\"在\",{\"1\":{\"43\":2,\"210\":1,\"322\":1,\"375\":1,\"437\":2,\"443\":4}}],[\"在今天来看\",{\"1\":{\"7\":1}}],[\"在回头看那时的自己\",{\"1\":{\"6\":1}}],[\"东西\",{\"1\":{\"6\":1}}],[\"钻研\",{\"1\":{\"6\":1}}],[\"底层逻辑与蝴蝶效应\",{\"0\":{\"5\":1}}],[\">target\",{\"1\":{\"319\":1}}],[\">2\",{\"1\":{\"175\":1}}],[\">=\",{\"1\":{\"106\":3,\"187\":1,\"313\":2,\"332\":2,\"438\":1}}],[\">\",{\"1\":{\"4\":1,\"94\":3,\"96\":6,\"117\":5,\"155\":1,\"194\":2,\"256\":2,\"265\":1,\"274\":1,\"281\":2,\"304\":1,\"321\":1,\"322\":1,\"328\":3,\"332\":1,\"335\":1,\"344\":1,\"367\":3,\"368\":2,\"369\":1,\"386\":1,\"393\":2,\"394\":2,\"395\":2,\"407\":3,\"438\":3,\"445\":1}}],[\"b+a\",{\"1\":{\"447\":1}}],[\"b+\",{\"1\":{\"445\":1}}],[\"b++\",{\"1\":{\"117\":1}}],[\"bugstack\",{\"1\":{\"428\":1,\"429\":1,\"430\":1,\"431\":1}}],[\"build\",{\"1\":{\"4\":1}}],[\"bound\",{\"1\":{\"368\":1}}],[\"bootom\",{\"1\":{\"313\":1}}],[\"boolean\",{\"1\":{\"25\":2,\"27\":2,\"146\":1,\"155\":1,\"191\":1,\"194\":1,\"208\":1,\"211\":2,\"228\":1,\"265\":1,\"335\":1,\"431\":1}}],[\"bottom\",{\"1\":{\"311\":1,\"313\":5}}],[\"bacd\",{\"1\":{\"300\":1}}],[\"bacdfeg\",{\"1\":{\"300\":1}}],[\"backtracking\",{\"1\":{\"360\":2}}],[\"backtracing\",{\"1\":{\"358\":1}}],[\"back\",{\"1\":{\"191\":1}}],[\"be\",{\"1\":{\"211\":1,\"332\":1}}],[\"blue\",{\"1\":{\"101\":2}}],[\"break\",{\"1\":{\"87\":1,\"96\":1,\"117\":2,\"438\":1}}],[\"branch\",{\"1\":{\"4\":1,\"381\":1}}],[\"branches\",{\"1\":{\"4\":1}}],[\"b\",{\"1\":{\"64\":1,\"73\":1,\"113\":4,\"117\":8,\"261\":1,\"283\":1,\"284\":3,\"443\":5,\"445\":4,\"447\":5}}],[\"bb\",{\"1\":{\"43\":1}}],[\"bfs遍历的副产物\",{\"0\":{\"390\":1,\"391\":1}}],[\"bfs遍历\",{\"0\":{\"389\":1}}],[\"bfs\",{\"0\":{\"37\":1,\"272\":1,\"294\":1},\"1\":{\"33\":1,\"65\":1,\"271\":1,\"273\":1,\"290\":1,\"294\":2,\"387\":2,\"390\":5},\"2\":{\"80\":1,\"139\":1,\"278\":1,\"297\":1}}],[\"binarysearch\",{\"1\":{\"367\":1}}],[\"binary\",{\"1\":{\"25\":1,\"31\":1,\"54\":1,\"130\":1,\"198\":1,\"201\":1,\"203\":1,\"316\":1,\"383\":1,\"384\":1,\"385\":1,\"386\":1}}],[\"opens\",{\"1\":{\"408\":9}}],[\"options\",{\"1\":{\"4\":1}}],[\"overflow\",{\"1\":{\"367\":1}}],[\"order\",{\"1\":{\"269\":1,\"388\":1}}],[\"obj\",{\"1\":{\"211\":5,\"332\":6}}],[\"object\",{\"1\":{\"211\":1,\"332\":1,\"431\":1}}],[\"out\",{\"1\":{\"210\":1,\"211\":8}}],[\"of\",{\"1\":{\"31\":1,\"54\":1,\"121\":1,\"208\":1,\"250\":1,\"339\":1,\"403\":1,\"404\":2,\"442\":1}}],[\"offerlast\",{\"1\":{\"203\":3}}],[\"offer\",{\"1\":{\"27\":6,\"47\":1,\"135\":3,\"146\":3,\"194\":3,\"389\":3,\"390\":3}}],[\"o\",{\"1\":{\"13\":1,\"17\":2,\"25\":2,\"27\":2,\"36\":2,\"38\":2,\"47\":2,\"50\":2,\"59\":3,\"68\":2,\"76\":2,\"78\":2,\"83\":1,\"87\":2,\"94\":2,\"96\":4,\"101\":1,\"104\":3,\"106\":3,\"108\":2,\"117\":6,\"126\":2,\"135\":3,\"137\":4,\"146\":2,\"155\":4,\"163\":2,\"166\":2,\"175\":2,\"178\":2,\"183\":1,\"187\":2,\"194\":5,\"201\":3,\"203\":3,\"208\":2,\"211\":5,\"220\":2,\"228\":2,\"235\":1,\"237\":2,\"242\":3,\"246\":3,\"256\":3,\"265\":2,\"274\":3,\"276\":2,\"284\":3,\"293\":2,\"295\":2,\"304\":2,\"313\":2,\"321\":2,\"332\":6,\"335\":7,\"340\":1,\"344\":2,\"350\":9,\"365\":2,\"371\":2,\"390\":4,\"391\":2,\"395\":4,\"405\":1,\"431\":3,\"432\":1,\"443\":2,\"447\":2}}],[\"old\",{\"1\":{\"4\":1}}],[\"online\",{\"1\":{\"407\":1}}],[\"on\",{\"1\":{\"4\":2}}],[\"lcci\",{\"1\":{\"442\":1}}],[\"l<r∣∣t<b\",{\"1\":{\"311\":1}}],[\"largerchildindex\",{\"1\":{\"438\":5}}],[\"largestvalues\",{\"1\":{\"293\":1,\"295\":1}}],[\"largest\",{\"1\":{\"288\":1}}],[\"labuladong\",{\"1\":{\"407\":1}}],[\"last\",{\"1\":{\"178\":2,\"428\":1,\"429\":2,\"430\":1}}],[\"latest\",{\"1\":{\"4\":1}}],[\"l++\",{\"1\":{\"117\":3,\"304\":1}}],[\"l\",{\"1\":{\"117\":8,\"242\":4,\"244\":4,\"281\":3,\"302\":3,\"304\":14,\"322\":2,\"429\":4}}],[\"log\",{\"1\":{\"183\":1}}],[\"logn\",{\"1\":{\"155\":2,\"321\":1}}],[\"longn\",{\"1\":{\"405\":1}}],[\"long\",{\"1\":{\"117\":3}}],[\"lockfile\",{\"1\":{\"4\":1}}],[\"linklast\",{\"1\":{\"429\":1}}],[\"linkfirst\",{\"1\":{\"428\":1}}],[\"linkedlist\",{\"1\":{\"328\":1,\"433\":1,\"438\":2}}],[\"linkedlist<>\",{\"1\":{\"38\":2,\"389\":1,\"390\":1,\"401\":3}}],[\"linkedlist<treenode>\",{\"1\":{\"27\":1}}],[\"linked\",{\"1\":{\"82\":1,\"87\":1,\"126\":1,\"159\":1,\"163\":1,\"166\":1,\"170\":1,\"175\":1,\"220\":1,\"327\":1,\"442\":1,\"447\":1}}],[\"lifo\",{\"1\":{\"191\":1,\"375\":1,\"376\":1}}],[\"listb\",{\"1\":{\"443\":7,\"445\":3,\"447\":1}}],[\"lista\",{\"1\":{\"443\":7,\"445\":3,\"447\":1}}],[\"lists\",{\"1\":{\"442\":1}}],[\"list<integer>\",{\"1\":{\"135\":2,\"137\":3,\"256\":1,\"274\":1,\"276\":1,\"293\":2,\"295\":2,\"389\":2,\"390\":1,\"397\":2,\"398\":2,\"399\":2,\"401\":6}}],[\"list<string>\",{\"1\":{\"104\":1}}],[\"list<list<integer>>\",{\"1\":{\"96\":2,\"117\":2,\"274\":2,\"276\":2,\"390\":2,\"391\":2}}],[\"list<treenode>\",{\"1\":{\"38\":1}}],[\"listnode\",{\"1\":{\"87\":6,\"126\":12,\"163\":9,\"166\":11,\"175\":11,\"178\":3,\"220\":13,\"426\":3,\"447\":8}}],[\"list\",{\"1\":{\"82\":1,\"87\":1,\"104\":1,\"121\":1,\"126\":1,\"159\":1,\"163\":1,\"166\":1,\"170\":1,\"175\":1,\"191\":1,\"208\":1,\"220\":1,\"274\":3,\"276\":2,\"327\":1,\"389\":3,\"393\":1,\"394\":1,\"395\":1,\"447\":1}}],[\"let\",{\"1\":{\"407\":8}}],[\"leaf\",{\"1\":{\"381\":1}}],[\"levelordertraversalhelper\",{\"1\":{\"391\":4}}],[\"levelordertraversal\",{\"1\":{\"390\":1,\"391\":1}}],[\"levelorder\",{\"1\":{\"274\":1,\"276\":1,\"389\":1}}],[\"level\",{\"1\":{\"269\":1,\"381\":1,\"388\":1,\"390\":3,\"391\":5}}],[\"levelsize\",{\"1\":{\"76\":2,\"135\":3,\"295\":1,\"390\":2}}],[\"leftchildindex\",{\"1\":{\"438\":5}}],[\"left=mid+1\",{\"1\":{\"319\":1}}],[\"leftmost\",{\"1\":{\"208\":1}}],[\"left++\",{\"1\":{\"108\":1,\"246\":1,\"313\":1,\"344\":1}}],[\"left\",{\"1\":{\"23\":4,\"24\":7,\"25\":13,\"26\":2,\"27\":2,\"36\":1,\"38\":2,\"59\":3,\"64\":1,\"66\":2,\"67\":1,\"68\":8,\"73\":1,\"76\":6,\"78\":2,\"108\":9,\"135\":2,\"137\":1,\"187\":1,\"201\":7,\"203\":8,\"246\":4,\"272\":1,\"293\":2,\"295\":2,\"302\":2,\"311\":1,\"313\":6,\"319\":2,\"321\":4,\"322\":4,\"323\":4,\"344\":9,\"367\":19,\"368\":26,\"369\":16,\"381\":1,\"389\":2,\"390\":2,\"391\":1,\"393\":1,\"394\":1,\"395\":1,\"397\":2,\"398\":1,\"399\":2,\"401\":6,\"407\":6}}],[\"length\",{\"1\":{\"13\":1,\"17\":1,\"43\":1,\"47\":1,\"50\":2,\"92\":1,\"94\":1,\"96\":3,\"101\":1,\"106\":1,\"108\":4,\"113\":1,\"117\":1,\"142\":1,\"146\":1,\"183\":1,\"187\":1,\"224\":2,\"228\":3,\"233\":2,\"242\":1,\"246\":1,\"251\":2,\"261\":2,\"265\":2,\"281\":4,\"300\":1,\"304\":1,\"321\":1,\"322\":1,\"323\":1,\"340\":1,\"344\":2,\"367\":2,\"368\":6,\"369\":1,\"407\":3}}],[\"leetcode\",{\"0\":{\"12\":1,\"21\":1,\"31\":1,\"42\":1,\"54\":1,\"63\":1,\"72\":1,\"82\":1,\"91\":1,\"100\":1,\"112\":1,\"121\":1,\"130\":1,\"141\":1,\"150\":1,\"159\":1,\"170\":1,\"182\":1,\"190\":1,\"198\":1,\"207\":1,\"215\":1,\"223\":1,\"232\":1,\"241\":1,\"250\":1,\"260\":1,\"269\":1,\"280\":1,\"288\":1,\"299\":1,\"308\":1,\"316\":1,\"327\":1,\"339\":1,\"347\":1,\"442\":1},\"1\":{\"12\":1,\"21\":1,\"31\":1,\"42\":1,\"54\":1,\"63\":1,\"72\":1,\"82\":1,\"91\":1,\"100\":1,\"112\":1,\"121\":1,\"130\":1,\"141\":1,\"150\":1,\"159\":1,\"170\":1,\"182\":1,\"190\":1,\"198\":1,\"207\":1,\"215\":1,\"223\":1,\"232\":1,\"241\":1,\"250\":1,\"260\":1,\"269\":1,\"280\":1,\"288\":1,\"299\":1,\"308\":1,\"316\":1,\"327\":1,\"339\":1,\"442\":1},\"2\":{\"18\":1,\"28\":1,\"39\":1,\"51\":1,\"60\":1,\"69\":1,\"79\":1,\"88\":1,\"97\":1,\"109\":1,\"118\":1,\"127\":1,\"138\":1,\"147\":1,\"156\":1,\"167\":1,\"179\":1,\"188\":1,\"195\":1,\"204\":1,\"212\":1,\"221\":1,\"229\":1,\"238\":1,\"247\":1,\"257\":1,\"266\":1,\"277\":1,\"285\":1,\"296\":1,\"305\":1,\"314\":1,\"324\":1,\"336\":1,\"345\":1,\"355\":1,\"361\":1,\"373\":1,\"378\":1,\"409\":1,\"418\":1,\"434\":1,\"439\":1,\"448\":1}}],[\"f\",{\"1\":{\"428\":4}}],[\"function\",{\"1\":{\"407\":4}}],[\"fifo\",{\"1\":{\"438\":1}}],[\"final\",{\"1\":{\"428\":2,\"429\":2,\"430\":3}}],[\"find\",{\"1\":{\"288\":1}}],[\"first=cur\",{\"1\":{\"218\":1}}],[\"firstindex\",{\"1\":{\"17\":2}}],[\"first\",{\"1\":{\"17\":2,\"124\":4,\"126\":8,\"218\":4,\"220\":4,\"392\":2,\"428\":2,\"429\":1,\"430\":1,\"431\":2,\"447\":6}}],[\"front\",{\"1\":{\"191\":1,\"208\":1}}],[\"from\",{\"1\":{\"121\":1,\"191\":1,\"208\":1}}],[\"frozen\",{\"1\":{\"4\":1}}],[\"fastrunner\",{\"1\":{\"155\":8}}],[\"fast在链表前进\",{\"1\":{\"153\":1}}],[\"fast\",{\"1\":{\"85\":8,\"87\":12,\"153\":2,\"155\":1}}],[\"false\",{\"1\":{\"22\":1,\"23\":2,\"25\":1,\"27\":1,\"142\":1,\"146\":2,\"151\":2,\"191\":3,\"208\":3,\"224\":1,\"228\":2,\"261\":3,\"265\":2,\"431\":1}}],[\"found\",{\"1\":{\"450\":1}}],[\"foursumcount\",{\"1\":{\"284\":1}}],[\"foursum\",{\"1\":{\"117\":1}}],[\"for循环中变量定义成i或j的细节\",{\"1\":{\"313\":1}}],[\"for\",{\"1\":{\"17\":1,\"25\":1,\"38\":1,\"47\":1,\"50\":1,\"68\":1,\"76\":2,\"87\":1,\"96\":1,\"117\":2,\"126\":2,\"135\":1,\"146\":1,\"163\":1,\"166\":1,\"175\":1,\"201\":1,\"203\":1,\"220\":1,\"228\":2,\"233\":1,\"237\":1,\"256\":4,\"265\":2,\"274\":1,\"276\":1,\"284\":4,\"295\":1,\"304\":1,\"313\":4,\"332\":1,\"335\":1,\"360\":1,\"370\":2,\"390\":1,\"431\":2,\"447\":1}}],[\"folder\",{\"1\":{\"4\":1}}],[\"fetch\",{\"1\":{\"4\":1}}],[\"illegalstateexception\",{\"1\":{\"438\":1}}],[\"item\",{\"1\":{\"430\":2,\"431\":2}}],[\"i代表行\",{\"1\":{\"313\":1}}],[\"i<levelsize\",{\"1\":{\"295\":1}}],[\"implement\",{\"1\":{\"190\":1,\"207\":1}}],[\"i++\",{\"1\":{\"76\":1,\"126\":1,\"135\":1,\"228\":2,\"233\":1,\"256\":1,\"295\":1,\"313\":1,\"332\":1,\"390\":1}}],[\"ii\",{\"0\":{\"71\":1,\"72\":1,\"81\":1,\"82\":1,\"279\":1,\"280\":1,\"298\":1,\"299\":1,\"307\":1,\"308\":1},\"1\":{\"72\":1,\"82\":1,\"280\":1,\"299\":1,\"308\":1,\"417\":1}}],[\"if\",{\"1\":{\"17\":1,\"25\":2,\"27\":2,\"36\":1,\"38\":3,\"47\":2,\"50\":2,\"59\":4,\"68\":2,\"75\":1,\"76\":4,\"78\":3,\"87\":3,\"96\":6,\"108\":2,\"117\":8,\"126\":1,\"135\":4,\"137\":2,\"146\":6,\"155\":1,\"163\":2,\"166\":1,\"178\":1,\"187\":1,\"201\":1,\"203\":3,\"211\":2,\"220\":1,\"228\":2,\"237\":1,\"256\":1,\"265\":2,\"274\":1,\"276\":2,\"284\":1,\"293\":5,\"295\":3,\"321\":2,\"322\":2,\"323\":2,\"332\":6,\"335\":6,\"344\":3,\"360\":1,\"367\":3,\"368\":6,\"369\":4,\"389\":2,\"390\":3,\"391\":2,\"393\":1,\"394\":1,\"395\":1,\"397\":3,\"398\":2,\"399\":3,\"401\":12,\"407\":9,\"428\":1,\"429\":1,\"430\":2,\"431\":3,\"438\":3,\"447\":1}}],[\"insert\",{\"1\":{\"438\":1}}],[\"instantiated\",{\"1\":{\"211\":1,\"332\":1}}],[\"install\",{\"1\":{\"4\":1}}],[\"inorderiteratorresult\",{\"1\":{\"407\":4}}],[\"inorderresult\",{\"1\":{\"407\":2}}],[\"inordertraversal\",{\"1\":{\"398\":1,\"401\":1,\"407\":2}}],[\"inorder\",{\"1\":{\"394\":3}}],[\"indexprenode\",{\"1\":{\"332\":3}}],[\"indexnode\",{\"1\":{\"332\":3}}],[\"index++\",{\"1\":{\"256\":1}}],[\"index\",{\"1\":{\"256\":1,\"328\":9,\"332\":17,\"334\":2,\"335\":16,\"344\":5,\"351\":1,\"415\":3}}],[\"in2out\",{\"1\":{\"211\":3}}],[\"inverttree\",{\"1\":{\"201\":3,\"203\":1}}],[\"invert\",{\"1\":{\"198\":1}}],[\"in\",{\"1\":{\"42\":1,\"63\":1,\"72\":1,\"100\":1,\"210\":1,\"211\":6,\"215\":1,\"288\":1}}],[\"intersected\",{\"1\":{\"443\":2}}],[\"intersectval\",{\"1\":{\"443\":6}}],[\"intersection\",{\"1\":{\"250\":1,\"256\":1,\"442\":1}}],[\"integer\",{\"1\":{\"59\":1,\"187\":2,\"295\":1}}],[\"integer>\",{\"1\":{\"17\":1,\"284\":2}}],[\"int\",{\"1\":{\"17\":8,\"25\":3,\"36\":1,\"38\":2,\"50\":1,\"59\":2,\"64\":1,\"68\":3,\"73\":1,\"76\":5,\"87\":2,\"96\":4,\"106\":1,\"108\":5,\"117\":8,\"126\":5,\"135\":2,\"137\":1,\"155\":7,\"163\":4,\"166\":4,\"175\":3,\"187\":7,\"191\":3,\"194\":3,\"201\":3,\"203\":3,\"208\":3,\"211\":5,\"220\":3,\"228\":4,\"233\":5,\"237\":5,\"246\":2,\"256\":14,\"265\":2,\"274\":1,\"276\":1,\"284\":10,\"293\":1,\"295\":3,\"304\":6,\"313\":10,\"321\":6,\"322\":6,\"323\":6,\"328\":7,\"332\":13,\"335\":11,\"344\":7,\"367\":6,\"368\":6,\"369\":6,\"381\":2,\"390\":2,\"391\":1,\"426\":2,\"438\":9,\"447\":2}}],[\"i\",{\"1\":{\"13\":1,\"17\":7,\"76\":2,\"92\":5,\"94\":8,\"96\":10,\"105\":1,\"106\":10,\"113\":1,\"126\":2,\"135\":3,\"183\":1,\"228\":7,\"233\":5,\"242\":1,\"245\":2,\"251\":2,\"256\":11,\"281\":7,\"295\":1,\"313\":7,\"332\":2,\"340\":1,\"390\":2}}],[\"isleft\",{\"1\":{\"335\":4}}],[\"isanagram\",{\"1\":{\"228\":1}}],[\"ishappy\",{\"1\":{\"155\":1}}],[\"isvalid\",{\"1\":{\"146\":1}}],[\"isempty\",{\"1\":{\"27\":1,\"38\":1,\"47\":2,\"76\":1,\"135\":1,\"146\":3,\"194\":1,\"203\":1,\"211\":5,\"274\":1,\"295\":1,\"389\":1,\"390\":1,\"397\":1,\"398\":1,\"399\":1,\"438\":1}}],[\"issymmetric\",{\"1\":{\"25\":1,\"27\":1}}],[\"is\",{\"1\":{\"1\":1,\"101\":2,\"191\":1,\"208\":5,\"438\":1}}],[\"|s|\",{\"1\":{\"265\":1}}],[\"||\",{\"1\":{\"25\":3,\"27\":2,\"47\":2,\"50\":1,\"87\":2,\"96\":1,\"146\":1,\"178\":1,\"220\":1,\"398\":1,\"407\":1,\"447\":1}}],[\"|\",{\"1\":{\"4\":2}}],[\"安装依赖\",{\"1\":{\"4\":1}}],[\"visualize\",{\"1\":{\"407\":1}}],[\"view\",{\"1\":{\"130\":1}}],[\"void\",{\"1\":{\"108\":2,\"137\":1,\"191\":1,\"194\":1,\"203\":1,\"208\":1,\"211\":2,\"246\":1,\"276\":1,\"293\":1,\"304\":1,\"328\":4,\"332\":4,\"335\":4,\"360\":1,\"391\":1,\"393\":1,\"394\":1,\"395\":1,\"428\":1,\"429\":1,\"438\":1}}],[\"v\",{\"1\":{\"26\":3,\"27\":8,\"284\":6,\"392\":2}}],[\"val==val\",{\"1\":{\"166\":1}}],[\"valid\",{\"1\":{\"141\":1,\"223\":1}}],[\"valueof\",{\"1\":{\"304\":1}}],[\"value是和出现的次数\",{\"1\":{\"283\":1}}],[\"value\",{\"1\":{\"59\":1,\"187\":2,\"288\":1,\"295\":1,\"350\":1,\"351\":1}}],[\"val\",{\"1\":{\"22\":1,\"24\":6,\"25\":9,\"27\":2,\"32\":1,\"55\":1,\"64\":2,\"68\":7,\"73\":2,\"76\":7,\"83\":1,\"87\":2,\"122\":1,\"126\":7,\"131\":1,\"135\":1,\"137\":1,\"160\":8,\"161\":1,\"163\":12,\"166\":9,\"171\":1,\"175\":7,\"199\":1,\"201\":7,\"203\":7,\"216\":1,\"220\":7,\"233\":11,\"235\":1,\"237\":2,\"274\":1,\"276\":1,\"289\":1,\"293\":2,\"295\":1,\"328\":9,\"332\":15,\"335\":13,\"381\":2,\"389\":1,\"390\":1,\"391\":1,\"393\":1,\"394\":1,\"395\":1,\"397\":1,\"398\":1,\"399\":1,\"401\":3,\"407\":6,\"426\":2,\"443\":1,\"447\":2}}],[\"vuepress\",{\"1\":{\"4\":2}}],[\"version\",{\"1\":{\"4\":1}}],[\"v4\",{\"1\":{\"4\":4}}],[\"j++\",{\"1\":{\"313\":1}}],[\"j代表列\",{\"1\":{\"313\":1}}],[\"join\",{\"1\":{\"104\":1}}],[\"jobs\",{\"1\":{\"4\":1}}],[\"j\",{\"1\":{\"92\":4,\"94\":8,\"96\":12,\"105\":1,\"106\":5,\"281\":3,\"313\":7}}],[\"java\",{\"1\":{\"17\":2,\"47\":2,\"87\":2,\"96\":2,\"104\":1,\"106\":2,\"108\":1,\"117\":2,\"126\":2,\"146\":2,\"155\":2,\"163\":2,\"175\":2,\"187\":2,\"194\":2,\"211\":2,\"220\":2,\"228\":2,\"237\":2,\"246\":2,\"256\":2,\"265\":2,\"284\":2,\"304\":2,\"313\":2,\"321\":1,\"332\":2,\"344\":2,\"375\":1,\"433\":1,\"437\":2,\"438\":6,\"447\":2}}],[\"jamesives\",{\"1\":{\"4\":1}}],[\"js\",{\"1\":{\"4\":1}}],[\"n叉树的层序遍历\",{\"1\":{\"408\":1}}],[\"n皇后\",{\"1\":{\"359\":1}}],[\"nagaram\",{\"1\":{\"224\":1}}],[\"name\",{\"1\":{\"4\":7}}],[\"n个数按一定规则全排列\",{\"1\":{\"359\":1}}],[\"n个数里面按一定规则找出k个数的集合\",{\"1\":{\"359\":1}}],[\"n个正整数的数组和一个正整数\",{\"1\":{\"183\":1}}],[\"n个\",{\"1\":{\"146\":1}}],[\"nth\",{\"1\":{\"121\":1}}],[\"n2\",{\"1\":{\"96\":2,\"284\":2,\"313\":1,\"371\":1}}],[\"nlogn\",{\"1\":{\"94\":1,\"96\":1,\"117\":1}}],[\"n3+nlogn\",{\"1\":{\"117\":1}}],[\"n3\",{\"1\":{\"94\":1,\"117\":3}}],[\"n−1\",{\"1\":{\"85\":1,\"342\":1}}],[\"n+1\",{\"1\":{\"66\":1,\"124\":1,\"125\":1,\"203\":1,\"390\":1}}],[\"next=pre\",{\"1\":{\"174\":1}}],[\"next=prev\",{\"1\":{\"166\":1}}],[\"next=head\",{\"1\":{\"166\":1}}],[\"next=cur\",{\"1\":{\"162\":1,\"174\":1}}],[\"next\",{\"1\":{\"63\":1,\"64\":6,\"66\":7,\"67\":2,\"68\":10,\"72\":1,\"73\":6,\"75\":1,\"76\":5,\"78\":7,\"83\":1,\"87\":9,\"126\":12,\"162\":2,\"163\":11,\"165\":1,\"166\":10,\"174\":2,\"175\":8,\"178\":5,\"218\":7,\"220\":17,\"328\":2,\"332\":21,\"335\":15,\"426\":1,\"428\":1,\"429\":1,\"430\":8,\"431\":2,\"447\":4}}],[\"newnode\",{\"1\":{\"332\":10,\"428\":4,\"429\":4}}],[\"new\",{\"1\":{\"17\":3,\"27\":1,\"38\":2,\"47\":2,\"50\":2,\"76\":1,\"78\":1,\"96\":2,\"106\":1,\"108\":1,\"117\":1,\"126\":1,\"135\":2,\"137\":1,\"146\":1,\"191\":1,\"194\":2,\"203\":1,\"208\":1,\"211\":3,\"220\":1,\"228\":1,\"256\":4,\"265\":1,\"274\":3,\"276\":2,\"284\":1,\"293\":1,\"295\":2,\"313\":1,\"328\":1,\"332\":5,\"335\":5,\"344\":1,\"389\":2,\"390\":3,\"391\":2,\"397\":2,\"398\":2,\"399\":2,\"401\":6,\"408\":9,\"428\":1,\"429\":1,\"438\":1}}],[\"num<=tar\",{\"1\":{\"311\":1}}],[\"num\",{\"1\":{\"235\":1,\"237\":3}}],[\"number\",{\"1\":{\"150\":1}}],[\"nums4\",{\"1\":{\"281\":8}}],[\"nums3\",{\"1\":{\"281\":8}}],[\"nums2\",{\"1\":{\"251\":5,\"256\":2,\"281\":8}}],[\"nums1\",{\"1\":{\"251\":5,\"256\":2,\"281\":8}}],[\"numsr\",{\"1\":{\"183\":2}}],[\"numsl+1\",{\"1\":{\"183\":1}}],[\"numsl\",{\"1\":{\"183\":1}}],[\"nums\",{\"1\":{\"13\":8,\"17\":5,\"92\":21,\"94\":8,\"96\":23,\"113\":13,\"117\":26,\"183\":5,\"187\":4,\"233\":20,\"235\":2,\"237\":3,\"317\":8,\"319\":3,\"321\":4,\"322\":7,\"323\":4,\"340\":6,\"344\":17,\"367\":9,\"368\":15,\"369\":9}}],[\"null\",{\"1\":{\"22\":2,\"25\":5,\"27\":4,\"32\":3,\"36\":1,\"38\":3,\"47\":1,\"50\":1,\"55\":6,\"57\":1,\"59\":5,\"64\":2,\"68\":2,\"73\":3,\"75\":1,\"76\":5,\"78\":5,\"83\":2,\"85\":1,\"87\":7,\"96\":1,\"126\":3,\"131\":3,\"135\":3,\"137\":1,\"163\":3,\"175\":3,\"178\":3,\"191\":3,\"199\":1,\"201\":1,\"203\":3,\"208\":3,\"220\":4,\"270\":14,\"274\":1,\"276\":1,\"289\":1,\"293\":4,\"295\":3,\"328\":5,\"332\":5,\"334\":1,\"335\":3,\"389\":2,\"390\":3,\"391\":1,\"393\":1,\"394\":1,\"395\":1,\"397\":3,\"398\":3,\"399\":3,\"401\":9,\"407\":8,\"421\":1,\"428\":2,\"429\":2,\"430\":5,\"431\":4,\"443\":3,\"445\":1,\"446\":1,\"447\":6}}],[\"n\",{\"0\":{\"121\":1,\"268\":1,\"269\":1,\"414\":1},\"1\":{\"13\":1,\"17\":3,\"25\":3,\"27\":4,\"36\":4,\"38\":4,\"47\":3,\"50\":4,\"59\":3,\"66\":1,\"68\":2,\"76\":4,\"78\":2,\"85\":2,\"87\":2,\"96\":1,\"104\":4,\"106\":4,\"108\":6,\"113\":2,\"117\":12,\"122\":5,\"124\":1,\"126\":7,\"135\":5,\"137\":3,\"146\":3,\"151\":5,\"153\":4,\"155\":10,\"163\":2,\"166\":2,\"175\":2,\"178\":4,\"183\":3,\"187\":5,\"194\":4,\"201\":4,\"203\":4,\"208\":2,\"211\":5,\"220\":2,\"228\":2,\"237\":2,\"242\":4,\"245\":1,\"246\":3,\"256\":1,\"265\":2,\"269\":1,\"270\":1,\"272\":2,\"274\":5,\"276\":2,\"281\":7,\"284\":1,\"293\":3,\"295\":5,\"303\":1,\"304\":8,\"309\":7,\"311\":2,\"313\":8,\"317\":2,\"321\":1,\"332\":4,\"335\":3,\"340\":1,\"344\":2,\"350\":3,\"365\":1,\"371\":1,\"390\":7,\"391\":3,\"395\":5,\"414\":3,\"432\":1,\"443\":4}}],[\"not\",{\"1\":{\"450\":1}}],[\"note\",{\"1\":{\"260\":1}}],[\"none\",{\"1\":{\"404\":2}}],[\"nojekyll\",{\"1\":{\"4\":1}}],[\"node<>\",{\"1\":{\"428\":1,\"429\":1}}],[\"node<e>\",{\"1\":{\"428\":2,\"429\":2,\"430\":3,\"431\":2}}],[\"nodes\",{\"1\":{\"215\":1}}],[\"node\",{\"1\":{\"4\":4,\"22\":1,\"25\":1,\"32\":1,\"38\":5,\"55\":1,\"63\":1,\"64\":5,\"66\":2,\"68\":15,\"72\":1,\"73\":5,\"75\":4,\"76\":23,\"78\":6,\"83\":1,\"121\":1,\"122\":1,\"131\":1,\"135\":6,\"160\":2,\"171\":1,\"199\":1,\"201\":1,\"202\":3,\"203\":7,\"216\":1,\"274\":5,\"276\":5,\"289\":1,\"295\":6,\"330\":1,\"332\":17,\"335\":34,\"389\":6,\"390\":6,\"391\":5,\"397\":6,\"399\":6,\"401\":27,\"407\":12,\"426\":1,\"443\":1}}],[\"tail\",{\"1\":{\"333\":1,\"335\":9}}],[\"table\",{\"1\":{\"228\":4}}],[\"target\",{\"1\":{\"13\":6,\"15\":3,\"16\":1,\"17\":3,\"113\":5,\"117\":8,\"183\":5,\"187\":2,\"313\":2,\"317\":4,\"321\":3,\"322\":3,\"323\":3,\"367\":6,\"368\":14,\"369\":8}}],[\"t\",{\"1\":{\"224\":8,\"226\":3,\"228\":3,\"274\":3}}],[\"throw\",{\"1\":{\"438\":1}}],[\"threesum\",{\"1\":{\"96\":1}}],[\"the\",{\"1\":{\"101\":2,\"208\":1,\"438\":1}}],[\"this\",{\"1\":{\"1\":1,\"25\":4,\"126\":3,\"163\":3,\"166\":3,\"175\":3,\"201\":4,\"203\":4,\"220\":3,\"332\":1}}],[\"temp\",{\"1\":{\"68\":9,\"201\":2,\"203\":2,\"246\":2}}],[\"tt\",{\"1\":{\"48\":3,\"50\":6}}],[\"to\",{\"1\":{\"191\":1,\"208\":1}}],[\"top++\",{\"1\":{\"313\":1}}],[\"top==bottom\",{\"1\":{\"311\":1}}],[\"top\",{\"1\":{\"191\":6,\"194\":2,\"208\":2,\"311\":1,\"313\":6}}],[\"totalsum\",{\"1\":{\"155\":3}}],[\"tostring\",{\"1\":{\"47\":1,\"106\":1,\"108\":1}}],[\"tochararray\",{\"1\":{\"47\":1,\"50\":1,\"146\":1,\"265\":2,\"304\":1}}],[\"tmp\",{\"1\":{\"38\":5,\"108\":2}}],[\"traverse\",{\"1\":{\"407\":4}}],[\"traversal\",{\"1\":{\"269\":1,\"388\":1,\"392\":1}}],[\"trimspaces\",{\"1\":{\"107\":1,\"108\":2}}],[\"trim\",{\"1\":{\"104\":1,\"106\":2}}],[\"treenode\",{\"1\":{\"25\":11,\"27\":3,\"36\":1,\"38\":2,\"59\":1,\"135\":2,\"137\":2,\"201\":11,\"203\":13,\"293\":2,\"295\":2,\"381\":4,\"389\":2,\"390\":2,\"391\":2,\"393\":1,\"394\":1,\"395\":1,\"397\":2,\"398\":2,\"399\":2,\"401\":6,\"407\":1}}],[\"tree\",{\"1\":{\"21\":1,\"25\":1,\"31\":1,\"54\":1,\"130\":1,\"198\":1,\"201\":1,\"203\":1,\"269\":1,\"288\":1,\"383\":2,\"384\":2,\"385\":2,\"386\":2,\"403\":2,\"404\":4}}],[\"true\",{\"1\":{\"4\":1,\"22\":1,\"23\":1,\"25\":1,\"27\":1,\"87\":1,\"142\":2,\"146\":1,\"151\":2,\"155\":1,\"191\":1,\"208\":1,\"224\":1,\"228\":1,\"261\":2,\"265\":1,\"431\":2}}],[\"twosum\",{\"1\":{\"17\":1}}],[\"two\",{\"1\":{\"12\":1,\"250\":1,\"442\":1}}],[\"skipb\",{\"1\":{\"443\":6}}],[\"skipa\",{\"1\":{\"443\":6}}],[\"sky\",{\"1\":{\"101\":2}}],[\"squares\",{\"1\":{\"339\":1}}],[\"swappairs\",{\"1\":{\"220\":1}}],[\"swap\",{\"1\":{\"215\":1,\"438\":3}}],[\"swapleftright\",{\"1\":{\"203\":2}}],[\"search\",{\"1\":{\"316\":1,\"321\":1,\"322\":1,\"323\":1,\"369\":1,\"386\":1,\"392\":1}}],[\"secod\",{\"1\":{\"218\":1}}],[\"second=cur\",{\"1\":{\"218\":1}}],[\"second\",{\"1\":{\"124\":3,\"126\":6,\"218\":3,\"220\":4,\"447\":5}}],[\"set\",{\"1\":{\"293\":1,\"438\":1}}],[\"setcharat\",{\"1\":{\"108\":2}}],[\"setup\",{\"1\":{\"4\":2}}],[\"sz\",{\"1\":{\"122\":3,\"335\":2}}],[\"s+\",{\"1\":{\"104\":1}}],[\"spiral\",{\"1\":{\"308\":1}}],[\"split\",{\"1\":{\"103\":1,\"104\":1}}],[\"space\",{\"1\":{\"4\":1}}],[\"sortedsquares\",{\"1\":{\"344\":1}}],[\"sorted\",{\"1\":{\"339\":1}}],[\"sort\",{\"1\":{\"96\":1,\"117\":1,\"233\":1}}],[\"solution\",{\"1\":{\"17\":1,\"25\":1,\"27\":1,\"36\":1,\"38\":1,\"47\":1,\"50\":1,\"59\":1,\"68\":1,\"76\":1,\"78\":1,\"87\":1,\"96\":1,\"104\":1,\"106\":1,\"108\":1,\"117\":1,\"126\":1,\"135\":1,\"137\":1,\"146\":1,\"155\":1,\"163\":1,\"166\":1,\"175\":1,\"178\":1,\"187\":1,\"201\":1,\"203\":1,\"220\":1,\"228\":1,\"237\":1,\"246\":1,\"256\":1,\"265\":1,\"274\":1,\"276\":1,\"284\":1,\"293\":1,\"295\":1,\"304\":1,\"313\":1,\"321\":1,\"344\":1,\"390\":1,\"397\":1,\"398\":1,\"399\":1,\"401\":3,\"447\":1}}],[\"side\",{\"1\":{\"130\":1}}],[\"singly\",{\"1\":{\"87\":1,\"126\":1,\"163\":1,\"166\":1,\"175\":1,\"220\":1,\"447\":1}}],[\"size++\",{\"1\":{\"332\":3,\"335\":3,\"428\":1,\"429\":1}}],[\"size\",{\"1\":{\"76\":1,\"135\":1,\"137\":1,\"182\":1,\"191\":1,\"194\":2,\"208\":1,\"256\":1,\"274\":3,\"276\":1,\"293\":1,\"295\":1,\"331\":1,\"332\":7,\"335\":4,\"390\":1,\"391\":1,\"430\":1,\"438\":5}}],[\"size=8192\",{\"1\":{\"4\":1}}],[\"slow将到达链表中的一半\",{\"1\":{\"155\":1}}],[\"slowrunner\",{\"1\":{\"155\":4}}],[\"slow在链表中前进\",{\"1\":{\"153\":1}}],[\"slow\",{\"1\":{\"85\":8,\"87\":12,\"153\":1,\"155\":1}}],[\"sb\",{\"1\":{\"47\":3,\"108\":20}}],[\"s\",{\"1\":{\"43\":4,\"47\":5,\"50\":6,\"101\":9,\"104\":4,\"105\":1,\"106\":7,\"108\":7,\"142\":6,\"146\":4,\"224\":8,\"226\":3,\"228\":4,\"242\":5,\"245\":2,\"246\":6,\"265\":1,\"300\":5,\"304\":3}}],[\"st\",{\"1\":{\"401\":36}}],[\"stack<>\",{\"1\":{\"397\":1,\"398\":1,\"399\":1,\"401\":3}}],[\"stack<treenode>\",{\"1\":{\"397\":1,\"398\":1,\"399\":1,\"401\":3}}],[\"stacks\",{\"1\":{\"207\":1}}],[\"stack\",{\"1\":{\"190\":1,\"375\":1,\"377\":1,\"397\":6,\"398\":4,\"399\":6,\"407\":14}}],[\"start++\",{\"1\":{\"187\":1}}],[\"start\",{\"1\":{\"108\":4,\"185\":2,\"186\":1,\"187\":5}}],[\"struct\",{\"1\":{\"64\":1,\"73\":1}}],[\"stringbuilder\",{\"1\":{\"47\":2,\"106\":3,\"108\":6}}],[\"string\",{\"1\":{\"42\":1,\"47\":2,\"50\":3,\"100\":1,\"104\":3,\"106\":2,\"108\":3,\"146\":1,\"228\":2,\"241\":1,\"265\":2,\"299\":1,\"304\":3}}],[\"steps\",{\"1\":{\"4\":1}}],[\"symmetric\",{\"1\":{\"21\":1}}],[\"such\",{\"1\":{\"211\":1,\"332\":1}}],[\"subarray\",{\"1\":{\"182\":1}}],[\"substring\",{\"1\":{\"106\":1}}],[\"submissions\",{\"1\":{\"31\":1,\"100\":1}}],[\"submodules\",{\"1\":{\"4\":1}}],[\"sumcd\",{\"1\":{\"283\":2}}],[\"sum\",{\"1\":{\"12\":1,\"96\":4,\"117\":4,\"182\":1,\"185\":2,\"187\":4}}],[\"src\",{\"1\":{\"4\":2}}],[\"white\",{\"1\":{\"396\":1}}],[\"while\",{\"1\":{\"27\":1,\"38\":1,\"47\":1,\"68\":2,\"76\":1,\"78\":2,\"87\":2,\"96\":5,\"106\":3,\"108\":6,\"117\":3,\"126\":1,\"135\":1,\"155\":2,\"163\":2,\"166\":1,\"175\":1,\"187\":2,\"194\":2,\"203\":1,\"211\":1,\"220\":1,\"246\":1,\"274\":2,\"295\":1,\"304\":1,\"313\":1,\"321\":1,\"322\":1,\"323\":1,\"332\":1,\"344\":1,\"367\":3,\"368\":2,\"369\":1,\"389\":1,\"390\":1,\"397\":1,\"398\":1,\"399\":1,\"401\":3,\"407\":3,\"438\":2,\"447\":1}}],[\"www\",{\"1\":{\"383\":1,\"384\":1,\"385\":1,\"386\":1,\"403\":1,\"404\":2}}],[\"window\",{\"1\":{\"408\":9}}],[\"will\",{\"1\":{\"211\":1,\"332\":1}}],[\"with\",{\"1\":{\"4\":3,\"438\":1}}],[\"wordlist\",{\"1\":{\"104\":3}}],[\"words\",{\"1\":{\"100\":1}}],[\"world\",{\"1\":{\"101\":2}}],[\"write\",{\"1\":{\"4\":1}}],[\"util\",{\"1\":{\"438\":6}}],[\"until\",{\"1\":{\"438\":1}}],[\"unlink\",{\"1\":{\"430\":1,\"431\":2}}],[\"unicode\",{\"1\":{\"224\":1}}],[\"using\",{\"1\":{\"190\":1,\"207\":1}}],[\"uses\",{\"1\":{\"4\":4}}],[\"u\",{\"1\":{\"26\":3,\"27\":8,\"276\":3,\"284\":6}}],[\"ubuntu\",{\"1\":{\"4\":1}}],[\"c=0\",{\"1\":{\"447\":1}}],[\"c1\",{\"1\":{\"443\":1}}],[\"create\",{\"1\":{\"407\":1}}],[\"cs\",{\"1\":{\"304\":8}}],[\"cycle\",{\"1\":{\"82\":1}}],[\"cur=dummy\",{\"1\":{\"218\":1}}],[\"cur=next\",{\"1\":{\"174\":1}}],[\"currentindex\",{\"1\":{\"438\":15}}],[\"curr\",{\"1\":{\"175\":7}}],[\"cur\",{\"1\":{\"78\":17,\"162\":1,\"173\":1,\"174\":1,\"218\":3,\"220\":7,\"335\":18,\"398\":10,\"407\":10}}],[\"c\",{\"1\":{\"47\":3,\"48\":1,\"50\":3,\"108\":4,\"113\":4,\"146\":5,\"265\":5,\"283\":1,\"284\":2,\"304\":2,\"445\":5,\"447\":3}}],[\"chapter\",{\"1\":{\"383\":1,\"384\":1,\"385\":1,\"386\":1,\"403\":1,\"404\":2}}],[\"charat\",{\"1\":{\"106\":2,\"108\":7,\"228\":2}}],[\"char\",{\"1\":{\"47\":1,\"50\":3,\"108\":2,\"146\":1,\"246\":2,\"265\":2,\"304\":3}}],[\"child\",{\"1\":{\"381\":1}}],[\"children\",{\"1\":{\"274\":1,\"276\":1}}],[\"check\",{\"1\":{\"27\":2}}],[\"checkout\",{\"1\":{\"4\":2}}],[\"cap\",{\"1\":{\"351\":1}}],[\"canconstruct\",{\"1\":{\"265\":1}}],[\"car\",{\"1\":{\"224\":1}}],[\"called\",{\"1\":{\"211\":1,\"332\":1}}],[\"ca\",{\"1\":{\"43\":2}}],[\"cache\",{\"1\":{\"4\":1}}],[\"class\",{\"1\":{\"17\":1,\"25\":2,\"27\":1,\"36\":1,\"38\":1,\"47\":1,\"50\":1,\"59\":1,\"68\":2,\"76\":2,\"78\":1,\"87\":2,\"96\":1,\"104\":1,\"106\":1,\"108\":1,\"117\":1,\"126\":2,\"135\":1,\"137\":1,\"146\":1,\"155\":1,\"163\":2,\"166\":2,\"175\":2,\"178\":1,\"187\":1,\"194\":1,\"201\":2,\"203\":2,\"211\":1,\"220\":2,\"228\":1,\"237\":1,\"246\":1,\"256\":1,\"265\":1,\"274\":1,\"276\":1,\"284\":1,\"293\":1,\"295\":1,\"304\":1,\"313\":1,\"321\":1,\"332\":2,\"335\":2,\"344\":1,\"381\":1,\"390\":1,\"397\":1,\"398\":1,\"399\":1,\"401\":3,\"426\":1,\"447\":2}}],[\"compare\",{\"1\":{\"438\":1}}],[\"comparator\",{\"1\":{\"438\":1}}],[\"comparable\",{\"1\":{\"438\":1}}],[\"com\",{\"1\":{\"383\":1,\"384\":1,\"385\":1,\"386\":1,\"403\":1,\"404\":2}}],[\"count++\",{\"1\":{\"313\":4}}],[\"count\",{\"1\":{\"313\":2}}],[\"countab\",{\"1\":{\"284\":5}}],[\"collections\",{\"1\":{\"104\":1,\"399\":1}}],[\"concurrent\",{\"1\":{\"438\":1}}],[\"const\",{\"1\":{\"407\":5}}],[\"condition\",{\"1\":{\"367\":1}}],[\"connect\",{\"1\":{\"68\":1,\"76\":1,\"78\":1}}],[\"continue\",{\"1\":{\"27\":1,\"96\":1,\"117\":4}}],[\"containskey\",{\"1\":{\"17\":1,\"284\":1}}],[\"contents\",{\"1\":{\"4\":1}}],[\"code\",{\"1\":{\"17\":1,\"47\":1,\"87\":1,\"96\":1,\"104\":1,\"106\":1,\"117\":1,\"126\":1,\"146\":1,\"155\":1,\"163\":1,\"175\":1,\"187\":1,\"194\":1,\"211\":1,\"220\":1,\"228\":1,\"237\":1,\"246\":1,\"256\":1,\"265\":1,\"284\":1,\"304\":1,\"313\":1,\"321\":1,\"332\":1,\"344\":1,\"447\":1}}],[\"corepack\",{\"1\":{\"4\":1}}],[\"cnt\",{\"1\":{\"265\":4}}],[\"cn\",{\"1\":{\"4\":1,\"12\":1,\"21\":1,\"31\":1,\"42\":1,\"54\":1,\"63\":1,\"72\":1,\"82\":1,\"91\":1,\"100\":1,\"112\":1,\"121\":1,\"130\":1,\"141\":1,\"150\":1,\"159\":1,\"170\":1,\"182\":1,\"190\":1,\"198\":1,\"207\":1,\"215\":1,\"223\":1,\"232\":1,\"241\":1,\"250\":1,\"260\":1,\"269\":1,\"280\":1,\"288\":1,\"299\":1,\"308\":1,\"316\":1,\"327\":1,\"339\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"442\":1}}],[\"m\",{\"1\":{\"414\":1,\"443\":3}}],[\"mid+\",{\"1\":{\"369\":1}}],[\"mid+1\",{\"1\":{\"367\":1}}],[\"mid−1\",{\"1\":{\"319\":1,\"367\":1}}],[\"mid\",{\"1\":{\"319\":6,\"321\":6,\"322\":8,\"323\":6,\"367\":12,\"368\":11,\"369\":10}}],[\"minsubarraylen\",{\"1\":{\"187\":1}}],[\"min\",{\"1\":{\"59\":2,\"187\":1,\"295\":1,\"303\":1,\"304\":1}}],[\"mindepth\",{\"1\":{\"59\":3}}],[\"minimum\",{\"1\":{\"54\":1,\"182\":1}}],[\"m+n\",{\"1\":{\"256\":3}}],[\"m为nums2数组长度\",{\"1\":{\"256\":1}}],[\"mylinkedlist\",{\"1\":{\"328\":13,\"332\":5,\"335\":2}}],[\"myqueue\",{\"1\":{\"208\":10,\"211\":5}}],[\"mystack\",{\"1\":{\"191\":10,\"194\":2}}],[\"md\",{\"0\":{\"5\":1}}],[\"matrix\",{\"1\":{\"308\":1,\"309\":1}}],[\"math\",{\"1\":{\"34\":1,\"35\":1,\"36\":1,\"59\":2,\"187\":1,\"293\":1,\"295\":1,\"303\":1,\"304\":1,\"344\":6}}],[\"magazine\",{\"1\":{\"261\":8,\"263\":3,\"265\":3}}],[\"map\",{\"1\":{\"17\":4}}],[\"map<integer\",{\"1\":{\"17\":1,\"284\":1}}],[\"maxdepth\",{\"1\":{\"36\":3,\"38\":1}}],[\"maximum\",{\"1\":{\"31\":1}}],[\"max\",{\"1\":{\"4\":1,\"34\":1,\"35\":1,\"36\":2,\"59\":1,\"187\":2,\"293\":1,\"295\":5}}],[\"master\",{\"1\":{\"4\":2}}],[\"me\",{\"1\":{\"1\":1}}],[\"pairs\",{\"1\":{\"215\":1}}],[\"parent\",{\"1\":{\"438\":1}}],[\"parentindex\",{\"1\":{\"438\":5}}],[\"parentheses\",{\"1\":{\"141\":1}}],[\"param\",{\"1\":{\"211\":3,\"332\":1}}],[\"pages\",{\"1\":{\"4\":4}}],[\"page\",{\"1\":{\"4\":1}}],[\"python\",{\"1\":{\"108\":1}}],[\"property\",{\"1\":{\"438\":1}}],[\"problems\",{\"1\":{\"12\":1,\"21\":1,\"31\":1,\"42\":1,\"54\":1,\"63\":1,\"72\":1,\"82\":1,\"91\":1,\"100\":1,\"112\":1,\"121\":1,\"130\":1,\"141\":1,\"150\":1,\"159\":1,\"170\":1,\"182\":1,\"190\":1,\"198\":1,\"207\":1,\"215\":1,\"223\":1,\"232\":1,\"241\":1,\"250\":1,\"260\":1,\"269\":1,\"280\":1,\"288\":1,\"299\":1,\"308\":1,\"316\":1,\"327\":1,\"339\":1,\"442\":1}}],[\"priorityqueue\",{\"1\":{\"438\":3}}],[\"private\",{\"1\":{\"137\":1,\"211\":1,\"391\":1}}],[\"preorderiteratorresult\",{\"1\":{\"407\":4}}],[\"preorderresult\",{\"1\":{\"407\":2}}],[\"preordertraversal\",{\"1\":{\"397\":1,\"401\":1,\"407\":2}}],[\"preorder\",{\"1\":{\"393\":3}}],[\"pre=cur\",{\"1\":{\"174\":1}}],[\"prevent\",{\"1\":{\"367\":1}}],[\"prev=prev\",{\"1\":{\"166\":1}}],[\"prev=dummynode\",{\"1\":{\"166\":1}}],[\"prev\",{\"1\":{\"163\":7,\"166\":3,\"175\":5,\"328\":1,\"335\":17,\"428\":1,\"430\":8}}],[\"pre\",{\"1\":{\"68\":5,\"75\":3,\"76\":5,\"78\":10,\"173\":1}}],[\"poppedelement\",{\"1\":{\"438\":2}}],[\"pop\",{\"1\":{\"191\":7,\"194\":2,\"208\":7,\"210\":2,\"211\":5,\"375\":2,\"397\":1,\"398\":1,\"399\":1,\"401\":9,\"407\":3,\"438\":1}}],[\"populating\",{\"1\":{\"63\":1,\"72\":1}}],[\"postorderiteratorresult\",{\"1\":{\"407\":4}}],[\"postorderresult\",{\"1\":{\"407\":2}}],[\"postordertraversal\",{\"1\":{\"399\":1,\"401\":1,\"407\":2}}],[\"postorder\",{\"1\":{\"395\":3}}],[\"pos\",{\"1\":{\"83\":7}}],[\"pointers\",{\"1\":{\"63\":1,\"72\":1}}],[\"pollfirst\",{\"1\":{\"76\":1,\"203\":1,\"274\":1,\"295\":1}}],[\"polllast\",{\"1\":{\"47\":1,\"146\":1}}],[\"poll\",{\"1\":{\"27\":2,\"47\":1,\"75\":1,\"135\":1,\"194\":3,\"389\":1,\"390\":1}}],[\"peek\",{\"1\":{\"191\":1,\"194\":1,\"208\":7,\"210\":1,\"211\":4,\"401\":6}}],[\"peeklast\",{\"1\":{\"47\":1}}],[\"permissions\",{\"1\":{\"4\":1}}],[\"put\",{\"1\":{\"17\":1,\"284\":1}}],[\"public\",{\"1\":{\"17\":1,\"25\":3,\"27\":2,\"36\":1,\"38\":1,\"47\":1,\"50\":1,\"59\":1,\"68\":8,\"76\":8,\"78\":1,\"87\":2,\"96\":1,\"104\":1,\"106\":1,\"108\":4,\"117\":1,\"126\":2,\"135\":1,\"137\":1,\"146\":1,\"155\":2,\"163\":2,\"166\":2,\"175\":2,\"178\":1,\"187\":1,\"194\":5,\"201\":2,\"203\":3,\"211\":5,\"220\":2,\"228\":1,\"237\":1,\"246\":1,\"256\":1,\"265\":1,\"274\":1,\"276\":1,\"284\":1,\"293\":2,\"295\":1,\"304\":1,\"313\":1,\"321\":1,\"322\":1,\"323\":1,\"332\":7,\"335\":6,\"344\":1,\"367\":1,\"369\":1,\"390\":2,\"391\":2,\"397\":1,\"398\":1,\"399\":1,\"401\":3,\"431\":1,\"438\":2,\"447\":3}}],[\"push\",{\"1\":{\"4\":1,\"191\":8,\"194\":2,\"208\":8,\"210\":1,\"211\":6,\"375\":2,\"397\":3,\"398\":1,\"399\":3,\"401\":15,\"407\":11}}],[\"pnpm\",{\"1\":{\"4\":5}}],[\"部署文档\",{\"1\":{\"4\":3}}],[\"部署到\",{\"1\":{\"4\":1}}],[\"部署到ssh\",{\"1\":{\"4\":1}}],[\"gray\",{\"1\":{\"396\":1}}],[\"generatematrix\",{\"1\":{\"313\":1}}],[\"getintersectionnode\",{\"1\":{\"447\":1}}],[\"getnode\",{\"1\":{\"330\":1,\"332\":4,\"335\":4}}],[\"getnext\",{\"1\":{\"153\":2,\"155\":5}}],[\"getordefault\",{\"1\":{\"284\":1}}],[\"get\",{\"1\":{\"17\":1,\"276\":1,\"284\":1,\"293\":1,\"328\":6,\"332\":3,\"335\":2,\"391\":1,\"438\":8}}],[\"good\",{\"1\":{\"101\":2}}],[\"git\",{\"1\":{\"4\":1}}],[\"github\",{\"1\":{\"4\":2}}],[\"gh\",{\"1\":{\"4\":3}}],[\"文件\",{\"1\":{\"4\":1}}],[\"14\",{\"1\":{\"270\":2}}],[\"142\",{\"0\":{\"81\":1,\"82\":1},\"1\":{\"417\":1}}],[\"13\",{\"1\":{\"270\":2}}],[\"1<\",{\"1\":{\"175\":1}}],[\"199\",{\"0\":{\"129\":1,\"130\":1},\"1\":{\"408\":1}}],[\"19\",{\"0\":{\"120\":1,\"121\":1},\"1\":{\"151\":1,\"414\":1}}],[\"18\",{\"0\":{\"111\":1,\"112\":1}}],[\"121\",{\"1\":{\"340\":1}}],[\"12\",{\"1\":{\"64\":1,\"151\":2,\"270\":2,\"317\":2}}],[\"107\",{\"1\":{\"408\":1}}],[\"102\",{\"1\":{\"408\":1}}],[\"109\",{\"1\":{\"113\":4,\"183\":1}}],[\"105\",{\"1\":{\"55\":1,\"183\":2}}],[\"1047\",{\"0\":{\"41\":1,\"42\":1}}],[\"104\",{\"0\":{\"30\":1,\"31\":1},\"1\":{\"142\":1,\"381\":1,\"408\":1}}],[\"1002\",{\"1\":{\"256\":3}}],[\"100\",{\"1\":{\"22\":2,\"32\":2,\"73\":2,\"122\":1,\"131\":3,\"151\":1,\"191\":1,\"199\":3,\"208\":1,\"216\":2,\"233\":2,\"340\":3}}],[\"10000\",{\"1\":{\"317\":1}}],[\"1000\",{\"1\":{\"22\":1,\"55\":2,\"64\":2,\"251\":2,\"270\":1,\"328\":1}}],[\"101\",{\"0\":{\"20\":1,\"21\":1}}],[\"10\",{\"1\":{\"13\":5,\"32\":1,\"83\":3,\"92\":2,\"101\":1,\"155\":2,\"160\":1,\"224\":1,\"242\":1,\"261\":1,\"270\":3,\"289\":1,\"300\":2,\"340\":4,\"443\":2}}],[\"117\",{\"0\":{\"71\":1,\"72\":1},\"1\":{\"408\":1}}],[\"116\",{\"0\":{\"62\":1,\"63\":1},\"1\":{\"408\":1}}],[\"111\",{\"0\":{\"53\":1,\"54\":1},\"1\":{\"381\":1,\"408\":1}}],[\"11\",{\"1\":{\"13\":1,\"183\":1,\"270\":2,\"340\":1}}],[\"151\",{\"0\":{\"99\":1,\"100\":1}}],[\"15\",{\"0\":{\"90\":1,\"91\":1},\"1\":{\"4\":1,\"13\":1,\"32\":1,\"55\":1,\"115\":1}}],[\"1\",{\"0\":{\"11\":1,\"12\":1,\"23\":1,\"34\":1,\"45\":1,\"74\":1,\"103\":1,\"124\":1,\"235\":1,\"272\":1,\"274\":1,\"291\":1,\"367\":1},\"1\":{\"4\":1,\"13\":6,\"22\":4,\"25\":1,\"27\":1,\"32\":2,\"34\":1,\"35\":1,\"36\":1,\"43\":1,\"50\":2,\"55\":1,\"59\":2,\"64\":4,\"68\":1,\"73\":3,\"78\":2,\"83\":9,\"85\":2,\"87\":2,\"92\":22,\"94\":1,\"96\":4,\"101\":3,\"106\":3,\"108\":5,\"113\":8,\"117\":12,\"122\":10,\"126\":3,\"131\":5,\"135\":1,\"137\":2,\"142\":2,\"146\":1,\"151\":7,\"153\":2,\"155\":3,\"160\":5,\"163\":1,\"166\":2,\"171\":5,\"175\":4,\"183\":16,\"187\":3,\"191\":3,\"194\":3,\"199\":6,\"201\":1,\"208\":11,\"211\":3,\"216\":5,\"220\":1,\"224\":2,\"228\":1,\"233\":4,\"235\":2,\"237\":1,\"242\":3,\"245\":1,\"246\":3,\"251\":4,\"261\":2,\"270\":5,\"274\":1,\"276\":1,\"281\":17,\"284\":2,\"289\":6,\"293\":2,\"300\":3,\"302\":1,\"303\":1,\"304\":4,\"309\":6,\"313\":4,\"317\":7,\"321\":2,\"322\":2,\"323\":5,\"328\":13,\"332\":8,\"335\":8,\"340\":6,\"344\":2,\"350\":6,\"365\":1,\"367\":9,\"368\":7,\"369\":9,\"381\":2,\"384\":2,\"391\":3,\"393\":1,\"394\":1,\"395\":1,\"407\":1,\"432\":1,\"438\":8,\"443\":15,\"447\":1}}],[\"16\",{\"1\":{\"4\":1,\"340\":3}}],[\"17\",{\"1\":{\"4\":1}}],[\"d互不相同\",{\"1\":{\"113\":1}}],[\"dummynode=new\",{\"1\":{\"166\":1}}],[\"dummynode\",{\"1\":{\"165\":1,\"166\":2}}],[\"dummyhead\",{\"1\":{\"124\":1,\"126\":3}}],[\"dummy\",{\"1\":{\"78\":5,\"220\":4}}],[\"duplicates\",{\"1\":{\"42\":1}}],[\"d\",{\"1\":{\"48\":1,\"50\":4,\"113\":3,\"155\":3,\"274\":6,\"283\":1,\"284\":2}}],[\"dfs\",{\"0\":{\"34\":1,\"275\":1,\"291\":1},\"1\":{\"33\":1,\"56\":1,\"137\":4,\"271\":1,\"276\":3,\"290\":1,\"291\":2,\"293\":4,\"387\":4,\"392\":1},\"2\":{\"61\":1,\"139\":1,\"278\":1,\"297\":1}}],[\"delayed\",{\"1\":{\"438\":1}}],[\"delay\",{\"1\":{\"438\":2}}],[\"deleteatindex\",{\"1\":{\"328\":4,\"332\":2,\"335\":1}}],[\"degree\",{\"1\":{\"381\":1}}],[\"design\",{\"1\":{\"327\":1}}],[\"description\",{\"1\":{\"21\":1,\"42\":1,\"54\":1,\"63\":1,\"82\":1,\"91\":1,\"112\":1,\"121\":1,\"130\":1,\"141\":1,\"159\":1,\"190\":1,\"198\":1,\"207\":1,\"215\":1,\"223\":1,\"260\":1,\"269\":1,\"280\":1,\"288\":1,\"299\":1,\"327\":1,\"339\":1,\"442\":1}}],[\"deque\",{\"1\":{\"191\":1,\"203\":6,\"208\":1,\"437\":1,\"438\":2}}],[\"deque<integer>\",{\"1\":{\"211\":1}}],[\"deque<treenode>\",{\"1\":{\"135\":1,\"203\":1,\"295\":1}}],[\"deque<node>\",{\"1\":{\"76\":1,\"274\":1}}],[\"deque<character>\",{\"1\":{\"47\":1,\"146\":1}}],[\"detectcycle\",{\"1\":{\"87\":1}}],[\"definition\",{\"1\":{\"25\":1,\"68\":1,\"76\":1,\"87\":1,\"126\":1,\"163\":1,\"166\":1,\"175\":1,\"201\":1,\"203\":1,\"220\":1,\"447\":1}}],[\"depth\",{\"1\":{\"4\":1,\"31\":1,\"54\":1,\"137\":4,\"276\":4,\"293\":6,\"381\":1,\"392\":2}}],[\"deploy\",{\"1\":{\"4\":4}}],[\"dist\",{\"1\":{\"4\":2}}],[\"double\",{\"1\":{\"438\":1}}],[\"doublew2w\",{\"1\":{\"4\":1}}],[\"docs\",{\"1\":{\"4\":1}}],[\"域名解析\",{\"1\":{\"4\":1}}],[\"介绍\",{\"0\":{\"1\":1}}],[\"档案主页\",{\"0\":{\"0\":1},\"1\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
